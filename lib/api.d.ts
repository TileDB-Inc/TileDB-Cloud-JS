/**
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Model representing aws keys or service role, service roles are currently ignored, but will be preferred option in the future
 * @export
 * @interface AWSAccessCredentials
 */
export interface AWSAccessCredentials {
    /**
     * aws secret access key, never returned in get requests
     * @type {string}
     * @memberof AWSAccessCredentials
     */
    secret_access_key?: string;
    /**
     * aws access key
     * @type {string}
     * @memberof AWSAccessCredentials
     */
    access_key_id?: string;
    /**
     * aws service role to use for access
     * @type {string}
     * @memberof AWSAccessCredentials
     */
    service_role_arn?: string;
    /**
     * human readable name
     * @type {string}
     * @memberof AWSAccessCredentials
     */
    name?: string;
    /**
     * true if this is the default credential to be used within this namespace
     * @type {boolean}
     * @memberof AWSAccessCredentials
     */
    default?: boolean;
    /**
     * a whitelist of one or more buckets this key should access
     * @type {Array<string>}
     * @memberof AWSAccessCredentials
     */
    buckets?: Array<string>;
    /**
     * Time when udf dependencies was created (rfc3339)
     * @type {string}
     * @memberof AWSAccessCredentials
     */
    created_at?: string;
    /**
     * Time when udf dependencies was last updated (rfc3339)
     * @type {string}
     * @memberof AWSAccessCredentials
     */
    updated_at?: string;
}
/**
 * Type of activity logged
 * @export
 * @enum {string}
 */
export declare enum ActivityEventType {
    ReadSchema = "read_schema",
    MaxBufferSizes = "max_buffer_sizes",
    NonEmptyDomain = "non_empty_domain",
    QueryRead = "query_read",
    QueryWrite = "query_write",
    Create = "create",
    Delete = "delete",
    Register = "register",
    Deregister = "deregister",
    Udf = "udf",
    ArrayMetadataGet = "array_metadata_get",
    ArrayMetadataUpdate = "array_metadata_update",
    EstimatedResultSizes = "estimated_result_sizes"
}
/**
 * actions a user can take on an array
 * @export
 * @enum {string}
 */
export declare enum ArrayActions {
    Read = "read",
    Write = "write",
    Edit = "edit",
    ReadArrayLogs = "read_array_logs",
    ReadArrayInfo = "read_array_info",
    ReadArraySchema = "read_array_schema"
}
/**
 * Actvity of an Array
 * @export
 * @interface ArrayActivityLog
 */
export interface ArrayActivityLog {
    /**
     * time event took place (RFC3339)
     * @type {string}
     * @memberof ArrayActivityLog
     */
    event_at?: string;
    /**
     *
     * @type {ActivityEventType}
     * @memberof ArrayActivityLog
     */
    action?: ActivityEventType;
    /**
     * User who performed action
     * @type {string}
     * @memberof ArrayActivityLog
     */
    username?: string;
    /**
     * Bytes sent to client
     * @type {number}
     * @memberof ArrayActivityLog
     */
    bytes_sent?: number;
    /**
     * Bytes recieved from client
     * @type {number}
     * @memberof ArrayActivityLog
     */
    bytes_received?: number;
    /**
     * uuid of associated array task
     * @type {string}
     * @memberof ArrayActivityLog
     */
    array_task_id?: string;
    /**
     * ranges for query
     * @type {string}
     * @memberof ArrayActivityLog
     */
    query_ranges?: string;
}
/**
 * Object including array info and pagination metadata
 * @export
 * @interface ArrayBrowserData
 */
export interface ArrayBrowserData {
    /**
     * Array Info
     * @type {Array<ArrayInfo>}
     * @memberof ArrayBrowserData
     */
    arrays?: Array<ArrayInfo>;
    /**
     *
     * @type {PaginationMetadata}
     * @memberof ArrayBrowserData
     */
    pagination_metadata?: PaginationMetadata;
}
/**
 * Object for ui array tasks browser page
 * @export
 * @interface ArrayBrowserSidebar
 */
export interface ArrayBrowserSidebar {
    /**
     * list of all unique namespaces to display
     * @type {Array<string>}
     * @memberof ArrayBrowserSidebar
     */
    namespaces?: Array<string>;
    /**
     * A count of \"all\" of category
     * @type {number}
     * @memberof ArrayBrowserSidebar
     */
    result_count_for_all?: number;
    /**
     * A map that includes the result count by namespace
     * @type {object}
     * @memberof ArrayBrowserSidebar
     */
    result_count_by_namespace?: object;
}
/**
 * metadata of an array
 * @export
 * @interface ArrayInfo
 */
export interface ArrayInfo {
    /**
     * unique id of registered array
     * @type {string}
     * @memberof ArrayInfo
     */
    id?: string;
    /**
     *
     * @type {FileType}
     * @memberof ArrayInfo
     */
    file_type?: FileType;
    /**
     * map of file properties created for this array
     * @type {{ [key: string]: string; }}
     * @memberof ArrayInfo
     */
    file_properties?: {
        [key: string]: string;
    };
    /**
     * uri of array
     * @type {string}
     * @memberof ArrayInfo
     */
    uri?: string;
    /**
     * namespace array is in
     * @type {string}
     * @memberof ArrayInfo
     */
    namespace?: string;
    /**
     * size in bytes of array
     * @type {number}
     * @memberof ArrayInfo
     */
    size?: number;
    /**
     * Datetime array was last accessed in UTC
     * @type {string}
     * @memberof ArrayInfo
     */
    last_accessed?: string;
    /**
     * description of array
     * @type {string}
     * @memberof ArrayInfo
     */
    description?: string;
    /**
     * name of array
     * @type {string}
     * @memberof ArrayInfo
     */
    name?: string;
    /**
     * list of actions user is allowed to do on this array
     * @type {Array<ArrayActions>}
     * @memberof ArrayInfo
     */
    allowed_actions?: Array<ArrayActions>;
    /**
     * list of pricing created for this array
     * @type {Array<Pricing>}
     * @memberof ArrayInfo
     */
    pricing?: Array<Pricing>;
    /**
     * list of subscriptions created for this array
     * @type {Array<Subscription>}
     * @memberof ArrayInfo
     */
    subscriptions?: Array<Subscription>;
    /**
     * logo (base64 encoded) for the array. Optional
     * @type {string}
     * @memberof ArrayInfo
     */
    logo?: string;
    /**
     * the name of the access credentials to use. if unset, the default credentials will be used
     * @type {string}
     * @memberof ArrayInfo
     */
    access_credentials_name?: string;
    /**
     * Array type (dense, key-value, sparse)
     * @type {string}
     * @memberof ArrayInfo
     */
    type?: string;
    /**
     * number of unique namespaces this array is shared with
     * @type {number}
     * @memberof ArrayInfo
     */
    share_count?: number;
    /**
     * Suggests if the array was shared to public by owner
     * @type {boolean}
     * @memberof ArrayInfo
     */
    public_share?: boolean;
    /**
     * Depends on the namespace asking, denotes the existence of subscription of namespace to this array
     * @type {boolean}
     * @memberof ArrayInfo
     */
    namespace_subscribed?: boolean;
    /**
     * uri for access through TileDB cloud
     * @type {string}
     * @memberof ArrayInfo
     */
    tiledb_uri?: string;
    /**
     * optional tags for array
     * @type {Array<string>}
     * @memberof ArrayInfo
     */
    tags?: Array<string>;
    /**
     * License identifier from SPDX License List or Custom
     * @type {string}
     * @memberof ArrayInfo
     */
    license_id?: string;
    /**
     * License text
     * @type {string}
     * @memberof ArrayInfo
     */
    license_text?: string;
    /**
     * Suggests if the array is in read_only mode
     * @type {boolean}
     * @memberof ArrayInfo
     */
    read_only?: boolean;
}
/**
 * metadata of an array
 * @export
 * @interface ArrayInfoUpdate
 */
export interface ArrayInfoUpdate {
    /**
     * description of array
     * @type {string}
     * @memberof ArrayInfoUpdate
     */
    description?: string;
    /**
     * description of array
     * @type {string}
     * @memberof ArrayInfoUpdate
     */
    name?: string;
    /**
     * uri of array
     * @type {string}
     * @memberof ArrayInfoUpdate
     */
    uri?: string;
    /**
     *
     * @type {FileType}
     * @memberof ArrayInfoUpdate
     */
    file_type?: FileType;
    /**
     * map of file properties created for this array
     * @type {{ [key: string]: string; }}
     * @memberof ArrayInfoUpdate
     */
    file_properties?: {
        [key: string]: string;
    };
    /**
     * the name of the access credentials to use. if unset, the default credentials will be used
     * @type {string}
     * @memberof ArrayInfoUpdate
     */
    access_credentials_name?: string;
    /**
     * logo (base64 encoded) for the array. Optional
     * @type {string}
     * @memberof ArrayInfoUpdate
     */
    logo?: string;
    /**
     * optional tags for array
     * @type {Array<string>}
     * @memberof ArrayInfoUpdate
     */
    tags?: Array<string>;
    /**
     * License identifier from SPDX License List or Custom
     * @type {string}
     * @memberof ArrayInfoUpdate
     */
    license_id?: string;
    /**
     * License text
     * @type {string}
     * @memberof ArrayInfoUpdate
     */
    license_text?: string;
}
/**
 * user\'s TileDB array metadata
 * @export
 * @interface ArrayMetadata
 */
export interface ArrayMetadata {
    /**
     * List of metadata entries
     * @type {Array<ArrayMetadataEntry>}
     * @memberof ArrayMetadata
     */
    entries?: Array<ArrayMetadataEntry>;
}
/**
 * key/value pair representing an array metadata map entry
 * @export
 * @interface ArrayMetadataEntry
 */
export interface ArrayMetadataEntry {
    /**
     *
     * @type {string}
     * @memberof ArrayMetadataEntry
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof ArrayMetadataEntry
     */
    type?: string;
    /**
     *
     * @type {number}
     * @memberof ArrayMetadataEntry
     */
    valueNum?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof ArrayMetadataEntry
     */
    value?: Array<number>;
    /**
     *
     * @type {boolean}
     * @memberof ArrayMetadataEntry
     */
    del?: boolean;
}
/**
 * Sample data from array
 * @export
 * @interface ArraySample
 */
export interface ArraySample {
    /**
     *
     * @type {object}
     * @memberof ArraySample
     */
    data?: object;
}
/**
 * ArraySchema during creation or retrieval
 * @export
 * @interface ArraySchema
 */
export interface ArraySchema {
    /**
     * URI of schema
     * @type {string}
     * @memberof ArraySchema
     */
    uri?: string;
    /**
     * file format version
     * @type {Array<number>}
     * @memberof ArraySchema
     */
    version: Array<number>;
    /**
     *
     * @type {ArrayType}
     * @memberof ArraySchema
     */
    arrayType: ArrayType;
    /**
     *
     * @type {Layout}
     * @memberof ArraySchema
     */
    tileOrder: Layout;
    /**
     *
     * @type {Layout}
     * @memberof ArraySchema
     */
    cellOrder: Layout;
    /**
     * Capacity of array
     * @type {number}
     * @memberof ArraySchema
     */
    capacity: number;
    /**
     *
     * @type {FilterPipeline}
     * @memberof ArraySchema
     */
    coordsFilterPipeline: FilterPipeline;
    /**
     *
     * @type {FilterPipeline}
     * @memberof ArraySchema
     */
    offsetFilterPipeline: FilterPipeline;
    /**
     *
     * @type {Domain}
     * @memberof ArraySchema
     */
    domain: Domain;
    /**
     * Attributes of array
     * @type {Array<Attribute>}
     * @memberof ArraySchema
     */
    attributes: Array<Attribute>;
    /**
     * True if the array allows coordinate duplicates. Applicable only to sparse arrays.
     * @type {boolean}
     * @memberof ArraySchema
     */
    allowsDuplicates?: boolean;
}
/**
 * details for sharing a given array
 * @export
 * @interface ArraySharing
 */
export interface ArraySharing {
    /**
     * List of permitted actions
     * @type {Array<ArrayActions>}
     * @memberof ArraySharing
     */
    actions?: Array<ArrayActions>;
    /**
     * namespace being granted array access can be a user or organization
     * @type {string}
     * @memberof ArraySharing
     */
    namespace?: string;
    /**
     * details on if the namespace is a organization or user
     * @type {string}
     * @memberof ArraySharing
     */
    namespace_type?: string;
}
/**
 * Synchronous Task to Run
 * @export
 * @interface ArrayTask
 */
export interface ArrayTask {
    /**
     * task id
     * @type {string}
     * @memberof ArrayTask
     */
    id?: string;
    /**
     * Optional task name
     * @type {string}
     * @memberof ArrayTask
     */
    name?: string;
    /**
     * Optional task description (Tasks purpose)
     * @type {string}
     * @memberof ArrayTask
     */
    description?: string;
    /**
     *
     * @type {ArrayInfo}
     * @memberof ArrayTask
     */
    array_metadata?: ArrayInfo;
    /**
     *
     * @type {DomainArray}
     * @memberof ArrayTask
     */
    subarray?: DomainArray;
    /**
     * memory allocated to task in bytes
     * @type {number}
     * @memberof ArrayTask
     */
    memory?: number;
    /**
     * millicpu allocated to task
     * @type {number}
     * @memberof ArrayTask
     */
    cpu?: number;
    /**
     * namespace task is tied to
     * @type {string}
     * @memberof ArrayTask
     */
    namespace?: string;
    /**
     *
     * @type {ArrayTaskStatus}
     * @memberof ArrayTask
     */
    status?: ArrayTaskStatus;
    /**
     * Start time RFC3339 for job
     * @type {string}
     * @memberof ArrayTask
     */
    start_time?: string;
    /**
     * Finish time RFC3339 for job
     * @type {string}
     * @memberof ArrayTask
     */
    finish_time?: string;
    /**
     * Total accumulated for task in USD, example is $0.12
     * @type {number}
     * @memberof ArrayTask
     */
    cost?: number;
    /**
     * Total accumulated for egress task in USD, example is $0.12
     * @type {number}
     * @memberof ArrayTask
     */
    egress_cost?: number;
    /**
     * Cost accumulated for access task in USD, example is $0.12
     * @type {number}
     * @memberof ArrayTask
     */
    access_cost?: number;
    /**
     *
     * @type {Querytype}
     * @memberof ArrayTask
     */
    query_type?: Querytype;
    /**
     * Optional actual code that is going to be executed
     * @type {string}
     * @memberof ArrayTask
     */
    udf_code?: string;
    /**
     * Optional actual language used to express udf_code
     * @type {string}
     * @memberof ArrayTask
     */
    udf_language?: string;
    /**
     * Optional actual sql query that is going to be executed
     * @type {string}
     * @memberof ArrayTask
     */
    sql_query?: string;
    /**
     *
     * @type {ArrayTaskType}
     * @memberof ArrayTask
     */
    type?: ArrayTaskType;
    /**
     * Array activity logs for task
     * @type {Array<ArrayActivityLog>}
     * @memberof ArrayTask
     */
    activity?: Array<ArrayActivityLog>;
    /**
     * logs from array task
     * @type {string}
     * @memberof ArrayTask
     */
    logs?: string;
    /**
     * duration in nanoseconds of an array task
     * @type {number}
     * @memberof ArrayTask
     */
    duration?: number;
    /**
     * SQL queries or commands to run before main sql query
     * @type {Array<string>}
     * @memberof ArrayTask
     */
    sql_init_commands?: Array<string>;
    /**
     * SQL query parameters
     * @type {Array<object>}
     * @memberof ArrayTask
     */
    sql_parameters?: Array<object>;
    /**
     *
     * @type {ResultFormat}
     * @memberof ArrayTask
     */
    result_format?: ResultFormat;
    /**
     * string representing the serialization format to use, i.e. cloudpickle version or arrow IPC verison
     * @type {string}
     * @memberof ArrayTask
     */
    result_format_version?: string;
}
/**
 * Object for ui array tasks browser page
 * @export
 * @interface ArrayTaskBrowserSidebar
 */
export interface ArrayTaskBrowserSidebar {
    /**
     * list of all unique organizations the user is part of that have array tasks
     * @type {Array<string>}
     * @memberof ArrayTaskBrowserSidebar
     */
    organizations?: Array<string>;
    /**
     * A count of \"all\"
     * @type {number}
     * @memberof ArrayTaskBrowserSidebar
     */
    result_count_for_all?: number;
    /**
     * A map that includes the result count by namespace
     * @type {object}
     * @memberof ArrayTaskBrowserSidebar
     */
    result_count_by_namespace?: object;
}
/**
 * Object including array tasks and metadata
 * @export
 * @interface ArrayTaskData
 */
export interface ArrayTaskData {
    /**
     * Array Tasks
     * @type {Array<ArrayTask>}
     * @memberof ArrayTaskData
     */
    array_tasks?: Array<ArrayTask>;
    /**
     *
     * @type {PaginationMetadata}
     * @memberof ArrayTaskData
     */
    pagination_metadata?: PaginationMetadata;
}
/**
 * Array task stderr/stdout logs
 * @export
 * @interface ArrayTaskLog
 */
export interface ArrayTaskLog {
    /**
     * ID of associated task
     * @type {string}
     * @memberof ArrayTaskLog
     */
    array_task_id?: string;
    /**
     * logs from array task
     * @type {string}
     * @memberof ArrayTaskLog
     */
    logs?: string;
}
/**
 * Status of array task
 * @export
 * @enum {string}
 */
export declare enum ArrayTaskStatus {
    Failed = "FAILED",
    Completed = "COMPLETED",
    Running = "RUNNING"
}
/**
 * Synchronous Task Type
 * @export
 * @enum {string}
 */
export declare enum ArrayTaskType {
    Sql = "SQL",
    Udf = "UDF",
    Query = "QUERY",
    GenericUdf = "GENERIC_UDF"
}
/**
 * TileDB array type
 * @export
 * @enum {string}
 */
export declare enum ArrayType {
    Dense = "dense",
    Sparse = "sparse"
}
/**
 * Attribute of array
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * Attribute name
     * @type {string}
     * @memberof Attribute
     */
    name: string;
    /**
     *
     * @type {Datatype}
     * @memberof Attribute
     */
    type: Datatype;
    /**
     *
     * @type {FilterPipeline}
     * @memberof Attribute
     */
    filterPipeline: FilterPipeline;
    /**
     * Attribute number of values per cell
     * @type {number}
     * @memberof Attribute
     */
    cellValNum: number;
    /**
     * The default fill value
     * @type {Array<number>}
     * @memberof Attribute
     */
    fillValue?: Array<number>;
}
/**
 * Represents an attribute buffer header information
 * @export
 * @interface AttributeBufferHeader
 */
export interface AttributeBufferHeader {
    /**
     * Attribute name
     * @type {string}
     * @memberof AttributeBufferHeader
     */
    name: string;
    /**
     * Number of bytes in the fixed-length attribute data buffer (offsets for var-len attributes)
     * @type {number}
     * @memberof AttributeBufferHeader
     */
    fixedLenBufferSizeInBytes: number;
    /**
     * Number of bytes in the var-length attribute data buffer
     * @type {number}
     * @memberof AttributeBufferHeader
     */
    varLenBufferSizeInBytes: number;
}
/**
 * object representing buffer size of an attribute
 * @export
 * @interface AttributeBufferSize
 */
export interface AttributeBufferSize {
    /**
     * name of attribute
     * @type {string}
     * @memberof AttributeBufferSize
     */
    attribute: string;
    /**
     * buffer size (in bytes) of offset buffer
     * @type {number}
     * @memberof AttributeBufferSize
     */
    offsetBytes: number;
    /**
     * buffer size (in bytes) of data buffer
     * @type {number}
     * @memberof AttributeBufferSize
     */
    dataBytes: number;
}
/**
 * TileDB data type
 * @export
 * @enum {string}
 */
export declare enum Datatype {
    Int32 = "INT32",
    Int64 = "INT64",
    Float32 = "FLOAT32",
    Float64 = "FLOAT64",
    Char = "CHAR",
    Int8 = "INT8",
    Uint8 = "UINT8",
    Int16 = "INT16",
    Uint16 = "UINT16",
    Uint32 = "UINT32",
    Uint64 = "UINT64",
    StringAscii = "STRING_ASCII",
    StringUtf8 = "STRING_UTF8",
    StringUtf16 = "STRING_UTF16",
    StringUtf32 = "STRING_UTF32",
    StringUcs2 = "STRING_UCS2",
    StringUcs4 = "STRING_UCS4",
    Any = "ANY"
}
/**
 * Dimension of array
 * @export
 * @interface Dimension
 */
export interface Dimension {
    /**
     * Dimension name
     * @type {string}
     * @memberof Dimension
     */
    name?: string;
    /**
     *
     * @type {Datatype}
     * @memberof Dimension
     */
    type: Datatype;
    /**
     *
     * @type {DomainArray}
     * @memberof Dimension
     */
    domain: DomainArray;
    /**
     * Is tile extent null
     * @type {boolean}
     * @memberof Dimension
     */
    nullTileExtent: boolean;
    /**
     *
     * @type {DimensionTileExtent}
     * @memberof Dimension
     */
    tileExtent?: DimensionTileExtent;
    /**
     *
     * @type {FilterPipeline}
     * @memberof Dimension
     */
    filterPipeline?: FilterPipeline;
}
/**
 * A single, typed coordinate for a dimension
 * @export
 * @interface DimensionCoordinate
 */
export interface DimensionCoordinate {
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    int8?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    uint8?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    int16?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    uint16?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    int32?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    uint32?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    int64?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    uint64?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    float32?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionCoordinate
     */
    float64?: number;
}
/**
 * Extent of tile
 * @export
 * @interface DimensionTileExtent
 */
export interface DimensionTileExtent {
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    int8?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    uint8?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    int16?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    uint16?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    int32?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    uint32?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    int64?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    uint64?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    float32?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionTileExtent
     */
    float64?: number;
}
/**
 * Domain of array
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     *
     * @type {Datatype}
     * @memberof Domain
     */
    type: Datatype;
    /**
     *
     * @type {Layout}
     * @memberof Domain
     */
    tileOrder: Layout;
    /**
     *
     * @type {Layout}
     * @memberof Domain
     */
    cellOrder: Layout;
    /**
     * Array of dimensions
     * @type {Array<Dimension>}
     * @memberof Domain
     */
    dimensions: Array<Dimension>;
}
/**
 * Domain object for an array of each type
 * @export
 * @interface DomainArray
 */
export interface DomainArray {
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    int8?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    uint8?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    int16?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    uint16?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    int32?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    uint32?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    int64?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    uint64?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    float32?: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof DomainArray
     */
    float64?: Array<number>;
}
/**
 *
 * @export
 * @interface Favorite
 */
export interface Favorite {
    /**
     * unique uuid of the favorite
     * @type {string}
     * @memberof Favorite
     */
    id?: string;
    /**
     *
     * @type {FavoriteType}
     * @memberof Favorite
     */
    object_type?: FavoriteType;
    /**
     * The namespace the favorite is in. It won\'t be persisted in DB
     * @type {string}
     * @memberof Favorite
     */
    namespace?: string;
    /**
     * Name of the object. It wont be persisted in DB
     * @type {string}
     * @memberof Favorite
     */
    name?: string;
}
/**
 * List of values that FavoriteType can take
 * @export
 * @enum {string}
 */
export declare enum FavoriteType {
    Array = "ARRAY"
}
/**
 *
 * @export
 * @interface FavoriteUpdate
 */
export interface FavoriteUpdate {
    /**
     *
     * @type {string}
     * @memberof FavoriteUpdate
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof FavoriteUpdate
     */
    namespace?: string;
    /**
     *
     * @type {FavoriteType}
     * @memberof FavoriteUpdate
     */
    object_type?: FavoriteType;
}
/**
 * File property assigned to a specific file (array)
 * @export
 * @enum {string}
 */
export declare enum FilePropertyName {
    Image = "image",
    Size = "size",
    CodeBlock = "code_block"
}
/**
 * File types represented as TileDB arrays
 * @export
 * @enum {string}
 */
export declare enum FileType {
    Notebook = "notebook",
    UserDefinedFunction = "user_defined_function"
}
/**
 * Filter
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     *
     * @type {FilterType}
     * @memberof Filter
     */
    type: FilterType;
    /**
     *
     * @type {FilterData}
     * @memberof Filter
     */
    data?: FilterData;
}
/**
 * Filter data
 * @export
 * @interface FilterData
 */
export interface FilterData {
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    int8?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    uint8?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    int16?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    uint16?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    int32?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    uint32?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    int64?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    uint64?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    float32?: number;
    /**
     *
     * @type {number}
     * @memberof FilterData
     */
    float64?: number;
}
/**
 * TileDB filter option
 * @export
 * @enum {string}
 */
export declare enum FilterOption {
    CompressionLevel = "COMPRESSION_LEVEL",
    BitWidthMaxWindow = "BIT_WIDTH_MAX_WINDOW",
    PositiveDeltaMaxWindow = "POSITIVE_DELTA_MAX_WINDOW"
}
/**
 * One or more filters to apply
 * @export
 * @interface FilterPipeline
 */
export interface FilterPipeline {
    /**
     *
     * @type {Array<Filter>}
     * @memberof FilterPipeline
     */
    filters?: Array<Filter>;
}
/**
 * TileDB filter types
 * @export
 * @enum {string}
 */
export declare enum FilterType {
    None = "FILTER_NONE",
    Gzip = "FILTER_GZIP",
    Zstd = "FILTER_ZSTD",
    Lz4 = "FILTER_LZ4",
    Rle = "FILTER_RLE",
    Bzip2 = "FILTER_BZIP2",
    DoubleDelta = "FILTER_DOUBLE_DELTA",
    BitWidthReduction = "FILTER_BIT_WIDTH_REDUCTION",
    Bitshuffle = "FILTER_BITSHUFFLE",
    Byteshuffle = "FILTER_BYTESHUFFLE",
    PositiveDelta = "FILTER_POSITIVE_DELTA"
}
/**
 * User-defined function
 * @export
 * @interface GenericUDF
 */
export interface GenericUDF {
    /**
     * name of UDFInfo to run, format is {namespace}/{udf_name}. Can not be used with exec
     * @type {string}
     * @memberof GenericUDF
     */
    udf_info_name?: string;
    /**
     *
     * @type {UDFLanguage}
     * @memberof GenericUDF
     */
    language?: UDFLanguage;
    /**
     * Type-specific version
     * @type {string}
     * @memberof GenericUDF
     */
    version?: string;
    /**
     * Docker image name to use for udf
     * @type {string}
     * @memberof GenericUDF
     */
    image_name?: string;
    /**
     * Type-specific executable text
     * @type {string}
     * @memberof GenericUDF
     */
    exec?: string;
    /**
     * optional raw text to store of serialized function, used for showing in UI
     * @type {string}
     * @memberof GenericUDF
     */
    exec_raw?: string;
    /**
     * Argument(s) to pass to udf function, tuple or list of args/kwargs which can be in native or json format
     * @type {string}
     * @memberof GenericUDF
     */
    argument?: string;
    /**
     *
     * @type {ResultFormat}
     * @memberof GenericUDF
     */
    result_format?: ResultFormat;
    /**
     * string representing the serialization format to use, i.e. cloudpickle version or arrow IPC verison
     * @type {string}
     * @memberof GenericUDF
     */
    result_format_version?: string;
    /**
     * name of task, optional
     * @type {string}
     * @memberof GenericUDF
     */
    task_name?: string;
    /**
     * store results for later retrieval
     * @type {boolean}
     * @memberof GenericUDF
     */
    store_results?: boolean;
}
/**
 * Password to update
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * password
     * @type {string}
     * @memberof InlineObject
     */
    password?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * string of stats from tiledb
     * @type {string}
     * @memberof InlineResponse200
     */
    stats?: string;
}
/**
 * Invitations to share or collaborate
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     * Unique id of invitation added to magic link
     * @type {string}
     * @memberof Invitation
     */
    id?: string;
    /**
     *
     * @type {InvitationType}
     * @memberof Invitation
     */
    invitation_type?: InvitationType;
    /**
     * Namespace of the owner of the invitation (user or organization)
     * @type {string}
     * @memberof Invitation
     */
    owner_namespace_uuid?: string;
    /**
     * Unique id of the user accepted the invitation
     * @type {string}
     * @memberof Invitation
     */
    user_namespace_uuid?: string;
    /**
     * Unique id of the organization user accepted the invitation
     * @type {string}
     * @memberof Invitation
     */
    organization_user_uuid?: string;
    /**
     * Name of the organization, does not persist in database
     * @type {string}
     * @memberof Invitation
     */
    organization_name?: string;
    /**
     *
     * @type {OrganizationRoles}
     * @memberof Invitation
     */
    organization_role?: OrganizationRoles;
    /**
     * Unique id of the array
     * @type {string}
     * @memberof Invitation
     */
    array_uuid?: string;
    /**
     * Name of the array, does not persist in database
     * @type {string}
     * @memberof Invitation
     */
    array_name?: string;
    /**
     * Email of the individual we send the invitation to
     * @type {string}
     * @memberof Invitation
     */
    email?: string;
    /**
     * A comma separated list of ArrayActions or NamespaceActions
     * @type {string}
     * @memberof Invitation
     */
    actions?: string;
    /**
     *
     * @type {InvitationStatus}
     * @memberof Invitation
     */
    status?: InvitationStatus;
    /**
     * Datetime the invitation was created in UTC
     * @type {string}
     * @memberof Invitation
     */
    created_at?: string;
    /**
     * Datetime the invitation is expected to expire in UTC
     * @type {string}
     * @memberof Invitation
     */
    expires_at?: string;
    /**
     * Datetime the invitation was accepted in UTC
     * @type {string}
     * @memberof Invitation
     */
    accepted_at?: string;
}
/**
 * Encapsulates information regarding inviting people using email to share array, same permissions for all invitees
 * @export
 * @interface InvitationArrayShareEmail
 */
export interface InvitationArrayShareEmail {
    /**
     * List of permitted actions
     * @type {Array<ArrayActions>}
     * @memberof InvitationArrayShareEmail
     */
    actions: Array<ArrayActions>;
    /**
     *
     * @type {Array<string>}
     * @memberof InvitationArrayShareEmail
     */
    invitee_email: Array<string>;
}
/**
 * Object including invitations and metadata
 * @export
 * @interface InvitationData
 */
export interface InvitationData {
    /**
     * List of invitations
     * @type {Array<Invitation>}
     * @memberof InvitationData
     */
    invitations?: Array<Invitation>;
    /**
     *
     * @type {PaginationMetadata}
     * @memberof InvitationData
     */
    pagination_metadata?: PaginationMetadata;
}
/**
 * Encapsulates information regarding inviting people using email to join organization, same permissions for all invitees
 * @export
 * @interface InvitationOrganizationJoinEmail
 */
export interface InvitationOrganizationJoinEmail {
    /**
     * List of permitted actions
     * @type {Array<NamespaceActions>}
     * @memberof InvitationOrganizationJoinEmail
     */
    actions?: Array<NamespaceActions>;
    /**
     *
     * @type {OrganizationRoles}
     * @memberof InvitationOrganizationJoinEmail
     */
    organization_role: OrganizationRoles;
    /**
     *
     * @type {Array<string>}
     * @memberof InvitationOrganizationJoinEmail
     */
    invitee_email: Array<string>;
}
/**
 * List of values that InvitationStatus can take
 * @export
 * @enum {string}
 */
export declare enum InvitationStatus {
    Pending = "PENDING",
    Accepted = "ACCEPTED"
}
/**
 * List of values that InvitationType can take
 * @export
 * @enum {string}
 */
export declare enum InvitationType {
    ArrayShare = "ARRAY_SHARE",
    JoinOrganization = "JOIN_ORGANIZATION"
}
/**
 * Information related to last access of an array
 * @export
 * @interface LastAccessedArray
 */
export interface LastAccessedArray {
    /**
     * unique id of array
     * @type {string}
     * @memberof LastAccessedArray
     */
    array_id?: string;
    /**
     * name of the array
     * @type {string}
     * @memberof LastAccessedArray
     */
    array_name?: string;
    /**
     * namespace of a user or organization
     * @type {string}
     * @memberof LastAccessedArray
     */
    namespace?: string;
    /**
     * timestamp (epoch milliseconds) array is last accessed
     * @type {number}
     * @memberof LastAccessedArray
     */
    accessed_time?: number;
    /**
     *
     * @type {ActivityEventType}
     * @memberof LastAccessedArray
     */
    access_type?: ActivityEventType;
}
/**
 * Layout of array
 * @export
 * @enum {string}
 */
export declare enum Layout {
    RowMajor = "row-major",
    ColMajor = "col-major",
    GlobalOrder = "global-order",
    Unordered = "unordered"
}
/**
 * a list of max buffer sizes, one per attribute
 * @export
 * @interface MaxBufferSizes
 */
export interface MaxBufferSizes {
    /**
     *
     * @type {Array<AttributeBufferSize>}
     * @memberof MaxBufferSizes
     */
    maxBufferSizes?: Array<AttributeBufferSize>;
}
/**
 * Represents an open array
 * @export
 * @interface ModelArray
 */
export interface ModelArray {
    /**
     * timestamp (epoch milliseconds) array is opened at
     * @type {number}
     * @memberof ModelArray
     */
    timestamp: number;
    /**
     *
     * @type {Querytype}
     * @memberof ModelArray
     */
    queryType: Querytype;
    /**
     * Array uri
     * @type {string}
     * @memberof ModelArray
     */
    uri: string;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {number}
     * @memberof ModelError
     */
    code?: number;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    request_id?: string;
}
/**
 * User-defined function
 * @export
 * @interface MultiArrayUDF
 */
export interface MultiArrayUDF {
    /**
     * name of UDFInfo to run, format is {namespace}/{udf_name}. Can not be used with exec
     * @type {string}
     * @memberof MultiArrayUDF
     */
    udf_info_name?: string;
    /**
     *
     * @type {UDFLanguage}
     * @memberof MultiArrayUDF
     */
    language?: UDFLanguage;
    /**
     * Type-specific version
     * @type {string}
     * @memberof MultiArrayUDF
     */
    version?: string;
    /**
     * Docker image name to use for udf
     * @type {string}
     * @memberof MultiArrayUDF
     */
    image_name?: string;
    /**
     * Type-specific executable text
     * @type {string}
     * @memberof MultiArrayUDF
     */
    exec?: string;
    /**
     * optional raw text to store of serialized function, used for showing in UI
     * @type {string}
     * @memberof MultiArrayUDF
     */
    exec_raw?: string;
    /**
     *
     * @type {ResultFormat}
     * @memberof MultiArrayUDF
     */
    result_format?: ResultFormat;
    /**
     * string representing the serialization format to use, i.e. cloudpickle version or arrow IPC verison
     * @type {string}
     * @memberof MultiArrayUDF
     */
    result_format_version?: string;
    /**
     * name of task, optional
     * @type {string}
     * @memberof MultiArrayUDF
     */
    task_name?: string;
    /**
     * Argument(s) to pass to udf function, tuple or list of args/kwargs which can be in native or json format
     * @type {string}
     * @memberof MultiArrayUDF
     */
    argument?: string;
    /**
     * store results for later retrieval
     * @type {boolean}
     * @memberof MultiArrayUDF
     */
    store_results?: boolean;
    /**
     *
     * @type {QueryRanges}
     * @memberof MultiArrayUDF
     */
    ranges?: QueryRanges;
    /**
     *
     * @type {UDFSubarray}
     * @memberof MultiArrayUDF
     */
    subarray?: UDFSubarray;
    /**
     * List of buffers to fetch (attributes + dimensions). Deprecated please set arrays with UDFArrayDetails
     * @type {Array<string>}
     * @memberof MultiArrayUDF
     */
    buffers?: Array<string>;
    /**
     * Array ranges/buffer into to run UDF on
     * @type {Array<UDFArrayDetails>}
     * @memberof MultiArrayUDF
     */
    arrays?: Array<UDFArrayDetails>;
}
/**
 * actions a user can take on an organization
 * @export
 * @enum {string}
 */
export declare enum NamespaceActions {
    Read = "read",
    Write = "write",
    Create = "create",
    Delete = "delete",
    Edit = "edit",
    ReadArrayLogs = "read_array_logs",
    ReadJobLogs = "read_job_logs",
    ReadObjectLogs = "read_object_logs",
    RunJob = "run_job",
    DeleteOrganization = "delete_organization",
    EditOrganization = "edit_organization",
    EditBilling = "edit_billing"
}
/**
 * object representing a non-empty domain
 * @export
 * @interface NonEmptyDomain
 */
export interface NonEmptyDomain {
    /**
     *
     * @type {DomainArray}
     * @memberof NonEmptyDomain
     */
    nonEmptyDomain: DomainArray;
    /**
     * Is non-empty domain really empty?
     * @type {boolean}
     * @memberof NonEmptyDomain
     */
    isEmpty: boolean;
}
/**
 * Status details of a notebook server
 * @export
 * @interface NotebookStatus
 */
export interface NotebookStatus {
    /**
     * namespace of notebook
     * @type {string}
     * @memberof NotebookStatus
     */
    namespace?: string;
    /**
     * duration notebook has been running in seconds
     * @type {number}
     * @memberof NotebookStatus
     */
    uptime?: number;
    /**
     * current cpu usage in millicpu
     * @type {number}
     * @memberof NotebookStatus
     */
    cpu_usage?: number;
    /**
     * memory usage in bytes
     * @type {number}
     * @memberof NotebookStatus
     */
    memory_usage?: number;
    /**
     * memory allocated to notebook server in bytes
     * @type {number}
     * @memberof NotebookStatus
     */
    memory_limit?: number;
    /**
     * millicpu allocated to notebook server
     * @type {number}
     * @memberof NotebookStatus
     */
    cpu_count?: number;
}
/**
 * Organization
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * unique id of organization
     * @type {string}
     * @memberof Organization
     */
    id?: string;
    /**
     *
     * @type {OrganizationRoles}
     * @memberof Organization
     */
    role?: OrganizationRoles;
    /**
     * organization name must be unique
     * @type {string}
     * @memberof Organization
     */
    name: string;
    /**
     * Datetime organization was created in UTC
     * @type {string}
     * @memberof Organization
     */
    created_at?: string;
    /**
     * Datetime organization was updated in UTC
     * @type {string}
     * @memberof Organization
     */
    updated_at?: string;
    /**
     * Organization logo
     * @type {string}
     * @memberof Organization
     */
    logo?: string;
    /**
     * Organization description
     * @type {string}
     * @memberof Organization
     */
    description?: string;
    /**
     *
     * @type {Array<OrganizationUser>}
     * @memberof Organization
     */
    users?: Array<OrganizationUser>;
    /**
     * list of actions user is allowed to do on this organization
     * @type {Array<NamespaceActions>}
     * @memberof Organization
     */
    allowed_actions?: Array<NamespaceActions>;
    /**
     * number of registered arrays for this organization
     * @type {number}
     * @memberof Organization
     */
    num_of_arrays?: number;
    /**
     * List of extra/optional/beta features to enable for namespace
     * @type {Array<string>}
     * @memberof Organization
     */
    enabled_features?: Array<string>;
    /**
     * A notice that the user has an unpaid subscription
     * @type {boolean}
     * @memberof Organization
     */
    unpaid_subscription?: boolean;
    /**
     * default s3 path to store newly created notebooks
     * @type {string}
     * @memberof Organization
     */
    default_s3_path?: string;
    /**
     * Default s3 path credentials name is the credentials name to use along with default_s3_path
     * @type {string}
     * @memberof Organization
     */
    default_s3_path_credentials_name?: string;
    /**
     * Denotes that the organization is able to apply pricing to arrays by means of Stripe Connect
     * @type {boolean}
     * @memberof Organization
     */
    stripe_connect?: boolean;
}
/**
 * role user has in organization
 * @export
 * @enum {string}
 */
export declare enum OrganizationRoles {
    Owner = "owner",
    Admin = "admin",
    ReadWrite = "read_write",
    ReadOnly = "read_only"
}
/**
 * user in an organization
 * @export
 * @interface OrganizationUser
 */
export interface OrganizationUser {
    /**
     * unique id of user
     * @type {string}
     * @memberof OrganizationUser
     */
    user_id?: string;
    /**
     * unique id of organization
     * @type {string}
     * @memberof OrganizationUser
     */
    organization_id?: string;
    /**
     * username for user
     * @type {string}
     * @memberof OrganizationUser
     */
    username?: string;
    /**
     * name of organization
     * @type {string}
     * @memberof OrganizationUser
     */
    organization_name?: string;
    /**
     *
     * @type {OrganizationRoles}
     * @memberof OrganizationUser
     */
    role?: OrganizationRoles;
    /**
     * list of actions user is allowed to do on this organization
     * @type {Array<NamespaceActions>}
     * @memberof OrganizationUser
     */
    allowed_actions?: Array<NamespaceActions>;
}
/**
 *
 * @export
 * @interface PaginationMetadata
 */
export interface PaginationMetadata {
    /**
     * pagination offset
     * @type {number}
     * @memberof PaginationMetadata
     */
    page?: number;
    /**
     * pagination limit
     * @type {number}
     * @memberof PaginationMetadata
     */
    per_page?: number;
    /**
     * number of total pages with current limit
     * @type {number}
     * @memberof PaginationMetadata
     */
    total_pages?: number;
    /**
     * number of total available items
     * @type {number}
     * @memberof PaginationMetadata
     */
    total_items?: number;
}
/**
 * Pricing created by converting an array to product
 * @export
 * @interface Pricing
 */
export interface Pricing {
    /**
     * Unique id of plan as defined by Stripe
     * @type {string}
     * @memberof Pricing
     */
    id?: string;
    /**
     * Unique id of registered array
     * @type {string}
     * @memberof Pricing
     */
    array_uuid?: string;
    /**
     * Name of pricing
     * @type {string}
     * @memberof Pricing
     */
    pricing_name?: string;
    /**
     *
     * @type {PricingType}
     * @memberof Pricing
     */
    pricing_type?: PricingType;
    /**
     * Name of product
     * @type {string}
     * @memberof Pricing
     */
    product_name?: string;
    /**
     * Extra information about a product which will appear on the credit card statement of the customer
     * @type {string}
     * @memberof Pricing
     */
    product_statement_descriptor?: string;
    /**
     *
     * @type {PricingUnitLabel}
     * @memberof Pricing
     */
    product_unit_label?: PricingUnitLabel;
    /**
     *
     * @type {PricingCurrency}
     * @memberof Pricing
     */
    currency?: PricingCurrency;
    /**
     *
     * @type {PricingAggregateUsage}
     * @memberof Pricing
     */
    aggregate_usage?: PricingAggregateUsage;
    /**
     *
     * @type {PricingInterval}
     * @memberof Pricing
     */
    interval?: PricingInterval;
    /**
     * Group of n product unit labels
     * @type {number}
     * @memberof Pricing
     */
    divided_by?: number;
    /**
     * Price in cents (decimal) per unitlabel
     * @type {number}
     * @memberof Pricing
     */
    charge?: number;
    /**
     * If pricing is activated
     * @type {boolean}
     * @memberof Pricing
     */
    activated?: boolean;
}
/**
 * Specifies a usage aggregation strategy for pricings of usage_type=metered
 * @export
 * @enum {string}
 */
export declare enum PricingAggregateUsage {
    Sum = "sum"
}
/**
 * Currency of pricing
 * @export
 * @enum {string}
 */
export declare enum PricingCurrency {
    Usd = "USD"
}
/**
 * Interval for pricing
 * @export
 * @enum {string}
 */
export declare enum PricingInterval {
    Month = "month"
}
/**
 * Pricing types
 * @export
 * @enum {string}
 */
export declare enum PricingType {
    Egress = "egress",
    Access = "access"
}
/**
 * Unit label
 * @export
 * @enum {string}
 */
export declare enum PricingUnitLabel {
    Byte = "byte",
    Second = "second"
}
/**
 * Query parameter to get array metadatas
 * @export
 * @enum {string}
 */
export declare enum PublicShareFilter {
    Exclude = "exclude",
    Only = "only"
}
/**
 *
 * @export
 * @interface Query
 */
export interface Query {
    /**
     *
     * @type {Querytype}
     * @memberof Query
     */
    type: Querytype;
    /**
     *
     * @type {Layout}
     * @memberof Query
     */
    layout: Layout;
    /**
     *
     * @type {Querystatus}
     * @memberof Query
     */
    status: Querystatus;
    /**
     * List of attribute buffer headers
     * @type {Array<AttributeBufferHeader>}
     * @memberof Query
     */
    attributeBufferHeaders: Array<AttributeBufferHeader>;
    /**
     *
     * @type {Writer}
     * @memberof Query
     */
    writer?: Writer;
    /**
     *
     * @type {QueryReader}
     * @memberof Query
     */
    reader?: QueryReader;
    /**
     *
     * @type {any}
     * @memberof Query
     */
    array: any;
    /**
     * Total number of bytes in fixed size attribute buffers.
     * @type {number}
     * @memberof Query
     */
    totalFixedLengthBufferBytes: number;
    /**
     * Total number of bytes in variable size attribute buffers.
     * @type {number}
     * @memberof Query
     */
    totalVarLenBufferBytes: number;
}
/**
 * Query returning results as json
 * @export
 * @interface QueryJson
 */
export interface QueryJson {
    /**
     *
     * @type {QueryRanges}
     * @memberof QueryJson
     */
    query_ranges?: QueryRanges;
    /**
     * List of fields to return data from, empty means return data for all fields
     * @type {Array<string>}
     * @memberof QueryJson
     */
    fields?: Array<string>;
}
/**
 * Subarray bounds to query
 * @export
 * @interface QueryRanges
 */
export interface QueryRanges {
    /**
     *
     * @type {Layout}
     * @memberof QueryRanges
     */
    layout?: Layout;
    /**
     * List of ranges,
     * @type {Array<Array<number>>}
     * @memberof QueryRanges
     */
    ranges?: Array<Array<number>>;
}
/**
 * Read struct (can\'t be called reader due to class name conflict)
 * @export
 * @interface QueryReader
 */
export interface QueryReader {
    /**
     *
     * @type {Layout}
     * @memberof QueryReader
     */
    layout?: Layout;
    /**
     *
     * @type {Subarray}
     * @memberof QueryReader
     */
    subarray?: Subarray;
    /**
     *
     * @type {ReadState}
     * @memberof QueryReader
     */
    readState?: ReadState;
    /**
     * The offsets format (bytes or elements) to be used.
     * @type {string}
     * @memberof QueryReader
     */
    varOffsetsMode?: string;
    /**
     * True if an extra element will be added to the end of the offsets buffer.
     * @type {boolean}
     * @memberof QueryReader
     */
    varOffsetsAddExtraElement?: boolean;
    /**
     * The offsets bitsize (32 or 64) to be used.
     * @type {number}
     * @memberof QueryReader
     */
    varOffsetsBitsize?: number;
}
/**
 * Status of query
 * @export
 * @enum {string}
 */
export declare enum Querystatus {
    Failed = "FAILED",
    Completed = "COMPLETED",
    Inprogress = "INPROGRESS",
    Incomplete = "INCOMPLETE",
    Uninitialized = "UNINITIALIZED"
}
/**
 * Type of query
 * @export
 * @enum {string}
 */
export declare enum Querytype {
    Read = "READ",
    Write = "WRITE"
}
/**
 * state for reads
 * @export
 * @interface ReadState
 */
export interface ReadState {
    /**
     * True if the reader has been initialized.
     * @type {boolean}
     * @memberof ReadState
     */
    initialized?: boolean;
    /**
     * True if the query produced results that could not fit in some buffer.
     * @type {boolean}
     * @memberof ReadState
     */
    overflowed?: boolean;
    /**
     * True if the current subarray partition is unsplittable.
     * @type {boolean}
     * @memberof ReadState
     */
    unsplittable?: boolean;
    /**
     *
     * @type {SubarrayPartitioner}
     * @memberof ReadState
     */
    subarrayPartitioner?: SubarrayPartitioner;
}
/**
 * Results type
 * @export
 * @enum {string}
 */
export declare enum ResultFormat {
    Native = "native",
    Json = "json",
    Arrow = "arrow"
}
/**
 * Parameters for running sql query
 * @export
 * @interface SQLParameters
 */
export interface SQLParameters {
    /**
     * name of task, optional
     * @type {string}
     * @memberof SQLParameters
     */
    name?: string;
    /**
     * query to run
     * @type {string}
     * @memberof SQLParameters
     */
    query?: string;
    /**
     * Output array uri
     * @type {string}
     * @memberof SQLParameters
     */
    output_uri?: string;
    /**
     * store results for later retrieval
     * @type {boolean}
     * @memberof SQLParameters
     */
    store_results?: boolean;
    /**
     *
     * @type {ResultFormat}
     * @memberof SQLParameters
     */
    result_format?: ResultFormat;
    /**
     * string representing the serialization format to use, i.e. cloudpickle version or arrow IPC verisonn
     * @type {string}
     * @memberof SQLParameters
     */
    result_format_version?: string;
    /**
     * Queries or commands to run before main query
     * @type {Array<string>}
     * @memberof SQLParameters
     */
    init_commands?: Array<string>;
    /**
     * SQL query parameters
     * @type {Array<object>}
     * @memberof SQLParameters
     */
    parameters?: Array<object>;
}
/**
 * Single sign on provider
 * @export
 * @enum {string}
 */
export declare enum SSOProvider {
    Github = "github",
    Google = "google",
    Stripe = "stripe"
}
/**
 * A Subarray
 * @export
 * @interface Subarray
 */
export interface Subarray {
    /**
     *
     * @type {Layout}
     * @memberof Subarray
     */
    layout?: Layout;
    /**
     * List of 1D ranges, one per dimension
     * @type {Array<SubarrayRanges>}
     * @memberof Subarray
     */
    ranges?: Array<SubarrayRanges>;
}
/**
 * The subarray partitioner
 * @export
 * @interface SubarrayPartitioner
 */
export interface SubarrayPartitioner {
    /**
     *
     * @type {Subarray}
     * @memberof SubarrayPartitioner
     */
    subarray?: Subarray;
    /**
     * Result size budget (in bytes) for all attributes.
     * @type {Array<AttributeBufferSize>}
     * @memberof SubarrayPartitioner
     */
    budget?: Array<AttributeBufferSize>;
    /**
     *
     * @type {SubarrayPartitionerCurrent}
     * @memberof SubarrayPartitioner
     */
    current?: SubarrayPartitionerCurrent;
    /**
     *
     * @type {SubarrayPartitionerState}
     * @memberof SubarrayPartitioner
     */
    state?: SubarrayPartitionerState;
    /**
     * The memory budget for the fixed-sized attributes and the offsets of the var-sized attributes
     * @type {number}
     * @memberof SubarrayPartitioner
     */
    memoryBudget?: number;
    /**
     * The memory budget for the var-sized attributes
     * @type {number}
     * @memberof SubarrayPartitioner
     */
    memoryBudgetVar?: number;
}
/**
 * The current partition info
 * @export
 * @interface SubarrayPartitionerCurrent
 */
export interface SubarrayPartitionerCurrent {
    /**
     *
     * @type {Subarray}
     * @memberof SubarrayPartitionerCurrent
     */
    subarray?: Subarray;
    /**
     * PartitionInfo start
     * @type {number}
     * @memberof SubarrayPartitionerCurrent
     */
    start?: number;
    /**
     * PartitionInfo end
     * @type {number}
     * @memberof SubarrayPartitionerCurrent
     */
    end?: number;
    /**
     * PartitionInfo splitMultiRange
     * @type {boolean}
     * @memberof SubarrayPartitionerCurrent
     */
    splitMultiRange?: boolean;
}
/**
 * The state information for the remaining partitions to be produced
 * @export
 * @interface SubarrayPartitionerState
 */
export interface SubarrayPartitionerState {
    /**
     * State start
     * @type {number}
     * @memberof SubarrayPartitionerState
     */
    start?: number;
    /**
     * State end
     * @type {number}
     * @memberof SubarrayPartitionerState
     */
    end?: number;
    /**
     * State singleRange
     * @type {Array<Subarray>}
     * @memberof SubarrayPartitionerState
     */
    singleRange?: Array<Subarray>;
    /**
     * State multiRange
     * @type {Array<Subarray>}
     * @memberof SubarrayPartitionerState
     */
    multiRange?: Array<Subarray>;
}
/**
 * A set of 1D ranges for a subarray
 * @export
 * @interface SubarrayRanges
 */
export interface SubarrayRanges {
    /**
     *
     * @type {Datatype}
     * @memberof SubarrayRanges
     */
    type?: Datatype;
    /**
     * True if the range is the default range
     * @type {boolean}
     * @memberof SubarrayRanges
     */
    hasDefaultRange?: boolean;
    /**
     * The bytes of the ranges
     * @type {Array<number>}
     * @memberof SubarrayRanges
     */
    buffer?: Array<number>;
}
/**
 * Subscription of a user (customer) to another user\'s arrays
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * Unique id of subscription as defined by Stripe
     * @type {string}
     * @memberof Subscription
     */
    id?: string;
    /**
     * Unique id of the array (product) owner
     * @type {string}
     * @memberof Subscription
     */
    owner_namespace_uuid?: string;
    /**
     * Unique id of the array (product) user (customer)
     * @type {string}
     * @memberof Subscription
     */
    customer_namespace_uuid?: string;
    /**
     * list of pricing used by this subscription
     * @type {Array<Pricing>}
     * @memberof Subscription
     */
    pricing?: Array<Pricing>;
}
/**
 * user\'s TileDB config
 * @export
 * @interface TileDBConfig
 */
export interface TileDBConfig {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof TileDBConfig
     */
    configs?: {
        [key: string]: string;
    };
}
/**
 * A api token and its metadata
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * A api token
     * @type {string}
     * @memberof Token
     */
    token?: string;
    /**
     * Name of token to revoke
     * @type {string}
     * @memberof Token
     */
    name?: string;
    /**
     * datetime the token was created at
     * @type {string}
     * @memberof Token
     */
    issued_at?: string;
    /**
     * datetime the token when token will expire
     * @type {string}
     * @memberof Token
     */
    expires_at?: string;
    /**
     * Optional scope to limit token, defaults to all permissions, current supported values are password_reset or *
     * @type {string}
     * @memberof Token
     */
    scope?: string;
}
/**
 * A request from a user for an api token
 * @export
 * @interface TokenRequest
 */
export interface TokenRequest {
    /**
     * Expiration date for token, if empty token defaults to 30 minutes
     * @type {string}
     * @memberof TokenRequest
     */
    expires?: string;
    /**
     * Optional name for token, if the name already exists for the user it will be auto incremented (i.e. myToken-1)
     * @type {string}
     * @memberof TokenRequest
     */
    name?: string;
    /**
     * Optional scope to limit token, defaults to all permissions, current supported values are password_reset or *
     * @type {string}
     * @memberof TokenRequest
     */
    scope?: string;
}
/**
 * actions a user can take on an udf
 * @export
 * @enum {string}
 */
export declare enum UDFActions {
    FetchUdf = "fetch_udf",
    ShareUdf = "share_udf"
}
/**
 * Contains array details for multi-array query including uri, ranges buffers
 * @export
 * @interface UDFArrayDetails
 */
export interface UDFArrayDetails {
    /**
     * array to set ranges and buffers on, must be in tiledb:// format
     * @type {string}
     * @memberof UDFArrayDetails
     */
    uri?: string;
    /**
     *
     * @type {QueryRanges}
     * @memberof UDFArrayDetails
     */
    ranges?: QueryRanges;
    /**
     * List of buffers to fetch (attributes + dimensions)
     * @type {Array<string>}
     * @memberof UDFArrayDetails
     */
    buffers?: Array<string>;
}
/**
 * Defines a set of images related to a specific name
 * @export
 * @interface UDFImage
 */
export interface UDFImage {
    /**
     * Unique id of set of images
     * @type {string}
     * @memberof UDFImage
     */
    id?: string;
    /**
     * name of udf
     * @type {string}
     * @memberof UDFImage
     */
    name?: string;
    /**
     *
     * @type {UDFLanguage}
     * @memberof UDFImage
     */
    language?: UDFLanguage;
}
/**
 * Defines an image that belongs to a set of images having a version
 * @export
 * @interface UDFImageVersion
 */
export interface UDFImageVersion {
    /**
     * Unique id of a versioned image
     * @type {string}
     * @memberof UDFImageVersion
     */
    id?: string;
    /**
     * name of UDFImageVersion
     * @type {string}
     * @memberof UDFImageVersion
     */
    name?: string;
    /**
     * Unique id of the udf image set
     * @type {string}
     * @memberof UDFImageVersion
     */
    udf_image_uuid?: string;
    /**
     * Uri of docker image related to current entry
     * @type {string}
     * @memberof UDFImageVersion
     */
    docker_image?: string;
    /**
     * Image-specific version
     * @type {number}
     * @memberof UDFImageVersion
     */
    version?: number;
    /**
     * If current image is default version
     * @type {boolean}
     * @memberof UDFImageVersion
     */
    default?: boolean;
    /**
     * If current image is latest version
     * @type {boolean}
     * @memberof UDFImageVersion
     */
    latest?: boolean;
}
/**
 * User-defined function that can persist in db, used and shared multiple times
 * @export
 * @interface UDFInfo
 */
export interface UDFInfo {
    /**
     * Unique id of udf
     * @type {string}
     * @memberof UDFInfo
     */
    id?: string;
    /**
     * name of udf
     * @type {string}
     * @memberof UDFInfo
     */
    name?: string;
    /**
     *
     * @type {UDFLanguage}
     * @memberof UDFInfo
     */
    language?: UDFLanguage;
    /**
     *
     * @type {UDFType}
     * @memberof UDFInfo
     */
    type?: UDFType;
    /**
     * Markdown readme of udfs
     * @type {string}
     * @memberof UDFInfo
     */
    readme?: string;
    /**
     * License identifier from SPDX License List or Custom
     * @type {string}
     * @memberof UDFInfo
     */
    license_id?: string;
    /**
     * License text
     * @type {string}
     * @memberof UDFInfo
     */
    license_text?: string;
    /**
     * optional tags for udf
     * @type {Array<string>}
     * @memberof UDFInfo
     */
    tags?: Array<string>;
}
/**
 * User-defined function that can persist in db, used and shared multiple times
 * @export
 * @interface UDFInfoUpdate
 */
export interface UDFInfoUpdate {
    /**
     * name of udf
     * @type {string}
     * @memberof UDFInfoUpdate
     */
    name?: string;
    /**
     *
     * @type {UDFLanguage}
     * @memberof UDFInfoUpdate
     */
    language?: UDFLanguage;
    /**
     * Type-specific version
     * @type {string}
     * @memberof UDFInfoUpdate
     */
    version?: string;
    /**
     * Docker image name to use for udf
     * @type {string}
     * @memberof UDFInfoUpdate
     */
    image_name?: string;
    /**
     *
     * @type {UDFType}
     * @memberof UDFInfoUpdate
     */
    type?: UDFType;
    /**
     * Type-specific executable text
     * @type {string}
     * @memberof UDFInfoUpdate
     */
    exec?: string;
    /**
     * optional raw text to store of serialized function, used for showing in UI
     * @type {string}
     * @memberof UDFInfoUpdate
     */
    exec_raw?: string;
    /**
     * Markdown readme of udfs
     * @type {string}
     * @memberof UDFInfoUpdate
     */
    readme?: string;
    /**
     * License identifier from SPDX License List or Custom
     * @type {string}
     * @memberof UDFInfoUpdate
     */
    license_id?: string;
    /**
     * License text
     * @type {string}
     * @memberof UDFInfoUpdate
     */
    license_text?: string;
    /**
     * optional tags for udf
     * @type {Array<string>}
     * @memberof UDFInfoUpdate
     */
    tags?: Array<string>;
}
/**
 * UDF Type
 * @export
 * @enum {string}
 */
export declare enum UDFLanguage {
    Python = "python",
    R = "r"
}
/**
 * details for sharing a given udf
 * @export
 * @interface UDFSharing
 */
export interface UDFSharing {
    /**
     * List of permitted actions
     * @type {Array<UDFActions>}
     * @memberof UDFSharing
     */
    actions?: Array<UDFActions>;
    /**
     * namespace being granted array access can be a user or organization
     * @type {string}
     * @memberof UDFSharing
     */
    namespace?: string;
    /**
     * details on if the namespace is a organization or user
     * @type {string}
     * @memberof UDFSharing
     */
    namespace_type?: string;
}
/**
 * Subarray bounds to query for a UDF to operate on
 * @export
 * @interface UDFSubarray
 */
export interface UDFSubarray {
    /**
     *
     * @type {Layout}
     * @memberof UDFSubarray
     */
    layout?: Layout;
    /**
     * List of ranges,
     * @type {Array<UDFSubarrayRange>}
     * @memberof UDFSubarray
     */
    ranges?: Array<UDFSubarrayRange>;
}
/**
 * A dimension range to query
 * @export
 * @interface UDFSubarrayRange
 */
export interface UDFSubarrayRange {
    /**
     * The dimension index
     * @type {number}
     * @memberof UDFSubarrayRange
     */
    dimension_id?: number;
    /**
     *
     * @type {DimensionCoordinate}
     * @memberof UDFSubarrayRange
     */
    range_start?: DimensionCoordinate;
    /**
     *
     * @type {DimensionCoordinate}
     * @memberof UDFSubarrayRange
     */
    range_end?: DimensionCoordinate;
}
/**
 * UDF Type
 * @export
 * @enum {string}
 */
export declare enum UDFType {
    SingleArray = "single_array",
    Generic = "generic"
}
/**
 * User
 * @export
 * @interface User
 */
export interface User {
    /**
     * unique id of user
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * username must be unique
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * password
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * the user\'s full, real name
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * the user\'s email
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * user\'s email is validated to be correct
     * @type {boolean}
     * @memberof User
     */
    is_valid_email?: boolean;
    /**
     * Denotes that the user is able to apply pricing to arrays by means of Stripe Connect
     * @type {boolean}
     * @memberof User
     */
    stripe_connect?: boolean;
    /**
     * the user\'s company
     * @type {string}
     * @memberof User
     */
    company?: string;
    /**
     * the user\'s logo
     * @type {string}
     * @memberof User
     */
    logo?: string;
    /**
     * when the user last logged in (set by the server)
     * @type {string}
     * @memberof User
     */
    last_activity_date?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    timezone?: string;
    /**
     * Array of organizations a user is part of and their roles
     * @type {Array<OrganizationUser>}
     * @memberof User
     */
    organizations?: Array<OrganizationUser>;
    /**
     * list of actions user is allowed to do on this organization
     * @type {Array<NamespaceActions>}
     * @memberof User
     */
    allowed_actions?: Array<NamespaceActions>;
    /**
     * List of extra/optional/beta features to enable for namespace
     * @type {Array<string>}
     * @memberof User
     */
    enabled_features?: Array<string>;
    /**
     * A notice that the user has an unpaid subscription
     * @type {boolean}
     * @memberof User
     */
    unpaid_subscription?: boolean;
    /**
     * default s3 path to store newly created notebooks
     * @type {string}
     * @memberof User
     */
    default_s3_path?: string;
    /**
     * Default s3 path credentials name is the credentials name to use along with default_s3_path
     * @type {string}
     * @memberof User
     */
    default_s3_path_credentials_name?: string;
    /**
     * Override the default namespace charged for actions when no namespace is specified
     * @type {string}
     * @memberof User
     */
    default_namespace_charged?: string;
}
/**
 *
 * @export
 * @interface Writer
 */
export interface Writer {
    /**
     *
     * @type {boolean}
     * @memberof Writer
     */
    checkCoordDups?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Writer
     */
    checkCoordOOB?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Writer
     */
    dedupCoords?: boolean;
    /**
     *
     * @type {DomainArray}
     * @memberof Writer
     */
    subarray?: DomainArray;
}
/**
 * ArrayApi - axios parameter creator
 * @export
 */
export declare const ArrayApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * get array activity logs
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [start] Start time of window of fetch logs, unix epoch in seconds (default: seven days ago)
     * @param {number} [end] End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp)
     * @param {string} [eventTypes] Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated
     * @param {string} [taskId] Array task id To filter activity to
     * @param {boolean} [hasTaskId] Excludes activity log results that does not contain an array task uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arrayActivityLog: (namespace: string, array: string, start?: number, end?: number, eventTypes?: string, taskId?: string, hasTaskId?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a list of all arrays that are owned directly by user or user\'s organizations
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserOwnedGet: (page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a sidebar for arrays that are owned directly by user or user\'s organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserOwnedSidebarGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a list of all arrays that have been shared publically
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserPublicGet: (page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a sidebar of all arrays that have been shared publically
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserPublicSidebarGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a list of all arrays that have been shared with the user
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserSharedGet: (page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a list of all arrays that have been shared with the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserSharedSidebarGet: (options?: any) => Promise<RequestArgs>;
    /**
     * consolidate an array at a specified URI
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {TileDBConfig} tiledbConfig tiledb configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consolidateArray: (namespace: string, array: string, tiledbConfig: TileDBConfig, options?: any) => Promise<RequestArgs>;
    /**
     * create a array schema at a specified URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {ArraySchema} arraySchema ArraySchema being created
     * @param {string} [xTILEDBCLOUDACCESSCREDENTIALSNAME] Optional registered access credentials to use for creation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArray: (namespace: string, array: string, contentType: string, arraySchema: ArraySchema, xTILEDBCLOUDACCESSCREDENTIALSNAME?: string, options?: any) => Promise<RequestArgs>;
    /**
     * delete a array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArray: (namespace: string, array: string, contentType: string, options?: any) => Promise<RequestArgs>;
    /**
     * deregister a array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deregisterArray: (namespace: string, array: string, options?: any) => Promise<RequestArgs>;
    /**
     * get all array metadata user has access to
     * @param {string} [publicShare] Public share values can be one of exclude, only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllArrayMetadata: (publicShare?: string, options?: any) => Promise<RequestArgs>;
    /**
     * get an ArraySchema using a url encoded uri
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArray: (namespace: string, array: string, contentType: string, options?: any) => Promise<RequestArgs>;
    /**
     * get the max buffer sizes of an array for a subarray
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} subarray CSV string of subarray to get max buffer sizes for
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMaxBufferSizes: (namespace: string, array: string, subarray: string, contentType: string, xPayer?: string, options?: any) => Promise<RequestArgs>;
    /**
     * get metadata from the array in json format
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [length] (optional) limit character length of returned values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetaDataJson: (namespace: string, array: string, length?: number, options?: any) => Promise<RequestArgs>;
    /**
     * get metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetadata: (namespace: string, array: string, options?: any) => Promise<RequestArgs>;
    /**
     * get metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetadataCap: (namespace: string, array: string, options?: any) => Promise<RequestArgs>;
    /**
     * get the non empty domain of an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayNonEmptyDomain: (namespace: string, array: string, contentType: string, xPayer?: string, options?: any) => Promise<RequestArgs>;
    /**
     * get non-empty domain from the array in json format
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayNonEmptyDomainJson: (namespace: string, array: string, options?: any) => Promise<RequestArgs>;
    /**
     * get an sample set of data from the array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [samples] Number of sample results to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraySampleData: (namespace: string, array: string, samples?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Get all sharing details of the array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraySharingPolicies: (namespace: string, array: string, options?: any) => Promise<RequestArgs>;
    /**
     * get metadata on all arrays in a namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraysInNamespace: (namespace: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastAccessedArrays: (options?: any) => Promise<RequestArgs>;
    /**
     * register an array at a specified URI registered to the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayInfoUpdate} arrayMetadata metadata associated with array
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerArray: (namespace: string, array: string, arrayMetadata: ArrayInfoUpdate, options?: any) => Promise<RequestArgs>;
    /**
     * Share an array with a user
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArraySharing} arraySharing Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareArray: (namespace: string, array: string, arraySharing: ArraySharing, options?: any) => Promise<RequestArgs>;
    /**
     * update metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayInfoUpdate} arrayMetadata array metadata to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArrayMetadata: (namespace: string, array: string, arrayMetadata: ArrayInfoUpdate, options?: any) => Promise<RequestArgs>;
    /**
     * update metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayMetadata} arrayMetadataEntries List of metadata entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArrayMetadataCap: (namespace: string, array: string, arrayMetadataEntries: ArrayMetadata, options?: any) => Promise<RequestArgs>;
    /**
     * vacuum an array at a specified URI
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {TileDBConfig} tiledbConfig tiledb configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacuumArray: (namespace: string, array: string, tiledbConfig: TileDBConfig, options?: any) => Promise<RequestArgs>;
};
/**
 * ArrayApi - functional programming interface
 * @export
 */
export declare const ArrayApiFp: (configuration?: Configuration) => {
    /**
     * get array activity logs
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [start] Start time of window of fetch logs, unix epoch in seconds (default: seven days ago)
     * @param {number} [end] End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp)
     * @param {string} [eventTypes] Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated
     * @param {string} [taskId] Array task id To filter activity to
     * @param {boolean} [hasTaskId] Excludes activity log results that does not contain an array task uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arrayActivityLog(namespace: string, array: string, start?: number, end?: number, eventTypes?: string, taskId?: string, hasTaskId?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArrayActivityLog>>>;
    /**
     * Fetch a list of all arrays that are owned directly by user or user\'s organizations
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserOwnedGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayBrowserData>>;
    /**
     * Fetch a sidebar for arrays that are owned directly by user or user\'s organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserOwnedSidebarGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayBrowserSidebar>>;
    /**
     * Fetch a list of all arrays that have been shared publically
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserPublicGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayBrowserData>>;
    /**
     * Fetch a sidebar of all arrays that have been shared publically
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserPublicSidebarGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayBrowserSidebar>>;
    /**
     * Fetch a list of all arrays that have been shared with the user
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserSharedGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayBrowserData>>;
    /**
     * Fetch a list of all arrays that have been shared with the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserSharedSidebarGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayBrowserSidebar>>;
    /**
     * consolidate an array at a specified URI
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {TileDBConfig} tiledbConfig tiledb configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consolidateArray(namespace: string, array: string, tiledbConfig: TileDBConfig, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * create a array schema at a specified URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {ArraySchema} arraySchema ArraySchema being created
     * @param {string} [xTILEDBCLOUDACCESSCREDENTIALSNAME] Optional registered access credentials to use for creation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArray(namespace: string, array: string, contentType: string, arraySchema: ArraySchema, xTILEDBCLOUDACCESSCREDENTIALSNAME?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * delete a array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArray(namespace: string, array: string, contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * deregister a array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deregisterArray(namespace: string, array: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * get all array metadata user has access to
     * @param {string} [publicShare] Public share values can be one of exclude, only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllArrayMetadata(publicShare?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArrayInfo>>>;
    /**
     * get an ArraySchema using a url encoded uri
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArray(namespace: string, array: string, contentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArraySchema>>;
    /**
     * get the max buffer sizes of an array for a subarray
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} subarray CSV string of subarray to get max buffer sizes for
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMaxBufferSizes(namespace: string, array: string, subarray: string, contentType: string, xPayer?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaxBufferSizes>>;
    /**
     * get metadata from the array in json format
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [length] (optional) limit character length of returned values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetaDataJson(namespace: string, array: string, length?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * get metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetadata(namespace: string, array: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayInfo>>;
    /**
     * get metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetadataCap(namespace: string, array: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayMetadata>>;
    /**
     * get the non empty domain of an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayNonEmptyDomain(namespace: string, array: string, contentType: string, xPayer?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmptyDomain>>;
    /**
     * get non-empty domain from the array in json format
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayNonEmptyDomainJson(namespace: string, array: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * get an sample set of data from the array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [samples] Number of sample results to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraySampleData(namespace: string, array: string, samples?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArraySample>>;
    /**
     * Get all sharing details of the array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraySharingPolicies(namespace: string, array: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArraySharing>>>;
    /**
     * get metadata on all arrays in a namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraysInNamespace(namespace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArrayInfo>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastAccessedArrays(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LastAccessedArray>>>;
    /**
     * register an array at a specified URI registered to the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayInfoUpdate} arrayMetadata metadata associated with array
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerArray(namespace: string, array: string, arrayMetadata: ArrayInfoUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Share an array with a user
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArraySharing} arraySharing Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareArray(namespace: string, array: string, arraySharing: ArraySharing, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * update metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayInfoUpdate} arrayMetadata array metadata to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArrayMetadata(namespace: string, array: string, arrayMetadata: ArrayInfoUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * update metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayMetadata} arrayMetadataEntries List of metadata entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArrayMetadataCap(namespace: string, array: string, arrayMetadataEntries: ArrayMetadata, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * vacuum an array at a specified URI
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {TileDBConfig} tiledbConfig tiledb configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacuumArray(namespace: string, array: string, tiledbConfig: TileDBConfig, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ArrayApi - factory interface
 * @export
 */
export declare const ArrayApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * get array activity logs
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [start] Start time of window of fetch logs, unix epoch in seconds (default: seven days ago)
     * @param {number} [end] End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp)
     * @param {string} [eventTypes] Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated
     * @param {string} [taskId] Array task id To filter activity to
     * @param {boolean} [hasTaskId] Excludes activity log results that does not contain an array task uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arrayActivityLog(namespace: string, array: string, start?: number, end?: number, eventTypes?: string, taskId?: string, hasTaskId?: boolean, options?: any): AxiosPromise<Array<ArrayActivityLog>>;
    /**
     * Fetch a list of all arrays that are owned directly by user or user\'s organizations
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserOwnedGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): AxiosPromise<ArrayBrowserData>;
    /**
     * Fetch a sidebar for arrays that are owned directly by user or user\'s organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserOwnedSidebarGet(options?: any): AxiosPromise<ArrayBrowserSidebar>;
    /**
     * Fetch a list of all arrays that have been shared publically
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserPublicGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): AxiosPromise<ArrayBrowserData>;
    /**
     * Fetch a sidebar of all arrays that have been shared publically
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserPublicSidebarGet(options?: any): AxiosPromise<ArrayBrowserSidebar>;
    /**
     * Fetch a list of all arrays that have been shared with the user
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserSharedGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): AxiosPromise<ArrayBrowserData>;
    /**
     * Fetch a list of all arrays that have been shared with the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arraysBrowserSharedSidebarGet(options?: any): AxiosPromise<ArrayBrowserSidebar>;
    /**
     * consolidate an array at a specified URI
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {TileDBConfig} tiledbConfig tiledb configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consolidateArray(namespace: string, array: string, tiledbConfig: TileDBConfig, options?: any): AxiosPromise<void>;
    /**
     * create a array schema at a specified URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {ArraySchema} arraySchema ArraySchema being created
     * @param {string} [xTILEDBCLOUDACCESSCREDENTIALSNAME] Optional registered access credentials to use for creation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArray(namespace: string, array: string, contentType: string, arraySchema: ArraySchema, xTILEDBCLOUDACCESSCREDENTIALSNAME?: string, options?: any): AxiosPromise<void>;
    /**
     * delete a array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArray(namespace: string, array: string, contentType: string, options?: any): AxiosPromise<void>;
    /**
     * deregister a array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deregisterArray(namespace: string, array: string, options?: any): AxiosPromise<void>;
    /**
     * get all array metadata user has access to
     * @param {string} [publicShare] Public share values can be one of exclude, only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllArrayMetadata(publicShare?: string, options?: any): AxiosPromise<Array<ArrayInfo>>;
    /**
     * get an ArraySchema using a url encoded uri
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArray(namespace: string, array: string, contentType: string, options?: any): AxiosPromise<ArraySchema>;
    /**
     * get the max buffer sizes of an array for a subarray
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} subarray CSV string of subarray to get max buffer sizes for
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMaxBufferSizes(namespace: string, array: string, subarray: string, contentType: string, xPayer?: string, options?: any): AxiosPromise<MaxBufferSizes>;
    /**
     * get metadata from the array in json format
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [length] (optional) limit character length of returned values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetaDataJson(namespace: string, array: string, length?: number, options?: any): AxiosPromise<object>;
    /**
     * get metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetadata(namespace: string, array: string, options?: any): AxiosPromise<ArrayInfo>;
    /**
     * get metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayMetadataCap(namespace: string, array: string, options?: any): AxiosPromise<ArrayMetadata>;
    /**
     * get the non empty domain of an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayNonEmptyDomain(namespace: string, array: string, contentType: string, xPayer?: string, options?: any): AxiosPromise<NonEmptyDomain>;
    /**
     * get non-empty domain from the array in json format
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayNonEmptyDomainJson(namespace: string, array: string, options?: any): AxiosPromise<object>;
    /**
     * get an sample set of data from the array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [samples] Number of sample results to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraySampleData(namespace: string, array: string, samples?: number, options?: any): AxiosPromise<ArraySample>;
    /**
     * Get all sharing details of the array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraySharingPolicies(namespace: string, array: string, options?: any): AxiosPromise<Array<ArraySharing>>;
    /**
     * get metadata on all arrays in a namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArraysInNamespace(namespace: string, options?: any): AxiosPromise<Array<ArrayInfo>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastAccessedArrays(options?: any): AxiosPromise<Array<LastAccessedArray>>;
    /**
     * register an array at a specified URI registered to the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayInfoUpdate} arrayMetadata metadata associated with array
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerArray(namespace: string, array: string, arrayMetadata: ArrayInfoUpdate, options?: any): AxiosPromise<void>;
    /**
     * Share an array with a user
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArraySharing} arraySharing Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareArray(namespace: string, array: string, arraySharing: ArraySharing, options?: any): AxiosPromise<void>;
    /**
     * update metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayInfoUpdate} arrayMetadata array metadata to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArrayMetadata(namespace: string, array: string, arrayMetadata: ArrayInfoUpdate, options?: any): AxiosPromise<void>;
    /**
     * update metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayMetadata} arrayMetadataEntries List of metadata entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArrayMetadataCap(namespace: string, array: string, arrayMetadataEntries: ArrayMetadata, options?: any): AxiosPromise<void>;
    /**
     * vacuum an array at a specified URI
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {TileDBConfig} tiledbConfig tiledb configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacuumArray(namespace: string, array: string, tiledbConfig: TileDBConfig, options?: any): AxiosPromise<void>;
};
/**
 * ArrayApi - object-oriented interface
 * @export
 * @class ArrayApi
 * @extends {BaseAPI}
 */
export declare class ArrayApi extends BaseAPI {
    /**
     * get array activity logs
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [start] Start time of window of fetch logs, unix epoch in seconds (default: seven days ago)
     * @param {number} [end] End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp)
     * @param {string} [eventTypes] Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated
     * @param {string} [taskId] Array task id To filter activity to
     * @param {boolean} [hasTaskId] Excludes activity log results that does not contain an array task uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    arrayActivityLog(namespace: string, array: string, start?: number, end?: number, eventTypes?: string, taskId?: string, hasTaskId?: boolean, options?: any): Promise<import("axios").AxiosResponse<ArrayActivityLog[]>>;
    /**
     * Fetch a list of all arrays that are owned directly by user or user\'s organizations
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    arraysBrowserOwnedGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): Promise<import("axios").AxiosResponse<ArrayBrowserData>>;
    /**
     * Fetch a sidebar for arrays that are owned directly by user or user\'s organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    arraysBrowserOwnedSidebarGet(options?: any): Promise<import("axios").AxiosResponse<ArrayBrowserSidebar>>;
    /**
     * Fetch a list of all arrays that have been shared publically
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    arraysBrowserPublicGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): Promise<import("axios").AxiosResponse<ArrayBrowserData>>;
    /**
     * Fetch a sidebar of all arrays that have been shared publically
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    arraysBrowserPublicSidebarGet(options?: any): Promise<import("axios").AxiosResponse<ArrayBrowserSidebar>>;
    /**
     * Fetch a list of all arrays that have been shared with the user
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [namespace] namespace
     * @param {string} [orderby] sort by which field valid values include last_accessed, size, name
     * @param {string} [permissions] permissions valid values include read, read_write, write, admin
     * @param {Array<string>} [tag] tag to search for, more than one can be included
     * @param {Array<string>} [excludeTag] tags to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] file_type to search for, more than one can be included
     * @param {Array<string>} [excludeFileType] file_type to exclude matching array in results, more than one can be included
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    arraysBrowserSharedGet(page?: number, perPage?: number, search?: string, namespace?: string, orderby?: string, permissions?: string, tag?: Array<string>, excludeTag?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, options?: any): Promise<import("axios").AxiosResponse<ArrayBrowserData>>;
    /**
     * Fetch a list of all arrays that have been shared with the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    arraysBrowserSharedSidebarGet(options?: any): Promise<import("axios").AxiosResponse<ArrayBrowserSidebar>>;
    /**
     * consolidate an array at a specified URI
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {TileDBConfig} tiledbConfig tiledb configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    consolidateArray(namespace: string, array: string, tiledbConfig: TileDBConfig, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * create a array schema at a specified URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {ArraySchema} arraySchema ArraySchema being created
     * @param {string} [xTILEDBCLOUDACCESSCREDENTIALSNAME] Optional registered access credentials to use for creation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    createArray(namespace: string, array: string, contentType: string, arraySchema: ArraySchema, xTILEDBCLOUDACCESSCREDENTIALSNAME?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * delete a array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    deleteArray(namespace: string, array: string, contentType: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * deregister a array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    deregisterArray(namespace: string, array: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * get all array metadata user has access to
     * @param {string} [publicShare] Public share values can be one of exclude, only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getAllArrayMetadata(publicShare?: string, options?: any): Promise<import("axios").AxiosResponse<ArrayInfo[]>>;
    /**
     * get an ArraySchema using a url encoded uri
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArray(namespace: string, array: string, contentType: string, options?: any): Promise<import("axios").AxiosResponse<ArraySchema>>;
    /**
     * get the max buffer sizes of an array for a subarray
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} subarray CSV string of subarray to get max buffer sizes for
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArrayMaxBufferSizes(namespace: string, array: string, subarray: string, contentType: string, xPayer?: string, options?: any): Promise<import("axios").AxiosResponse<MaxBufferSizes>>;
    /**
     * get metadata from the array in json format
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [length] (optional) limit character length of returned values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArrayMetaDataJson(namespace: string, array: string, length?: number, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * get metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArrayMetadata(namespace: string, array: string, options?: any): Promise<import("axios").AxiosResponse<ArrayInfo>>;
    /**
     * get metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArrayMetadataCap(namespace: string, array: string, options?: any): Promise<import("axios").AxiosResponse<ArrayMetadata>>;
    /**
     * get the non empty domain of an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArrayNonEmptyDomain(namespace: string, array: string, contentType: string, xPayer?: string, options?: any): Promise<import("axios").AxiosResponse<NonEmptyDomain>>;
    /**
     * get non-empty domain from the array in json format
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArrayNonEmptyDomainJson(namespace: string, array: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * get an sample set of data from the array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {number} [samples] Number of sample results to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArraySampleData(namespace: string, array: string, samples?: number, options?: any): Promise<import("axios").AxiosResponse<ArraySample>>;
    /**
     * Get all sharing details of the array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArraySharingPolicies(namespace: string, array: string, options?: any): Promise<import("axios").AxiosResponse<ArraySharing[]>>;
    /**
     * get metadata on all arrays in a namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getArraysInNamespace(namespace: string, options?: any): Promise<import("axios").AxiosResponse<ArrayInfo[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    getLastAccessedArrays(options?: any): Promise<import("axios").AxiosResponse<LastAccessedArray[]>>;
    /**
     * register an array at a specified URI registered to the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayInfoUpdate} arrayMetadata metadata associated with array
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    registerArray(namespace: string, array: string, arrayMetadata: ArrayInfoUpdate, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Share an array with a user
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArraySharing} arraySharing Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    shareArray(namespace: string, array: string, arraySharing: ArraySharing, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * update metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayInfoUpdate} arrayMetadata array metadata to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    updateArrayMetadata(namespace: string, array: string, arrayMetadata: ArrayInfoUpdate, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * update metadata on an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {ArrayMetadata} arrayMetadataEntries List of metadata entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    updateArrayMetadataCap(namespace: string, array: string, arrayMetadataEntries: ArrayMetadata, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * vacuum an array at a specified URI
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {TileDBConfig} tiledbConfig tiledb configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayApi
     */
    vacuumArray(namespace: string, array: string, tiledbConfig: TileDBConfig, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * ArrayTasksApi - axios parameter creator
 * @export
 */
export declare const ArrayTasksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {number} [start] Fetch tasks created after this time, unix epoch in seconds, default 7 days ago
     * @param {number} [end] Fetch tasks created before this time, unix epoch in seconds, default now
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayTasksSidebar: (start?: number, end?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * ArrayTasksApi - functional programming interface
 * @export
 */
export declare const ArrayTasksApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {number} [start] Fetch tasks created after this time, unix epoch in seconds, default 7 days ago
     * @param {number} [end] Fetch tasks created before this time, unix epoch in seconds, default now
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayTasksSidebar(start?: number, end?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayTaskBrowserSidebar>>;
};
/**
 * ArrayTasksApi - factory interface
 * @export
 */
export declare const ArrayTasksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {number} [start] Fetch tasks created after this time, unix epoch in seconds, default 7 days ago
     * @param {number} [end] Fetch tasks created before this time, unix epoch in seconds, default now
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArrayTasksSidebar(start?: number, end?: number, options?: any): AxiosPromise<ArrayTaskBrowserSidebar>;
};
/**
 * ArrayTasksApi - object-oriented interface
 * @export
 * @class ArrayTasksApi
 * @extends {BaseAPI}
 */
export declare class ArrayTasksApi extends BaseAPI {
    /**
     *
     * @param {number} [start] Fetch tasks created after this time, unix epoch in seconds, default 7 days ago
     * @param {number} [end] Fetch tasks created before this time, unix epoch in seconds, default now
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArrayTasksApi
     */
    getArrayTasksSidebar(start?: number, end?: number, options?: any): Promise<import("axios").AxiosResponse<ArrayTaskBrowserSidebar>>;
}
/**
 * FavoritesApi - axios parameter creator
 * @export
 */
export declare const FavoritesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete specific favorite
     * @param {string} id The uuid of the favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFavoriteId: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch specific favorite of a user
     * @param {string} id The uuid of the favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavorite: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch all favorites of connected user
     * @param {string} [type] The type of the desired favorites e.g. arrays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavorites: (type?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Add a new favorite
     * @param {FavoriteUpdate} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFavorite: (body?: FavoriteUpdate, options?: any) => Promise<RequestArgs>;
};
/**
 * FavoritesApi - functional programming interface
 * @export
 */
export declare const FavoritesApiFp: (configuration?: Configuration) => {
    /**
     * Delete specific favorite
     * @param {string} id The uuid of the favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFavoriteId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Fetch specific favorite of a user
     * @param {string} id The uuid of the favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavorite(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Favorite>>;
    /**
     * Fetch all favorites of connected user
     * @param {string} [type] The type of the desired favorites e.g. arrays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavorites(type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Favorite>>>;
    /**
     * Add a new favorite
     * @param {FavoriteUpdate} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFavorite(body?: FavoriteUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * FavoritesApi - factory interface
 * @export
 */
export declare const FavoritesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete specific favorite
     * @param {string} id The uuid of the favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFavoriteId(id: string, options?: any): AxiosPromise<void>;
    /**
     * Fetch specific favorite of a user
     * @param {string} id The uuid of the favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavorite(id: string, options?: any): AxiosPromise<Favorite>;
    /**
     * Fetch all favorites of connected user
     * @param {string} [type] The type of the desired favorites e.g. arrays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavorites(type?: string, options?: any): AxiosPromise<Array<Favorite>>;
    /**
     * Add a new favorite
     * @param {FavoriteUpdate} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFavorite(body?: FavoriteUpdate, options?: any): AxiosPromise<void>;
};
/**
 * FavoritesApi - object-oriented interface
 * @export
 * @class FavoritesApi
 * @extends {BaseAPI}
 */
export declare class FavoritesApi extends BaseAPI {
    /**
     * Delete specific favorite
     * @param {string} id The uuid of the favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    deleteFavoriteId(id: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Fetch specific favorite of a user
     * @param {string} id The uuid of the favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    getFavorite(id: string, options?: any): Promise<import("axios").AxiosResponse<Favorite>>;
    /**
     * Fetch all favorites of connected user
     * @param {string} [type] The type of the desired favorites e.g. arrays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    getFavorites(type?: string, options?: any): Promise<import("axios").AxiosResponse<Favorite[]>>;
    /**
     * Add a new favorite
     * @param {FavoriteUpdate} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    postFavorite(body?: FavoriteUpdate, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * InvitationApi - axios parameter creator
 * @export
 */
export declare const InvitationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accepts invitation
     * @param {string} invitation the id of invitation about to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvitation: (invitation: string, options?: any) => Promise<RequestArgs>;
    /**
     * Cancels join organization invitation
     * @param {string} invitation the id of invitation about to be cancelled
     * @param {string} organization name or uuid of organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelJoinOrganization: (invitation: string, organization: string, options?: any) => Promise<RequestArgs>;
    /**
     * Cancels array sharing invitation
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} invitation the id of invitation about to be cancelled
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelShareArrayByInvite: (namespace: string, invitation: string, array: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a list of invitations
     * @param {string} [organization] name or id of organization to filter
     * @param {string} [array] name/uri of array that is url-encoded to filter
     * @param {number} [start] start time for tasks to filter by
     * @param {number} [end] end time for tasks to filter by
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [type] invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot;
     * @param {string} [status] Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot;
     * @param {string} [orderby] sort by which field valid values include timestamp, array_name, organization_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchInvitations: (organization?: string, array?: string, start?: number, end?: number, page?: number, perPage?: number, type?: string, status?: string, orderby?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Sends email to multiple recipients with joining information regarding an organization
     * @param {string} organization name or uuid of organization
     * @param {InvitationOrganizationJoinEmail} emailInvite list of email recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinOrganization: (organization: string, emailInvite: InvitationOrganizationJoinEmail, options?: any) => Promise<RequestArgs>;
    /**
     * Sends email to multiple recipients with sharing information regarding an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {InvitationArrayShareEmail} emailInvite list of email recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareArrayByInvite: (namespace: string, array: string, emailInvite: InvitationArrayShareEmail, options?: any) => Promise<RequestArgs>;
};
/**
 * InvitationApi - functional programming interface
 * @export
 */
export declare const InvitationApiFp: (configuration?: Configuration) => {
    /**
     * Accepts invitation
     * @param {string} invitation the id of invitation about to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvitation(invitation: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Cancels join organization invitation
     * @param {string} invitation the id of invitation about to be cancelled
     * @param {string} organization name or uuid of organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelJoinOrganization(invitation: string, organization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Cancels array sharing invitation
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} invitation the id of invitation about to be cancelled
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelShareArrayByInvite(namespace: string, invitation: string, array: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Fetch a list of invitations
     * @param {string} [organization] name or id of organization to filter
     * @param {string} [array] name/uri of array that is url-encoded to filter
     * @param {number} [start] start time for tasks to filter by
     * @param {number} [end] end time for tasks to filter by
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [type] invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot;
     * @param {string} [status] Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot;
     * @param {string} [orderby] sort by which field valid values include timestamp, array_name, organization_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchInvitations(organization?: string, array?: string, start?: number, end?: number, page?: number, perPage?: number, type?: string, status?: string, orderby?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationData>>;
    /**
     * Sends email to multiple recipients with joining information regarding an organization
     * @param {string} organization name or uuid of organization
     * @param {InvitationOrganizationJoinEmail} emailInvite list of email recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinOrganization(organization: string, emailInvite: InvitationOrganizationJoinEmail, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sends email to multiple recipients with sharing information regarding an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {InvitationArrayShareEmail} emailInvite list of email recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareArrayByInvite(namespace: string, array: string, emailInvite: InvitationArrayShareEmail, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * InvitationApi - factory interface
 * @export
 */
export declare const InvitationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accepts invitation
     * @param {string} invitation the id of invitation about to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvitation(invitation: string, options?: any): AxiosPromise<void>;
    /**
     * Cancels join organization invitation
     * @param {string} invitation the id of invitation about to be cancelled
     * @param {string} organization name or uuid of organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelJoinOrganization(invitation: string, organization: string, options?: any): AxiosPromise<void>;
    /**
     * Cancels array sharing invitation
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} invitation the id of invitation about to be cancelled
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelShareArrayByInvite(namespace: string, invitation: string, array: string, options?: any): AxiosPromise<void>;
    /**
     * Fetch a list of invitations
     * @param {string} [organization] name or id of organization to filter
     * @param {string} [array] name/uri of array that is url-encoded to filter
     * @param {number} [start] start time for tasks to filter by
     * @param {number} [end] end time for tasks to filter by
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [type] invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot;
     * @param {string} [status] Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot;
     * @param {string} [orderby] sort by which field valid values include timestamp, array_name, organization_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchInvitations(organization?: string, array?: string, start?: number, end?: number, page?: number, perPage?: number, type?: string, status?: string, orderby?: string, options?: any): AxiosPromise<InvitationData>;
    /**
     * Sends email to multiple recipients with joining information regarding an organization
     * @param {string} organization name or uuid of organization
     * @param {InvitationOrganizationJoinEmail} emailInvite list of email recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinOrganization(organization: string, emailInvite: InvitationOrganizationJoinEmail, options?: any): AxiosPromise<void>;
    /**
     * Sends email to multiple recipients with sharing information regarding an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {InvitationArrayShareEmail} emailInvite list of email recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareArrayByInvite(namespace: string, array: string, emailInvite: InvitationArrayShareEmail, options?: any): AxiosPromise<void>;
};
/**
 * InvitationApi - object-oriented interface
 * @export
 * @class InvitationApi
 * @extends {BaseAPI}
 */
export declare class InvitationApi extends BaseAPI {
    /**
     * Accepts invitation
     * @param {string} invitation the id of invitation about to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    acceptInvitation(invitation: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Cancels join organization invitation
     * @param {string} invitation the id of invitation about to be cancelled
     * @param {string} organization name or uuid of organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    cancelJoinOrganization(invitation: string, organization: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Cancels array sharing invitation
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} invitation the id of invitation about to be cancelled
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    cancelShareArrayByInvite(namespace: string, invitation: string, array: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Fetch a list of invitations
     * @param {string} [organization] name or id of organization to filter
     * @param {string} [array] name/uri of array that is url-encoded to filter
     * @param {number} [start] start time for tasks to filter by
     * @param {number} [end] end time for tasks to filter by
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [type] invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot;
     * @param {string} [status] Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot;
     * @param {string} [orderby] sort by which field valid values include timestamp, array_name, organization_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    fetchInvitations(organization?: string, array?: string, start?: number, end?: number, page?: number, perPage?: number, type?: string, status?: string, orderby?: string, options?: any): Promise<import("axios").AxiosResponse<InvitationData>>;
    /**
     * Sends email to multiple recipients with joining information regarding an organization
     * @param {string} organization name or uuid of organization
     * @param {InvitationOrganizationJoinEmail} emailInvite list of email recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    joinOrganization(organization: string, emailInvite: InvitationOrganizationJoinEmail, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Sends email to multiple recipients with sharing information regarding an array
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {InvitationArrayShareEmail} emailInvite list of email recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    shareArrayByInvite(namespace: string, array: string, emailInvite: InvitationArrayShareEmail, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * NotebookApi - axios parameter creator
 * @export
 */
export declare const NotebookApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get status of the notebook server
     * @param {string} namespace namespace notebook is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotebookServerStatus: (namespace: string, options?: any) => Promise<RequestArgs>;
    /**
     * Shutdown a notebook server
     * @param {string} namespace namespace notebook is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shutdownNotebookServer: (namespace: string, options?: any) => Promise<RequestArgs>;
    /**
     * update name on a notebok, moving related s3 object to new location
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of notebook (array) that is url-encoded
     * @param {ArrayInfoUpdate} notebookMetadata notebook (array) metadata to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotebookName: (namespace: string, array: string, notebookMetadata: ArrayInfoUpdate, options?: any) => Promise<RequestArgs>;
};
/**
 * NotebookApi - functional programming interface
 * @export
 */
export declare const NotebookApiFp: (configuration?: Configuration) => {
    /**
     * Get status of the notebook server
     * @param {string} namespace namespace notebook is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotebookServerStatus(namespace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotebookStatus>>;
    /**
     * Shutdown a notebook server
     * @param {string} namespace namespace notebook is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shutdownNotebookServer(namespace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * update name on a notebok, moving related s3 object to new location
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of notebook (array) that is url-encoded
     * @param {ArrayInfoUpdate} notebookMetadata notebook (array) metadata to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotebookName(namespace: string, array: string, notebookMetadata: ArrayInfoUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * NotebookApi - factory interface
 * @export
 */
export declare const NotebookApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get status of the notebook server
     * @param {string} namespace namespace notebook is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotebookServerStatus(namespace: string, options?: any): AxiosPromise<NotebookStatus>;
    /**
     * Shutdown a notebook server
     * @param {string} namespace namespace notebook is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shutdownNotebookServer(namespace: string, options?: any): AxiosPromise<void>;
    /**
     * update name on a notebok, moving related s3 object to new location
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of notebook (array) that is url-encoded
     * @param {ArrayInfoUpdate} notebookMetadata notebook (array) metadata to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotebookName(namespace: string, array: string, notebookMetadata: ArrayInfoUpdate, options?: any): AxiosPromise<void>;
};
/**
 * NotebookApi - object-oriented interface
 * @export
 * @class NotebookApi
 * @extends {BaseAPI}
 */
export declare class NotebookApi extends BaseAPI {
    /**
     * Get status of the notebook server
     * @param {string} namespace namespace notebook is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    getNotebookServerStatus(namespace: string, options?: any): Promise<import("axios").AxiosResponse<NotebookStatus>>;
    /**
     * Shutdown a notebook server
     * @param {string} namespace namespace notebook is in (an organization name or user\&#39;s username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    shutdownNotebookServer(namespace: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * update name on a notebok, moving related s3 object to new location
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of notebook (array) that is url-encoded
     * @param {ArrayInfoUpdate} notebookMetadata notebook (array) metadata to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    updateNotebookName(namespace: string, array: string, notebookMetadata: ArrayInfoUpdate, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * NotebooksApi - axios parameter creator
 * @export
 */
export declare const NotebooksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notebooksNamespaceArrayVersionsGet: (namespace: string, array: string, options?: any) => Promise<RequestArgs>;
};
/**
 * NotebooksApi - functional programming interface
 * @export
 */
export declare const NotebooksApiFp: (configuration?: Configuration) => {
    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notebooksNamespaceArrayVersionsGet(namespace: string, array: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>>;
};
/**
 * NotebooksApi - factory interface
 * @export
 */
export declare const NotebooksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notebooksNamespaceArrayVersionsGet(namespace: string, array: string, options?: any): AxiosPromise<Array<number>>;
};
/**
 * NotebooksApi - object-oriented interface
 * @export
 * @class NotebooksApi
 * @extends {BaseAPI}
 */
export declare class NotebooksApi extends BaseAPI {
    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebooksApi
     */
    notebooksNamespaceArrayVersionsGet(namespace: string, array: string, options?: any): Promise<import("axios").AxiosResponse<number[]>>;
}
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export declare const OrganizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add aws keys
     * @param {string} namespace namespace
     * @param {AWSAccessCredentials} awsAccessCredentials aws access credentials to store for a namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAWSAccessCredentials: (namespace: string, awsAccessCredentials: AWSAccessCredentials, options?: any) => Promise<RequestArgs>;
    /**
     * add a user to an organization
     * @param {string} organization organization name
     * @param {OrganizationUser} user user to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserToOrganization: (organization: string, user: OrganizationUser, options?: any) => Promise<RequestArgs>;
    /**
     * Check if aws keys are set
     * @param {string} namespace namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentials: (namespace: string, options?: any) => Promise<RequestArgs>;
    /**
     * Check if aws keys are set by name
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentialsByName: (namespace: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * create a organization, the user creating will be listed as owner
     * @param {Organization} organization organization to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization: (organization: Organization, options?: any) => Promise<RequestArgs>;
    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAWSAccessCredentials: (namespace: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * delete a organization
     * @param {string} organization organization name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: (organization: string, options?: any) => Promise<RequestArgs>;
    /**
     * delete a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromOrganization: (organization: string, username: string, options?: any) => Promise<RequestArgs>;
    /**
     * get all organizations that the user is member of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOrganizations: (options?: any) => Promise<RequestArgs>;
    /**
     * get a organization
     * @param {string} organization organization name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: (organization: string, options?: any) => Promise<RequestArgs>;
    /**
     * get a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUser: (organization: string, username: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {AWSAccessCredentials} awsAccessCredentials aws credentials to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAWSAccessCredentials: (namespace: string, name: string, awsAccessCredentials: AWSAccessCredentials, options?: any) => Promise<RequestArgs>;
    /**
     * update a organization
     * @param {string} organization organization name or id
     * @param {Organization} organizationDetails organization details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization: (organization: string, organizationDetails: Organization, options?: any) => Promise<RequestArgs>;
    /**
     * update a user in an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {OrganizationUser} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserInOrganization: (organization: string, username: string, user: OrganizationUser, options?: any) => Promise<RequestArgs>;
};
/**
 * OrganizationApi - functional programming interface
 * @export
 */
export declare const OrganizationApiFp: (configuration?: Configuration) => {
    /**
     * Add aws keys
     * @param {string} namespace namespace
     * @param {AWSAccessCredentials} awsAccessCredentials aws access credentials to store for a namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAWSAccessCredentials(namespace: string, awsAccessCredentials: AWSAccessCredentials, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * add a user to an organization
     * @param {string} organization organization name
     * @param {OrganizationUser} user user to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserToOrganization(organization: string, user: OrganizationUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if aws keys are set
     * @param {string} namespace namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentials(namespace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AWSAccessCredentials>>>;
    /**
     * Check if aws keys are set by name
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentialsByName(namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AWSAccessCredentials>>;
    /**
     * create a organization, the user creating will be listed as owner
     * @param {Organization} organization organization to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(organization: Organization, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAWSAccessCredentials(namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * delete a organization
     * @param {string} organization organization name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(organization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * delete a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromOrganization(organization: string, username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * get all organizations that the user is member of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOrganizations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>>;
    /**
     * get a organization
     * @param {string} organization organization name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(organization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>>;
    /**
     * get a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUser(organization: string, username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUser>>;
    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {AWSAccessCredentials} awsAccessCredentials aws credentials to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAWSAccessCredentials(namespace: string, name: string, awsAccessCredentials: AWSAccessCredentials, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * update a organization
     * @param {string} organization organization name or id
     * @param {Organization} organizationDetails organization details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization(organization: string, organizationDetails: Organization, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * update a user in an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {OrganizationUser} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserInOrganization(organization: string, username: string, user: OrganizationUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * OrganizationApi - factory interface
 * @export
 */
export declare const OrganizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add aws keys
     * @param {string} namespace namespace
     * @param {AWSAccessCredentials} awsAccessCredentials aws access credentials to store for a namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAWSAccessCredentials(namespace: string, awsAccessCredentials: AWSAccessCredentials, options?: any): AxiosPromise<void>;
    /**
     * add a user to an organization
     * @param {string} organization organization name
     * @param {OrganizationUser} user user to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserToOrganization(organization: string, user: OrganizationUser, options?: any): AxiosPromise<void>;
    /**
     * Check if aws keys are set
     * @param {string} namespace namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentials(namespace: string, options?: any): AxiosPromise<Array<AWSAccessCredentials>>;
    /**
     * Check if aws keys are set by name
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentialsByName(namespace: string, name: string, options?: any): AxiosPromise<AWSAccessCredentials>;
    /**
     * create a organization, the user creating will be listed as owner
     * @param {Organization} organization organization to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(organization: Organization, options?: any): AxiosPromise<void>;
    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAWSAccessCredentials(namespace: string, name: string, options?: any): AxiosPromise<void>;
    /**
     * delete a organization
     * @param {string} organization organization name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(organization: string, options?: any): AxiosPromise<void>;
    /**
     * delete a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromOrganization(organization: string, username: string, options?: any): AxiosPromise<void>;
    /**
     * get all organizations that the user is member of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOrganizations(options?: any): AxiosPromise<Array<Organization>>;
    /**
     * get a organization
     * @param {string} organization organization name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(organization: string, options?: any): AxiosPromise<Organization>;
    /**
     * get a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUser(organization: string, username: string, options?: any): AxiosPromise<OrganizationUser>;
    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {AWSAccessCredentials} awsAccessCredentials aws credentials to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAWSAccessCredentials(namespace: string, name: string, awsAccessCredentials: AWSAccessCredentials, options?: any): AxiosPromise<void>;
    /**
     * update a organization
     * @param {string} organization organization name or id
     * @param {Organization} organizationDetails organization details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization(organization: string, organizationDetails: Organization, options?: any): AxiosPromise<void>;
    /**
     * update a user in an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {OrganizationUser} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserInOrganization(organization: string, username: string, user: OrganizationUser, options?: any): AxiosPromise<void>;
};
/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export declare class OrganizationApi extends BaseAPI {
    /**
     * Add aws keys
     * @param {string} namespace namespace
     * @param {AWSAccessCredentials} awsAccessCredentials aws access credentials to store for a namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    addAWSAccessCredentials(namespace: string, awsAccessCredentials: AWSAccessCredentials, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * add a user to an organization
     * @param {string} organization organization name
     * @param {OrganizationUser} user user to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    addUserToOrganization(organization: string, user: OrganizationUser, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Check if aws keys are set
     * @param {string} namespace namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    checkAWSAccessCredentials(namespace: string, options?: any): Promise<import("axios").AxiosResponse<AWSAccessCredentials[]>>;
    /**
     * Check if aws keys are set by name
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    checkAWSAccessCredentialsByName(namespace: string, name: string, options?: any): Promise<import("axios").AxiosResponse<AWSAccessCredentials>>;
    /**
     * create a organization, the user creating will be listed as owner
     * @param {Organization} organization organization to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    createOrganization(organization: Organization, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    deleteAWSAccessCredentials(namespace: string, name: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * delete a organization
     * @param {string} organization organization name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    deleteOrganization(organization: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * delete a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    deleteUserFromOrganization(organization: string, username: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * get all organizations that the user is member of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    getAllOrganizations(options?: any): Promise<import("axios").AxiosResponse<Organization[]>>;
    /**
     * get a organization
     * @param {string} organization organization name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    getOrganization(organization: string, options?: any): Promise<import("axios").AxiosResponse<Organization>>;
    /**
     * get a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    getOrganizationUser(organization: string, username: string, options?: any): Promise<import("axios").AxiosResponse<OrganizationUser>>;
    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {AWSAccessCredentials} awsAccessCredentials aws credentials to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    updateAWSAccessCredentials(namespace: string, name: string, awsAccessCredentials: AWSAccessCredentials, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * update a organization
     * @param {string} organization organization name or id
     * @param {Organization} organizationDetails organization details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    updateOrganization(organization: string, organizationDetails: Organization, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * update a user in an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {OrganizationUser} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    updateUserInOrganization(organization: string, username: string, user: OrganizationUser, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * QueryApi - axios parameter creator
 * @export
 */
export declare const QueryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finalizeQuery: (namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any) => Promise<RequestArgs>;
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEstResultSizes: (namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any) => Promise<RequestArgs>;
    /**
     * send a query to run against a specified array/URI registered to a group/project, returns file bytes
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile: (namespace: string, array: string, contentType: string, xPayer?: string, options?: any) => Promise<RequestArgs>;
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitQuery: (namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any) => Promise<RequestArgs>;
    /**
     * send a query to run against a specified array/URI registered to a group/project, returns json results
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {QueryJson} queryJson query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitQueryJson: (namespace: string, array: string, contentType: string, queryJson: QueryJson, xPayer?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * QueryApi - functional programming interface
 * @export
 */
export declare const QueryApiFp: (configuration?: Configuration) => {
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finalizeQuery(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Query>>;
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEstResultSizes(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Query>>;
    /**
     * send a query to run against a specified array/URI registered to a group/project, returns file bytes
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(namespace: string, array: string, contentType: string, xPayer?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitQuery(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Query>>;
    /**
     * send a query to run against a specified array/URI registered to a group/project, returns json results
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {QueryJson} queryJson query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitQueryJson(namespace: string, array: string, contentType: string, queryJson: QueryJson, xPayer?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * QueryApi - factory interface
 * @export
 */
export declare const QueryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finalizeQuery(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): AxiosPromise<Query>;
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEstResultSizes(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): AxiosPromise<Query>;
    /**
     * send a query to run against a specified array/URI registered to a group/project, returns file bytes
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(namespace: string, array: string, contentType: string, xPayer?: string, options?: any): AxiosPromise<any>;
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitQuery(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): AxiosPromise<Query>;
    /**
     * send a query to run against a specified array/URI registered to a group/project, returns json results
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {QueryJson} queryJson query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitQueryJson(namespace: string, array: string, contentType: string, queryJson: QueryJson, xPayer?: string, options?: any): AxiosPromise<object>;
};
/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export declare class QueryApi extends BaseAPI {
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    finalizeQuery(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): Promise<import("axios").AxiosResponse<Query>>;
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    getEstResultSizes(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): Promise<import("axios").AxiosResponse<Query>>;
    /**
     * send a query to run against a specified array/URI registered to a group/project, returns file bytes
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    getFile(namespace: string, array: string, contentType: string, xPayer?: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     * send a query to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} type type of query
     * @param {string} contentType Content Type of input and return mime
     * @param {Query} query query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {number} [openAt] open_at for array in unix epoch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    submitQuery(namespace: string, array: string, type: string, contentType: string, query: Query, xPayer?: string, openAt?: number, options?: any): Promise<import("axios").AxiosResponse<Query>>;
    /**
     * send a query to run against a specified array/URI registered to a group/project, returns json results
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {string} contentType Content Type of input and return mime
     * @param {QueryJson} queryJson query to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    submitQueryJson(namespace: string, array: string, contentType: string, queryJson: QueryJson, xPayer?: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * SqlApi - axios parameter creator
 * @export
 */
export declare const SqlApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Run a sql query
     * @param {string} namespace namespace to run task under is in (an organization name or user\&#39;s username)
     * @param {SQLParameters} sql sql being submitted
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runSQL: (namespace: string, sql: SQLParameters, acceptEncoding?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * SqlApi - functional programming interface
 * @export
 */
export declare const SqlApiFp: (configuration?: Configuration) => {
    /**
     * Run a sql query
     * @param {string} namespace namespace to run task under is in (an organization name or user\&#39;s username)
     * @param {SQLParameters} sql sql being submitted
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runSQL(namespace: string, sql: SQLParameters, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>>;
};
/**
 * SqlApi - factory interface
 * @export
 */
export declare const SqlApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Run a sql query
     * @param {string} namespace namespace to run task under is in (an organization name or user\&#39;s username)
     * @param {SQLParameters} sql sql being submitted
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runSQL(namespace: string, sql: SQLParameters, acceptEncoding?: string, options?: any): AxiosPromise<Array<object>>;
};
/**
 * SqlApi - object-oriented interface
 * @export
 * @class SqlApi
 * @extends {BaseAPI}
 */
export declare class SqlApi extends BaseAPI {
    /**
     * Run a sql query
     * @param {string} namespace namespace to run task under is in (an organization name or user\&#39;s username)
     * @param {SQLParameters} sql sql being submitted
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SqlApi
     */
    runSQL(namespace: string, sql: SQLParameters, acceptEncoding?: string, options?: any): Promise<import("axios").AxiosResponse<object[]>>;
}
/**
 * StatsApi - axios parameter creator
 * @export
 */
export declare const StatsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch libtiledb stat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTiledbStats: (options?: any) => Promise<RequestArgs>;
};
/**
 * StatsApi - functional programming interface
 * @export
 */
export declare const StatsApiFp: (configuration?: Configuration) => {
    /**
     * Fetch libtiledb stat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTiledbStats(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
};
/**
 * StatsApi - factory interface
 * @export
 */
export declare const StatsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch libtiledb stat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTiledbStats(options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
export declare class StatsApi extends BaseAPI {
    /**
     * Fetch libtiledb stat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    getTiledbStats(options?: any): Promise<import("axios").AxiosResponse<InlineResponse200>>;
}
/**
 * TasksApi - axios parameter creator
 * @export
 */
export declare const TasksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Run a sql query
     * @param {string} namespace namespace to run task under is in (an organization name or user\&#39;s username)
     * @param {SQLParameters} sql sql being submitted
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runSQL: (namespace: string, sql: SQLParameters, acceptEncoding?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch an array task
     * @param {string} id task id to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    taskIdGet: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve results of an array task
     * @param {string} id task id to retrieve stored results
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    taskIdResultGet: (id: string, acceptEncoding?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a list of all array tasks a user has access to
     * @param {string} [namespace] namespace to filter
     * @param {string} [createdBy] username to filter
     * @param {string} [array] name/uri of array that is url-encoded to filter
     * @param {number} [start] start time for tasks to filter by
     * @param {number} [end] end time for tasks to filter by
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [type] task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot;
     * @param {Array<string>} [excludeType] task_type to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] match file_type of task array, more than one can be included
     * @param {Array<string>} [excludeFileType] exclude file_type of task arrays, more than one can be included
     * @param {string} [status] Filter to only return these statuses
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [orderby] sort by which field valid values include start_time, name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tasksGet: (namespace?: string, createdBy?: string, array?: string, start?: number, end?: number, page?: number, perPage?: number, type?: string, excludeType?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, status?: string, search?: string, orderby?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TasksApi - functional programming interface
 * @export
 */
export declare const TasksApiFp: (configuration?: Configuration) => {
    /**
     * Run a sql query
     * @param {string} namespace namespace to run task under is in (an organization name or user\&#39;s username)
     * @param {SQLParameters} sql sql being submitted
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runSQL(namespace: string, sql: SQLParameters, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>>;
    /**
     * Fetch an array task
     * @param {string} id task id to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    taskIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayTask>>;
    /**
     * Retrieve results of an array task
     * @param {string} id task id to retrieve stored results
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    taskIdResultGet(id: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Fetch a list of all array tasks a user has access to
     * @param {string} [namespace] namespace to filter
     * @param {string} [createdBy] username to filter
     * @param {string} [array] name/uri of array that is url-encoded to filter
     * @param {number} [start] start time for tasks to filter by
     * @param {number} [end] end time for tasks to filter by
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [type] task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot;
     * @param {Array<string>} [excludeType] task_type to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] match file_type of task array, more than one can be included
     * @param {Array<string>} [excludeFileType] exclude file_type of task arrays, more than one can be included
     * @param {string} [status] Filter to only return these statuses
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [orderby] sort by which field valid values include start_time, name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tasksGet(namespace?: string, createdBy?: string, array?: string, start?: number, end?: number, page?: number, perPage?: number, type?: string, excludeType?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, status?: string, search?: string, orderby?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayTaskData>>;
};
/**
 * TasksApi - factory interface
 * @export
 */
export declare const TasksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Run a sql query
     * @param {string} namespace namespace to run task under is in (an organization name or user\&#39;s username)
     * @param {SQLParameters} sql sql being submitted
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runSQL(namespace: string, sql: SQLParameters, acceptEncoding?: string, options?: any): AxiosPromise<Array<object>>;
    /**
     * Fetch an array task
     * @param {string} id task id to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    taskIdGet(id: string, options?: any): AxiosPromise<ArrayTask>;
    /**
     * Retrieve results of an array task
     * @param {string} id task id to retrieve stored results
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    taskIdResultGet(id: string, acceptEncoding?: string, options?: any): AxiosPromise<string>;
    /**
     * Fetch a list of all array tasks a user has access to
     * @param {string} [namespace] namespace to filter
     * @param {string} [createdBy] username to filter
     * @param {string} [array] name/uri of array that is url-encoded to filter
     * @param {number} [start] start time for tasks to filter by
     * @param {number} [end] end time for tasks to filter by
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [type] task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot;
     * @param {Array<string>} [excludeType] task_type to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] match file_type of task array, more than one can be included
     * @param {Array<string>} [excludeFileType] exclude file_type of task arrays, more than one can be included
     * @param {string} [status] Filter to only return these statuses
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [orderby] sort by which field valid values include start_time, name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tasksGet(namespace?: string, createdBy?: string, array?: string, start?: number, end?: number, page?: number, perPage?: number, type?: string, excludeType?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, status?: string, search?: string, orderby?: string, options?: any): AxiosPromise<ArrayTaskData>;
};
/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export declare class TasksApi extends BaseAPI {
    /**
     * Run a sql query
     * @param {string} namespace namespace to run task under is in (an organization name or user\&#39;s username)
     * @param {SQLParameters} sql sql being submitted
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    runSQL(namespace: string, sql: SQLParameters, acceptEncoding?: string, options?: any): Promise<import("axios").AxiosResponse<object[]>>;
    /**
     * Fetch an array task
     * @param {string} id task id to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    taskIdGet(id: string, options?: any): Promise<import("axios").AxiosResponse<ArrayTask>>;
    /**
     * Retrieve results of an array task
     * @param {string} id task id to retrieve stored results
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    taskIdResultGet(id: string, acceptEncoding?: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * Fetch a list of all array tasks a user has access to
     * @param {string} [namespace] namespace to filter
     * @param {string} [createdBy] username to filter
     * @param {string} [array] name/uri of array that is url-encoded to filter
     * @param {number} [start] start time for tasks to filter by
     * @param {number} [end] end time for tasks to filter by
     * @param {number} [page] pagination offset
     * @param {number} [perPage] pagination limit
     * @param {string} [type] task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot;
     * @param {Array<string>} [excludeType] task_type to exclude matching array in results, more than one can be included
     * @param {Array<string>} [fileType] match file_type of task array, more than one can be included
     * @param {Array<string>} [excludeFileType] exclude file_type of task arrays, more than one can be included
     * @param {string} [status] Filter to only return these statuses
     * @param {string} [search] search string that will look at name, namespace or description fields
     * @param {string} [orderby] sort by which field valid values include start_time, name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    tasksGet(namespace?: string, createdBy?: string, array?: string, start?: number, end?: number, page?: number, perPage?: number, type?: string, excludeType?: Array<string>, fileType?: Array<string>, excludeFileType?: Array<string>, status?: string, search?: string, orderby?: string, options?: any): Promise<import("axios").AxiosResponse<ArrayTaskData>>;
}
/**
 * UdfApi - axios parameter creator
 * @export
 */
export declare const UdfApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * delete a registerd UDF, this will remove all sharing and can not be undone
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUDFInfo: (namespace: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * get a specific UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUDFInfo: (namespace: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all sharing details of the udf
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name of UDFInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUDFInfoSharingPolicies: (namespace: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * register a UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {UDFInfoUpdate} udf udf to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUDFInfo: (namespace: string, name: string, udf: UDFInfoUpdate, options?: any) => Promise<RequestArgs>;
    /**
     * Share a UDF with a user
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name of UDFInfo
     * @param {UDFSharing} udfSharing Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the udf will not be shared with the namespace at all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareUDFInfo: (namespace: string, name: string, udfSharing: UDFSharing, options?: any) => Promise<RequestArgs>;
    /**
     * submit a generic UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {GenericUDF} udf udf to run
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitGenericUDF: (namespace: string, udf: GenericUDF, acceptEncoding?: string, options?: any) => Promise<RequestArgs>;
    /**
     * submit a multi-array UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {MultiArrayUDF} udf udf to run
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitMultiArrayUDF: (namespace: string, udf: MultiArrayUDF, acceptEncoding?: string, options?: any) => Promise<RequestArgs>;
    /**
     * send a UDF to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {MultiArrayUDF} udf udf to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {string} [acceptEncoding] Encoding to use
     * @param {string} [v2] flag to indicate if v2 array udfs should be used, currently in beta testing. Setting any value will enable v2 array udfs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitUDF: (namespace: string, array: string, udf: MultiArrayUDF, xPayer?: string, acceptEncoding?: string, v2?: string, options?: any) => Promise<RequestArgs>;
    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    udfNamespaceArrayVersionsGet: (namespace: string, array: string, options?: any) => Promise<RequestArgs>;
    /**
     * updated an existing registerd UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {UDFInfoUpdate} udf udf to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUDFInfo: (namespace: string, name: string, udf: UDFInfoUpdate, options?: any) => Promise<RequestArgs>;
};
/**
 * UdfApi - functional programming interface
 * @export
 */
export declare const UdfApiFp: (configuration?: Configuration) => {
    /**
     * delete a registerd UDF, this will remove all sharing and can not be undone
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUDFInfo(namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * get a specific UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUDFInfo(namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UDFInfo>>;
    /**
     * Get all sharing details of the udf
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name of UDFInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUDFInfoSharingPolicies(namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UDFSharing>>>;
    /**
     * register a UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {UDFInfoUpdate} udf udf to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUDFInfo(namespace: string, name: string, udf: UDFInfoUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Share a UDF with a user
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name of UDFInfo
     * @param {UDFSharing} udfSharing Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the udf will not be shared with the namespace at all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareUDFInfo(namespace: string, name: string, udfSharing: UDFSharing, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * submit a generic UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {GenericUDF} udf udf to run
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitGenericUDF(namespace: string, udf: GenericUDF, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * submit a multi-array UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {MultiArrayUDF} udf udf to run
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitMultiArrayUDF(namespace: string, udf: MultiArrayUDF, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * send a UDF to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {MultiArrayUDF} udf udf to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {string} [acceptEncoding] Encoding to use
     * @param {string} [v2] flag to indicate if v2 array udfs should be used, currently in beta testing. Setting any value will enable v2 array udfs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitUDF(namespace: string, array: string, udf: MultiArrayUDF, xPayer?: string, acceptEncoding?: string, v2?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    udfNamespaceArrayVersionsGet(namespace: string, array: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>>;
    /**
     * updated an existing registerd UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {UDFInfoUpdate} udf udf to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUDFInfo(namespace: string, name: string, udf: UDFInfoUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UdfApi - factory interface
 * @export
 */
export declare const UdfApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * delete a registerd UDF, this will remove all sharing and can not be undone
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUDFInfo(namespace: string, name: string, options?: any): AxiosPromise<void>;
    /**
     * get a specific UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUDFInfo(namespace: string, name: string, options?: any): AxiosPromise<UDFInfo>;
    /**
     * Get all sharing details of the udf
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name of UDFInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUDFInfoSharingPolicies(namespace: string, name: string, options?: any): AxiosPromise<Array<UDFSharing>>;
    /**
     * register a UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {UDFInfoUpdate} udf udf to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUDFInfo(namespace: string, name: string, udf: UDFInfoUpdate, options?: any): AxiosPromise<void>;
    /**
     * Share a UDF with a user
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name of UDFInfo
     * @param {UDFSharing} udfSharing Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the udf will not be shared with the namespace at all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareUDFInfo(namespace: string, name: string, udfSharing: UDFSharing, options?: any): AxiosPromise<void>;
    /**
     * submit a generic UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {GenericUDF} udf udf to run
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitGenericUDF(namespace: string, udf: GenericUDF, acceptEncoding?: string, options?: any): AxiosPromise<any>;
    /**
     * submit a multi-array UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {MultiArrayUDF} udf udf to run
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitMultiArrayUDF(namespace: string, udf: MultiArrayUDF, acceptEncoding?: string, options?: any): AxiosPromise<any>;
    /**
     * send a UDF to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {MultiArrayUDF} udf udf to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {string} [acceptEncoding] Encoding to use
     * @param {string} [v2] flag to indicate if v2 array udfs should be used, currently in beta testing. Setting any value will enable v2 array udfs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitUDF(namespace: string, array: string, udf: MultiArrayUDF, xPayer?: string, acceptEncoding?: string, v2?: string, options?: any): AxiosPromise<any>;
    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    udfNamespaceArrayVersionsGet(namespace: string, array: string, options?: any): AxiosPromise<Array<number>>;
    /**
     * updated an existing registerd UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {UDFInfoUpdate} udf udf to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUDFInfo(namespace: string, name: string, udf: UDFInfoUpdate, options?: any): AxiosPromise<void>;
};
/**
 * UdfApi - object-oriented interface
 * @export
 * @class UdfApi
 * @extends {BaseAPI}
 */
export declare class UdfApi extends BaseAPI {
    /**
     * delete a registerd UDF, this will remove all sharing and can not be undone
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    deleteUDFInfo(namespace: string, name: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * get a specific UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    getUDFInfo(namespace: string, name: string, options?: any): Promise<import("axios").AxiosResponse<UDFInfo>>;
    /**
     * Get all sharing details of the udf
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name of UDFInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    getUDFInfoSharingPolicies(namespace: string, name: string, options?: any): Promise<import("axios").AxiosResponse<UDFSharing[]>>;
    /**
     * register a UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {UDFInfoUpdate} udf udf to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    registerUDFInfo(namespace: string, name: string, udf: UDFInfoUpdate, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Share a UDF with a user
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name of UDFInfo
     * @param {UDFSharing} udfSharing Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the udf will not be shared with the namespace at all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    shareUDFInfo(namespace: string, name: string, udfSharing: UDFSharing, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * submit a generic UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {GenericUDF} udf udf to run
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    submitGenericUDF(namespace: string, udf: GenericUDF, acceptEncoding?: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     * submit a multi-array UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {MultiArrayUDF} udf udf to run
     * @param {string} [acceptEncoding] Encoding to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    submitMultiArrayUDF(namespace: string, udf: MultiArrayUDF, acceptEncoding?: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     * send a UDF to run against a specified array/URI registered to a group/project
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {MultiArrayUDF} udf udf to run
     * @param {string} [xPayer] Name of organization or user who should be charged for this request
     * @param {string} [acceptEncoding] Encoding to use
     * @param {string} [v2] flag to indicate if v2 array udfs should be used, currently in beta testing. Setting any value will enable v2 array udfs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    submitUDF(namespace: string, array: string, udf: MultiArrayUDF, xPayer?: string, acceptEncoding?: string, v2?: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} array name/uri of array that is url-encoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    udfNamespaceArrayVersionsGet(namespace: string, array: string, options?: any): Promise<import("axios").AxiosResponse<number[]>>;
    /**
     * updated an existing registerd UDF in the given namespace
     * @param {string} namespace namespace array is in (an organization name or user\&#39;s username)
     * @param {string} name name to register udf under
     * @param {UDFInfoUpdate} udf udf to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UdfApi
     */
    updateUDFInfo(namespace: string, name: string, udf: UDFInfoUpdate, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add aws keys
     * @param {string} namespace namespace
     * @param {AWSAccessCredentials} awsAccessCredentials aws access credentials to store for a namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAWSAccessCredentials: (namespace: string, awsAccessCredentials: AWSAccessCredentials, options?: any) => Promise<RequestArgs>;
    /**
     * add a user to an organization
     * @param {string} organization organization name
     * @param {OrganizationUser} user user to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserToOrganization: (organization: string, user: OrganizationUser, options?: any) => Promise<RequestArgs>;
    /**
     * Check if aws keys are set
     * @param {string} namespace namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentials: (namespace: string, options?: any) => Promise<RequestArgs>;
    /**
     * Check if aws keys are set by name
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentialsByName: (namespace: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * confirm user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmEmail: (options?: any) => Promise<RequestArgs>;
    /**
     * create a user
     * @param {User} user user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (user: User, options?: any) => Promise<RequestArgs>;
    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAWSAccessCredentials: (namespace: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * delete a user
     * @param {string} username username or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (username: string, options?: any) => Promise<RequestArgs>;
    /**
     * delete a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromOrganization: (organization: string, username: string, options?: any) => Promise<RequestArgs>;
    /**
     * get a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUser: (organization: string, username: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get session token for user
     * @param {string} [rememberMe] flag to create a token with expiration of 30 days, default is false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSession: (rememberMe?: string, options?: any) => Promise<RequestArgs>;
    /**
     * get a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (options?: any) => Promise<RequestArgs>;
    /**
     * get a user
     * @param {string} username username or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWithUsername: (username: string, options?: any) => Promise<RequestArgs>;
    /**
     * Request an authorization token, optionally taken a TokenRequest object to set parameters on the token
     * @param {TokenRequest} [tokenRequest] token request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestToken: (tokenRequest?: TokenRequest, options?: any) => Promise<RequestArgs>;
    /**
     * reset user password
     * @param {InlineObject} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetUserPassword: (user: InlineObject, options?: any) => Promise<RequestArgs>;
    /**
     * revoke an authorization token
     * @param {string} token token name or token itself
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeToken: (token: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a list of user tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Fetch a list of user session tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensSessionGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {AWSAccessCredentials} awsAccessCredentials aws credentials to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAWSAccessCredentials: (namespace: string, name: string, awsAccessCredentials: AWSAccessCredentials, options?: any) => Promise<RequestArgs>;
    /**
     * update a user
     * @param {string} username username or id
     * @param {User} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (username: string, user: User, options?: any) => Promise<RequestArgs>;
    /**
     * update a user in an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {OrganizationUser} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserInOrganization: (organization: string, username: string, user: OrganizationUser, options?: any) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * Add aws keys
     * @param {string} namespace namespace
     * @param {AWSAccessCredentials} awsAccessCredentials aws access credentials to store for a namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAWSAccessCredentials(namespace: string, awsAccessCredentials: AWSAccessCredentials, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * add a user to an organization
     * @param {string} organization organization name
     * @param {OrganizationUser} user user to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserToOrganization(organization: string, user: OrganizationUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if aws keys are set
     * @param {string} namespace namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentials(namespace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AWSAccessCredentials>>>;
    /**
     * Check if aws keys are set by name
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentialsByName(namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AWSAccessCredentials>>;
    /**
     * confirm user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmEmail(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * create a user
     * @param {User} user user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(user: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAWSAccessCredentials(namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * delete a user
     * @param {string} username username or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * delete a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromOrganization(organization: string, username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * get a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUser(organization: string, username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUser>>;
    /**
     * Get session token for user
     * @param {string} [rememberMe] flag to create a token with expiration of 30 days, default is false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSession(rememberMe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
    /**
     * get a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * get a user
     * @param {string} username username or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWithUsername(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Request an authorization token, optionally taken a TokenRequest object to set parameters on the token
     * @param {TokenRequest} [tokenRequest] token request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestToken(tokenRequest?: TokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
    /**
     * reset user password
     * @param {InlineObject} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetUserPassword(user: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * revoke an authorization token
     * @param {string} token token name or token itself
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeToken(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Fetch a list of user tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     * Fetch a list of user session tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensSessionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {AWSAccessCredentials} awsAccessCredentials aws credentials to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAWSAccessCredentials(namespace: string, name: string, awsAccessCredentials: AWSAccessCredentials, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * update a user
     * @param {string} username username or id
     * @param {User} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(username: string, user: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * update a user in an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {OrganizationUser} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserInOrganization(organization: string, username: string, user: OrganizationUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add aws keys
     * @param {string} namespace namespace
     * @param {AWSAccessCredentials} awsAccessCredentials aws access credentials to store for a namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAWSAccessCredentials(namespace: string, awsAccessCredentials: AWSAccessCredentials, options?: any): AxiosPromise<void>;
    /**
     * add a user to an organization
     * @param {string} organization organization name
     * @param {OrganizationUser} user user to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserToOrganization(organization: string, user: OrganizationUser, options?: any): AxiosPromise<void>;
    /**
     * Check if aws keys are set
     * @param {string} namespace namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentials(namespace: string, options?: any): AxiosPromise<Array<AWSAccessCredentials>>;
    /**
     * Check if aws keys are set by name
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkAWSAccessCredentialsByName(namespace: string, name: string, options?: any): AxiosPromise<AWSAccessCredentials>;
    /**
     * confirm user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmEmail(options?: any): AxiosPromise<void>;
    /**
     * create a user
     * @param {User} user user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(user: User, options?: any): AxiosPromise<void>;
    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAWSAccessCredentials(namespace: string, name: string, options?: any): AxiosPromise<void>;
    /**
     * delete a user
     * @param {string} username username or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(username: string, options?: any): AxiosPromise<void>;
    /**
     * delete a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromOrganization(organization: string, username: string, options?: any): AxiosPromise<void>;
    /**
     * get a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUser(organization: string, username: string, options?: any): AxiosPromise<OrganizationUser>;
    /**
     * Get session token for user
     * @param {string} [rememberMe] flag to create a token with expiration of 30 days, default is false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSession(rememberMe?: string, options?: any): AxiosPromise<Token>;
    /**
     * get a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(options?: any): AxiosPromise<User>;
    /**
     * get a user
     * @param {string} username username or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWithUsername(username: string, options?: any): AxiosPromise<User>;
    /**
     * Request an authorization token, optionally taken a TokenRequest object to set parameters on the token
     * @param {TokenRequest} [tokenRequest] token request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestToken(tokenRequest?: TokenRequest, options?: any): AxiosPromise<Token>;
    /**
     * reset user password
     * @param {InlineObject} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetUserPassword(user: InlineObject, options?: any): AxiosPromise<void>;
    /**
     * revoke an authorization token
     * @param {string} token token name or token itself
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeToken(token: string, options?: any): AxiosPromise<void>;
    /**
     * Fetch a list of user tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensGet(options?: any): AxiosPromise<Array<Token>>;
    /**
     * Fetch a list of user session tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokensSessionGet(options?: any): AxiosPromise<Array<Token>>;
    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {AWSAccessCredentials} awsAccessCredentials aws credentials to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAWSAccessCredentials(namespace: string, name: string, awsAccessCredentials: AWSAccessCredentials, options?: any): AxiosPromise<void>;
    /**
     * update a user
     * @param {string} username username or id
     * @param {User} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(username: string, user: User, options?: any): AxiosPromise<void>;
    /**
     * update a user in an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {OrganizationUser} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserInOrganization(organization: string, username: string, user: OrganizationUser, options?: any): AxiosPromise<void>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * Add aws keys
     * @param {string} namespace namespace
     * @param {AWSAccessCredentials} awsAccessCredentials aws access credentials to store for a namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    addAWSAccessCredentials(namespace: string, awsAccessCredentials: AWSAccessCredentials, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * add a user to an organization
     * @param {string} organization organization name
     * @param {OrganizationUser} user user to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    addUserToOrganization(organization: string, user: OrganizationUser, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Check if aws keys are set
     * @param {string} namespace namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    checkAWSAccessCredentials(namespace: string, options?: any): Promise<import("axios").AxiosResponse<AWSAccessCredentials[]>>;
    /**
     * Check if aws keys are set by name
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    checkAWSAccessCredentialsByName(namespace: string, name: string, options?: any): Promise<import("axios").AxiosResponse<AWSAccessCredentials>>;
    /**
     * confirm user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    confirmEmail(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * create a user
     * @param {User} user user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    createUser(user: User, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    deleteAWSAccessCredentials(namespace: string, name: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * delete a user
     * @param {string} username username or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    deleteUser(username: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * delete a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    deleteUserFromOrganization(organization: string, username: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * get a user from an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getOrganizationUser(organization: string, username: string, options?: any): Promise<import("axios").AxiosResponse<OrganizationUser>>;
    /**
     * Get session token for user
     * @param {string} [rememberMe] flag to create a token with expiration of 30 days, default is false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getSession(rememberMe?: string, options?: any): Promise<import("axios").AxiosResponse<Token>>;
    /**
     * get a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * get a user
     * @param {string} username username or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserWithUsername(username: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Request an authorization token, optionally taken a TokenRequest object to set parameters on the token
     * @param {TokenRequest} [tokenRequest] token request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    requestToken(tokenRequest?: TokenRequest, options?: any): Promise<import("axios").AxiosResponse<Token>>;
    /**
     * reset user password
     * @param {InlineObject} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetUserPassword(user: InlineObject, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * revoke an authorization token
     * @param {string} token token name or token itself
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    revokeToken(token: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Fetch a list of user tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    tokensGet(options?: any): Promise<import("axios").AxiosResponse<Token[]>>;
    /**
     * Fetch a list of user session tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    tokensSessionGet(options?: any): Promise<import("axios").AxiosResponse<Token[]>>;
    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     * @param {string} namespace namespace
     * @param {string} name name
     * @param {AWSAccessCredentials} awsAccessCredentials aws credentials to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateAWSAccessCredentials(namespace: string, name: string, awsAccessCredentials: AWSAccessCredentials, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * update a user
     * @param {string} username username or id
     * @param {User} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateUser(username: string, user: User, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * update a user in an organization
     * @param {string} organization organization name
     * @param {string} username username to manipulate
     * @param {OrganizationUser} user user details to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateUserInOrganization(organization: string, username: string, user: OrganizationUser, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
