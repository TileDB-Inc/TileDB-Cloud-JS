/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */
import * as capnp from "capnp-ts";
import { Struct as __S } from 'capnp-ts';
export declare const _capnpFileId = "b57d9224b587d87f";
export declare class Query extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _AttributeBufferHeaders: capnp.ListCtor<AttributeBufferHeader>;
    adoptAttributeBufferHeaders(value: capnp.Orphan<capnp.List<AttributeBufferHeader>>): void;
    disownAttributeBufferHeaders(): capnp.Orphan<capnp.List<AttributeBufferHeader>>;
    getAttributeBufferHeaders(): capnp.List<AttributeBufferHeader>;
    hasAttributeBufferHeaders(): boolean;
    initAttributeBufferHeaders(length: number): capnp.List<AttributeBufferHeader>;
    setAttributeBufferHeaders(value: capnp.List<AttributeBufferHeader>): void;
    getLayout(): string;
    setLayout(value: string): void;
    getStatus(): string;
    setStatus(value: string): void;
    getType(): string;
    setType(value: string): void;
    adoptWriter(value: capnp.Orphan<Writer>): void;
    disownWriter(): capnp.Orphan<Writer>;
    getWriter(): Writer;
    hasWriter(): boolean;
    initWriter(): Writer;
    setWriter(value: Writer): void;
    adoptReader(value: capnp.Orphan<QueryReader>): void;
    disownReader(): capnp.Orphan<QueryReader>;
    getReader(): QueryReader;
    hasReader(): boolean;
    initReader(): QueryReader;
    setReader(value: QueryReader): void;
    adoptArray(value: capnp.Orphan<Array>): void;
    disownArray(): capnp.Orphan<Array>;
    getArray(): Array;
    hasArray(): boolean;
    initArray(): Array;
    setArray(value: Array): void;
    getTotalFixedLengthBufferBytes(): capnp.Uint64;
    setTotalFixedLengthBufferBytes(value: capnp.Uint64): void;
    getTotalVarLenBufferBytes(): capnp.Uint64;
    setTotalVarLenBufferBytes(value: capnp.Uint64): void;
    getTotalValidityBufferBytes(): capnp.Uint64;
    setTotalValidityBufferBytes(value: capnp.Uint64): void;
    getVarOffsetsMode(): string;
    setVarOffsetsMode(value: string): void;
    getVarOffsetsAddExtraElement(): boolean;
    setVarOffsetsAddExtraElement(value: boolean): void;
    getVarOffsetsBitsize(): number;
    setVarOffsetsBitsize(value: number): void;
    adoptConfig(value: capnp.Orphan<Config>): void;
    disownConfig(): capnp.Orphan<Config>;
    getConfig(): Config;
    hasConfig(): boolean;
    initConfig(): Config;
    setConfig(value: Config): void;
    adoptStats(value: capnp.Orphan<Stats>): void;
    disownStats(): capnp.Orphan<Stats>;
    getStats(): Stats;
    hasStats(): boolean;
    initStats(): Stats;
    setStats(value: Stats): void;
    toString(): string;
}
export declare class NonEmptyDomain extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    adoptNonEmptyDomain(value: capnp.Orphan<DomainArray>): void;
    disownNonEmptyDomain(): capnp.Orphan<DomainArray>;
    getNonEmptyDomain(): DomainArray;
    hasNonEmptyDomain(): boolean;
    initNonEmptyDomain(): DomainArray;
    setNonEmptyDomain(value: DomainArray): void;
    getIsEmpty(): boolean;
    setIsEmpty(value: boolean): void;
    adoptSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownSizes(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getSizes(): capnp.List<capnp.Uint64>;
    hasSizes(): boolean;
    initSizes(length: number): capnp.List<capnp.Uint64>;
    setSizes(value: capnp.List<capnp.Uint64>): void;
    toString(): string;
}
export declare class NonEmptyDomainList extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _NonEmptyDomains: capnp.ListCtor<NonEmptyDomain>;
    adoptNonEmptyDomains(value: capnp.Orphan<capnp.List<NonEmptyDomain>>): void;
    disownNonEmptyDomains(): capnp.Orphan<capnp.List<NonEmptyDomain>>;
    getNonEmptyDomains(): capnp.List<NonEmptyDomain>;
    hasNonEmptyDomains(): boolean;
    initNonEmptyDomains(length: number): capnp.List<NonEmptyDomain>;
    setNonEmptyDomains(value: capnp.List<NonEmptyDomain>): void;
    toString(): string;
}
export declare class Attribute extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getCellValNum(): number;
    setCellValNum(value: number): void;
    getName(): string;
    setName(value: string): void;
    getType(): string;
    setType(value: string): void;
    adoptFilterPipeline(value: capnp.Orphan<FilterPipeline>): void;
    disownFilterPipeline(): capnp.Orphan<FilterPipeline>;
    getFilterPipeline(): FilterPipeline;
    hasFilterPipeline(): boolean;
    initFilterPipeline(): FilterPipeline;
    setFilterPipeline(value: FilterPipeline): void;
    adoptFillValue(value: capnp.Orphan<capnp.Data>): void;
    disownFillValue(): capnp.Orphan<capnp.Data>;
    getFillValue(): capnp.Data;
    hasFillValue(): boolean;
    initFillValue(length: number): capnp.Data;
    setFillValue(value: capnp.Data): void;
    getNullable(): boolean;
    setNullable(value: boolean): void;
    getFillValueValidity(): boolean;
    setFillValueValidity(value: boolean): void;
    toString(): string;
}
export declare class AttributeBufferHeader extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getName(): string;
    setName(value: string): void;
    getFixedLenBufferSizeInBytes(): capnp.Uint64;
    setFixedLenBufferSizeInBytes(value: capnp.Uint64): void;
    getVarLenBufferSizeInBytes(): capnp.Uint64;
    setVarLenBufferSizeInBytes(value: capnp.Uint64): void;
    getValidityLenBufferSizeInBytes(): capnp.Uint64;
    setValidityLenBufferSizeInBytes(value: capnp.Uint64): void;
    getOriginalFixedLenBufferSizeInBytes(): capnp.Uint64;
    setOriginalFixedLenBufferSizeInBytes(value: capnp.Uint64): void;
    getOriginalVarLenBufferSizeInBytes(): capnp.Uint64;
    setOriginalVarLenBufferSizeInBytes(value: capnp.Uint64): void;
    getOriginalValidityLenBufferSizeInBytes(): capnp.Uint64;
    setOriginalValidityLenBufferSizeInBytes(value: capnp.Uint64): void;
    toString(): string;
}
export declare enum Dimension_TileExtent_Which {
    INT8 = 0,
    UINT8 = 1,
    INT16 = 2,
    UINT16 = 3,
    INT32 = 4,
    UINT32 = 5,
    INT64 = 6,
    UINT64 = 7,
    FLOAT32 = 8,
    FLOAT64 = 9
}
export declare class Dimension_TileExtent extends __S {
    static readonly INT8 = Dimension_TileExtent_Which.INT8;
    static readonly UINT8 = Dimension_TileExtent_Which.UINT8;
    static readonly INT16 = Dimension_TileExtent_Which.INT16;
    static readonly UINT16 = Dimension_TileExtent_Which.UINT16;
    static readonly INT32 = Dimension_TileExtent_Which.INT32;
    static readonly UINT32 = Dimension_TileExtent_Which.UINT32;
    static readonly INT64 = Dimension_TileExtent_Which.INT64;
    static readonly UINT64 = Dimension_TileExtent_Which.UINT64;
    static readonly FLOAT32 = Dimension_TileExtent_Which.FLOAT32;
    static readonly FLOAT64 = Dimension_TileExtent_Which.FLOAT64;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getInt8(): number;
    isInt8(): boolean;
    setInt8(value: number): void;
    getUint8(): number;
    isUint8(): boolean;
    setUint8(value: number): void;
    getInt16(): number;
    isInt16(): boolean;
    setInt16(value: number): void;
    getUint16(): number;
    isUint16(): boolean;
    setUint16(value: number): void;
    getInt32(): number;
    isInt32(): boolean;
    setInt32(value: number): void;
    getUint32(): number;
    isUint32(): boolean;
    setUint32(value: number): void;
    getInt64(): capnp.Int64;
    isInt64(): boolean;
    setInt64(value: capnp.Int64): void;
    getUint64(): capnp.Uint64;
    isUint64(): boolean;
    setUint64(value: capnp.Uint64): void;
    getFloat32(): number;
    isFloat32(): boolean;
    setFloat32(value: number): void;
    getFloat64(): number;
    isFloat64(): boolean;
    setFloat64(value: number): void;
    toString(): string;
    which(): Dimension_TileExtent_Which;
}
export declare class Dimension extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getName(): string;
    setName(value: string): void;
    getNullTileExtent(): boolean;
    setNullTileExtent(value: boolean): void;
    getType(): string;
    setType(value: string): void;
    getTileExtent(): Dimension_TileExtent;
    initTileExtent(): Dimension_TileExtent;
    adoptDomain(value: capnp.Orphan<DomainArray>): void;
    disownDomain(): capnp.Orphan<DomainArray>;
    getDomain(): DomainArray;
    hasDomain(): boolean;
    initDomain(): DomainArray;
    setDomain(value: DomainArray): void;
    adoptFilterPipeline(value: capnp.Orphan<FilterPipeline>): void;
    disownFilterPipeline(): capnp.Orphan<FilterPipeline>;
    getFilterPipeline(): FilterPipeline;
    hasFilterPipeline(): boolean;
    initFilterPipeline(): FilterPipeline;
    setFilterPipeline(value: FilterPipeline): void;
    toString(): string;
}
export declare class Domain extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Dimensions: capnp.ListCtor<Dimension>;
    getCellOrder(): string;
    setCellOrder(value: string): void;
    adoptDimensions(value: capnp.Orphan<capnp.List<Dimension>>): void;
    disownDimensions(): capnp.Orphan<capnp.List<Dimension>>;
    getDimensions(): capnp.List<Dimension>;
    hasDimensions(): boolean;
    initDimensions(length: number): capnp.List<Dimension>;
    setDimensions(value: capnp.List<Dimension>): void;
    getTileOrder(): string;
    setTileOrder(value: string): void;
    getType(): string;
    setType(value: string): void;
    toString(): string;
}
export declare class Array extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _FragmentMetadataAll: capnp.ListCtor<FragmentMetadata>;
    getEndTimestamp(): capnp.Uint64;
    setEndTimestamp(value: capnp.Uint64): void;
    getQueryType(): string;
    setQueryType(value: string): void;
    getUri(): string;
    setUri(value: string): void;
    getStartTimestamp(): capnp.Uint64;
    setStartTimestamp(value: capnp.Uint64): void;
    adoptArraySchemaLatest(value: capnp.Orphan<ArraySchema>): void;
    disownArraySchemaLatest(): capnp.Orphan<ArraySchema>;
    getArraySchemaLatest(): ArraySchema;
    hasArraySchemaLatest(): boolean;
    initArraySchemaLatest(): ArraySchema;
    setArraySchemaLatest(value: ArraySchema): void;
    adoptArraySchemasAll(value: capnp.Orphan<ArraySchemaMap>): void;
    disownArraySchemasAll(): capnp.Orphan<ArraySchemaMap>;
    getArraySchemasAll(): ArraySchemaMap;
    hasArraySchemasAll(): boolean;
    initArraySchemasAll(): ArraySchemaMap;
    setArraySchemasAll(value: ArraySchemaMap): void;
    adoptNonEmptyDomain(value: capnp.Orphan<NonEmptyDomainList>): void;
    disownNonEmptyDomain(): capnp.Orphan<NonEmptyDomainList>;
    getNonEmptyDomain(): NonEmptyDomainList;
    hasNonEmptyDomain(): boolean;
    initNonEmptyDomain(): NonEmptyDomainList;
    setNonEmptyDomain(value: NonEmptyDomainList): void;
    adoptArrayMetadata(value: capnp.Orphan<ArrayMetadata>): void;
    disownArrayMetadata(): capnp.Orphan<ArrayMetadata>;
    getArrayMetadata(): ArrayMetadata;
    hasArrayMetadata(): boolean;
    initArrayMetadata(): ArrayMetadata;
    setArrayMetadata(value: ArrayMetadata): void;
    adoptArrayDirectory(value: capnp.Orphan<ArrayDirectory>): void;
    disownArrayDirectory(): capnp.Orphan<ArrayDirectory>;
    getArrayDirectory(): ArrayDirectory;
    hasArrayDirectory(): boolean;
    initArrayDirectory(): ArrayDirectory;
    setArrayDirectory(value: ArrayDirectory): void;
    adoptFragmentMetadataAll(value: capnp.Orphan<capnp.List<FragmentMetadata>>): void;
    disownFragmentMetadataAll(): capnp.Orphan<capnp.List<FragmentMetadata>>;
    getFragmentMetadataAll(): capnp.List<FragmentMetadata>;
    hasFragmentMetadataAll(): boolean;
    initFragmentMetadataAll(length: number): capnp.List<FragmentMetadata>;
    setFragmentMetadataAll(value: capnp.List<FragmentMetadata>): void;
    getOpenedAtEndTimestamp(): capnp.Uint64;
    setOpenedAtEndTimestamp(value: capnp.Uint64): void;
    toString(): string;
}
export declare class ArrayDirectory_TimestampedURI extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getUri(): string;
    setUri(value: string): void;
    getTimestampStart(): capnp.Uint64;
    setTimestampStart(value: capnp.Uint64): void;
    getTimestampEnd(): capnp.Uint64;
    setTimestampEnd(value: capnp.Uint64): void;
    toString(): string;
}
export declare class ArrayDirectory_DeleteAndUpdateTileLocation extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getUri(): string;
    setUri(value: string): void;
    getConditionMarker(): string;
    setConditionMarker(value: string): void;
    getOffset(): capnp.Uint64;
    setOffset(value: capnp.Uint64): void;
    toString(): string;
}
export declare class ArrayDirectory extends __S {
    static readonly TimestampedURI: typeof ArrayDirectory_TimestampedURI;
    static readonly DeleteAndUpdateTileLocation: typeof ArrayDirectory_DeleteAndUpdateTileLocation;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _ArrayMetaUris: capnp.ListCtor<ArrayDirectory_TimestampedURI>;
    static _DeleteAndUpdateTileLocation: capnp.ListCtor<ArrayDirectory_DeleteAndUpdateTileLocation>;
    adoptUnfilteredFragmentUris(value: capnp.Orphan<capnp.List<string>>): void;
    disownUnfilteredFragmentUris(): capnp.Orphan<capnp.List<string>>;
    getUnfilteredFragmentUris(): capnp.List<string>;
    hasUnfilteredFragmentUris(): boolean;
    initUnfilteredFragmentUris(length: number): capnp.List<string>;
    setUnfilteredFragmentUris(value: capnp.List<string>): void;
    adoptConsolidatedCommitUris(value: capnp.Orphan<capnp.List<string>>): void;
    disownConsolidatedCommitUris(): capnp.Orphan<capnp.List<string>>;
    getConsolidatedCommitUris(): capnp.List<string>;
    hasConsolidatedCommitUris(): boolean;
    initConsolidatedCommitUris(length: number): capnp.List<string>;
    setConsolidatedCommitUris(value: capnp.List<string>): void;
    adoptArraySchemaUris(value: capnp.Orphan<capnp.List<string>>): void;
    disownArraySchemaUris(): capnp.Orphan<capnp.List<string>>;
    getArraySchemaUris(): capnp.List<string>;
    hasArraySchemaUris(): boolean;
    initArraySchemaUris(length: number): capnp.List<string>;
    setArraySchemaUris(value: capnp.List<string>): void;
    getLatestArraySchemaUri(): string;
    setLatestArraySchemaUri(value: string): void;
    adoptArrayMetaUrisToVacuum(value: capnp.Orphan<capnp.List<string>>): void;
    disownArrayMetaUrisToVacuum(): capnp.Orphan<capnp.List<string>>;
    getArrayMetaUrisToVacuum(): capnp.List<string>;
    hasArrayMetaUrisToVacuum(): boolean;
    initArrayMetaUrisToVacuum(length: number): capnp.List<string>;
    setArrayMetaUrisToVacuum(value: capnp.List<string>): void;
    adoptArrayMetaVacUrisToVacuum(value: capnp.Orphan<capnp.List<string>>): void;
    disownArrayMetaVacUrisToVacuum(): capnp.Orphan<capnp.List<string>>;
    getArrayMetaVacUrisToVacuum(): capnp.List<string>;
    hasArrayMetaVacUrisToVacuum(): boolean;
    initArrayMetaVacUrisToVacuum(length: number): capnp.List<string>;
    setArrayMetaVacUrisToVacuum(value: capnp.List<string>): void;
    adoptCommitUrisToConsolidate(value: capnp.Orphan<capnp.List<string>>): void;
    disownCommitUrisToConsolidate(): capnp.Orphan<capnp.List<string>>;
    getCommitUrisToConsolidate(): capnp.List<string>;
    hasCommitUrisToConsolidate(): boolean;
    initCommitUrisToConsolidate(length: number): capnp.List<string>;
    setCommitUrisToConsolidate(value: capnp.List<string>): void;
    adoptCommitUrisToVacuum(value: capnp.Orphan<capnp.List<string>>): void;
    disownCommitUrisToVacuum(): capnp.Orphan<capnp.List<string>>;
    getCommitUrisToVacuum(): capnp.List<string>;
    hasCommitUrisToVacuum(): boolean;
    initCommitUrisToVacuum(length: number): capnp.List<string>;
    setCommitUrisToVacuum(value: capnp.List<string>): void;
    adoptConsolidatedCommitUrisToVacuum(value: capnp.Orphan<capnp.List<string>>): void;
    disownConsolidatedCommitUrisToVacuum(): capnp.Orphan<capnp.List<string>>;
    getConsolidatedCommitUrisToVacuum(): capnp.List<string>;
    hasConsolidatedCommitUrisToVacuum(): boolean;
    initConsolidatedCommitUrisToVacuum(length: number): capnp.List<string>;
    setConsolidatedCommitUrisToVacuum(value: capnp.List<string>): void;
    adoptArrayMetaUris(value: capnp.Orphan<capnp.List<ArrayDirectory_TimestampedURI>>): void;
    disownArrayMetaUris(): capnp.Orphan<capnp.List<ArrayDirectory_TimestampedURI>>;
    getArrayMetaUris(): capnp.List<ArrayDirectory_TimestampedURI>;
    hasArrayMetaUris(): boolean;
    initArrayMetaUris(length: number): capnp.List<ArrayDirectory_TimestampedURI>;
    setArrayMetaUris(value: capnp.List<ArrayDirectory_TimestampedURI>): void;
    adoptFragmentMetaUris(value: capnp.Orphan<capnp.List<string>>): void;
    disownFragmentMetaUris(): capnp.Orphan<capnp.List<string>>;
    getFragmentMetaUris(): capnp.List<string>;
    hasFragmentMetaUris(): boolean;
    initFragmentMetaUris(length: number): capnp.List<string>;
    setFragmentMetaUris(value: capnp.List<string>): void;
    adoptDeleteAndUpdateTileLocation(value: capnp.Orphan<capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation>>): void;
    disownDeleteAndUpdateTileLocation(): capnp.Orphan<capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation>>;
    getDeleteAndUpdateTileLocation(): capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation>;
    hasDeleteAndUpdateTileLocation(): boolean;
    initDeleteAndUpdateTileLocation(length: number): capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation>;
    setDeleteAndUpdateTileLocation(value: capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation>): void;
    getTimestampStart(): capnp.Uint64;
    setTimestampStart(value: capnp.Uint64): void;
    getTimestampEnd(): capnp.Uint64;
    setTimestampEnd(value: capnp.Uint64): void;
    toString(): string;
}
export declare class FragmentMetadata_GenericTileOffsets extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getRtree(): capnp.Uint64;
    setRtree(value: capnp.Uint64): void;
    adoptTileOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTileOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTileOffsets(): capnp.List<capnp.Uint64>;
    hasTileOffsets(): boolean;
    initTileOffsets(length: number): capnp.List<capnp.Uint64>;
    setTileOffsets(value: capnp.List<capnp.Uint64>): void;
    adoptTileVarOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTileVarOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTileVarOffsets(): capnp.List<capnp.Uint64>;
    hasTileVarOffsets(): boolean;
    initTileVarOffsets(length: number): capnp.List<capnp.Uint64>;
    setTileVarOffsets(value: capnp.List<capnp.Uint64>): void;
    adoptTileVarSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTileVarSizes(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTileVarSizes(): capnp.List<capnp.Uint64>;
    hasTileVarSizes(): boolean;
    initTileVarSizes(length: number): capnp.List<capnp.Uint64>;
    setTileVarSizes(value: capnp.List<capnp.Uint64>): void;
    adoptTileValidityOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTileValidityOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTileValidityOffsets(): capnp.List<capnp.Uint64>;
    hasTileValidityOffsets(): boolean;
    initTileValidityOffsets(length: number): capnp.List<capnp.Uint64>;
    setTileValidityOffsets(value: capnp.List<capnp.Uint64>): void;
    adoptTileMinOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTileMinOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTileMinOffsets(): capnp.List<capnp.Uint64>;
    hasTileMinOffsets(): boolean;
    initTileMinOffsets(length: number): capnp.List<capnp.Uint64>;
    setTileMinOffsets(value: capnp.List<capnp.Uint64>): void;
    adoptTileMaxOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTileMaxOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTileMaxOffsets(): capnp.List<capnp.Uint64>;
    hasTileMaxOffsets(): boolean;
    initTileMaxOffsets(length: number): capnp.List<capnp.Uint64>;
    setTileMaxOffsets(value: capnp.List<capnp.Uint64>): void;
    adoptTileSumOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTileSumOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTileSumOffsets(): capnp.List<capnp.Uint64>;
    hasTileSumOffsets(): boolean;
    initTileSumOffsets(length: number): capnp.List<capnp.Uint64>;
    setTileSumOffsets(value: capnp.List<capnp.Uint64>): void;
    adoptTileNullCountOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTileNullCountOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTileNullCountOffsets(): capnp.List<capnp.Uint64>;
    hasTileNullCountOffsets(): boolean;
    initTileNullCountOffsets(length: number): capnp.List<capnp.Uint64>;
    setTileNullCountOffsets(value: capnp.List<capnp.Uint64>): void;
    getFragmentMinMaxSumNullCountOffset(): capnp.Uint64;
    setFragmentMinMaxSumNullCountOffset(value: capnp.Uint64): void;
    getProcessedConditionsOffsets(): capnp.Uint64;
    setProcessedConditionsOffsets(value: capnp.Uint64): void;
    toString(): string;
}
export declare class FragmentMetadata extends __S {
    static readonly GenericTileOffsets: typeof FragmentMetadata_GenericTileOffsets;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _TileOffsets: capnp.ListCtor<capnp.List<capnp.Uint64>>;
    static _TileVarOffsets: capnp.ListCtor<capnp.List<capnp.Uint64>>;
    static _TileVarSizes: capnp.ListCtor<capnp.List<capnp.Uint64>>;
    static _TileValidityOffsets: capnp.ListCtor<capnp.List<capnp.Uint64>>;
    static _TileMinBuffer: capnp.ListCtor<capnp.List<number>>;
    static _TileMinVarBuffer: capnp.ListCtor<capnp.List<number>>;
    static _TileMaxBuffer: capnp.ListCtor<capnp.List<number>>;
    static _TileMaxVarBuffer: capnp.ListCtor<capnp.List<number>>;
    static _TileSums: capnp.ListCtor<capnp.List<number>>;
    static _TileNullCounts: capnp.ListCtor<capnp.List<capnp.Uint64>>;
    static _FragmentMins: capnp.ListCtor<capnp.List<number>>;
    static _FragmentMaxs: capnp.ListCtor<capnp.List<number>>;
    adoptFileSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownFileSizes(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getFileSizes(): capnp.List<capnp.Uint64>;
    hasFileSizes(): boolean;
    initFileSizes(length: number): capnp.List<capnp.Uint64>;
    setFileSizes(value: capnp.List<capnp.Uint64>): void;
    adoptFileVarSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownFileVarSizes(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getFileVarSizes(): capnp.List<capnp.Uint64>;
    hasFileVarSizes(): boolean;
    initFileVarSizes(length: number): capnp.List<capnp.Uint64>;
    setFileVarSizes(value: capnp.List<capnp.Uint64>): void;
    adoptFileValiditySizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownFileValiditySizes(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getFileValiditySizes(): capnp.List<capnp.Uint64>;
    hasFileValiditySizes(): boolean;
    initFileValiditySizes(length: number): capnp.List<capnp.Uint64>;
    setFileValiditySizes(value: capnp.List<capnp.Uint64>): void;
    getFragmentUri(): string;
    setFragmentUri(value: string): void;
    getHasTimestamps(): boolean;
    setHasTimestamps(value: boolean): void;
    getHasDeleteMeta(): boolean;
    setHasDeleteMeta(value: boolean): void;
    getSparseTileNum(): capnp.Uint64;
    setSparseTileNum(value: capnp.Uint64): void;
    getTileIndexBase(): capnp.Uint64;
    setTileIndexBase(value: capnp.Uint64): void;
    adoptTileOffsets(value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>): void;
    disownTileOffsets(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>;
    getTileOffsets(): capnp.List<capnp.List<capnp.Uint64>>;
    hasTileOffsets(): boolean;
    initTileOffsets(length: number): capnp.List<capnp.List<capnp.Uint64>>;
    setTileOffsets(value: capnp.List<capnp.List<capnp.Uint64>>): void;
    adoptTileVarOffsets(value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>): void;
    disownTileVarOffsets(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>;
    getTileVarOffsets(): capnp.List<capnp.List<capnp.Uint64>>;
    hasTileVarOffsets(): boolean;
    initTileVarOffsets(length: number): capnp.List<capnp.List<capnp.Uint64>>;
    setTileVarOffsets(value: capnp.List<capnp.List<capnp.Uint64>>): void;
    adoptTileVarSizes(value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>): void;
    disownTileVarSizes(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>;
    getTileVarSizes(): capnp.List<capnp.List<capnp.Uint64>>;
    hasTileVarSizes(): boolean;
    initTileVarSizes(length: number): capnp.List<capnp.List<capnp.Uint64>>;
    setTileVarSizes(value: capnp.List<capnp.List<capnp.Uint64>>): void;
    adoptTileValidityOffsets(value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>): void;
    disownTileValidityOffsets(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>;
    getTileValidityOffsets(): capnp.List<capnp.List<capnp.Uint64>>;
    hasTileValidityOffsets(): boolean;
    initTileValidityOffsets(length: number): capnp.List<capnp.List<capnp.Uint64>>;
    setTileValidityOffsets(value: capnp.List<capnp.List<capnp.Uint64>>): void;
    adoptTileMinBuffer(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void;
    disownTileMinBuffer(): capnp.Orphan<capnp.List<capnp.List<number>>>;
    getTileMinBuffer(): capnp.List<capnp.List<number>>;
    hasTileMinBuffer(): boolean;
    initTileMinBuffer(length: number): capnp.List<capnp.List<number>>;
    setTileMinBuffer(value: capnp.List<capnp.List<number>>): void;
    adoptTileMinVarBuffer(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void;
    disownTileMinVarBuffer(): capnp.Orphan<capnp.List<capnp.List<number>>>;
    getTileMinVarBuffer(): capnp.List<capnp.List<number>>;
    hasTileMinVarBuffer(): boolean;
    initTileMinVarBuffer(length: number): capnp.List<capnp.List<number>>;
    setTileMinVarBuffer(value: capnp.List<capnp.List<number>>): void;
    adoptTileMaxBuffer(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void;
    disownTileMaxBuffer(): capnp.Orphan<capnp.List<capnp.List<number>>>;
    getTileMaxBuffer(): capnp.List<capnp.List<number>>;
    hasTileMaxBuffer(): boolean;
    initTileMaxBuffer(length: number): capnp.List<capnp.List<number>>;
    setTileMaxBuffer(value: capnp.List<capnp.List<number>>): void;
    adoptTileMaxVarBuffer(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void;
    disownTileMaxVarBuffer(): capnp.Orphan<capnp.List<capnp.List<number>>>;
    getTileMaxVarBuffer(): capnp.List<capnp.List<number>>;
    hasTileMaxVarBuffer(): boolean;
    initTileMaxVarBuffer(length: number): capnp.List<capnp.List<number>>;
    setTileMaxVarBuffer(value: capnp.List<capnp.List<number>>): void;
    adoptTileSums(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void;
    disownTileSums(): capnp.Orphan<capnp.List<capnp.List<number>>>;
    getTileSums(): capnp.List<capnp.List<number>>;
    hasTileSums(): boolean;
    initTileSums(length: number): capnp.List<capnp.List<number>>;
    setTileSums(value: capnp.List<capnp.List<number>>): void;
    adoptTileNullCounts(value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>): void;
    disownTileNullCounts(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>;
    getTileNullCounts(): capnp.List<capnp.List<capnp.Uint64>>;
    hasTileNullCounts(): boolean;
    initTileNullCounts(length: number): capnp.List<capnp.List<capnp.Uint64>>;
    setTileNullCounts(value: capnp.List<capnp.List<capnp.Uint64>>): void;
    adoptFragmentMins(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void;
    disownFragmentMins(): capnp.Orphan<capnp.List<capnp.List<number>>>;
    getFragmentMins(): capnp.List<capnp.List<number>>;
    hasFragmentMins(): boolean;
    initFragmentMins(length: number): capnp.List<capnp.List<number>>;
    setFragmentMins(value: capnp.List<capnp.List<number>>): void;
    adoptFragmentMaxs(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void;
    disownFragmentMaxs(): capnp.Orphan<capnp.List<capnp.List<number>>>;
    getFragmentMaxs(): capnp.List<capnp.List<number>>;
    hasFragmentMaxs(): boolean;
    initFragmentMaxs(length: number): capnp.List<capnp.List<number>>;
    setFragmentMaxs(value: capnp.List<capnp.List<number>>): void;
    adoptFragmentSums(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownFragmentSums(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getFragmentSums(): capnp.List<capnp.Uint64>;
    hasFragmentSums(): boolean;
    initFragmentSums(length: number): capnp.List<capnp.Uint64>;
    setFragmentSums(value: capnp.List<capnp.Uint64>): void;
    adoptFragmentNullCounts(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownFragmentNullCounts(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getFragmentNullCounts(): capnp.List<capnp.Uint64>;
    hasFragmentNullCounts(): boolean;
    initFragmentNullCounts(length: number): capnp.List<capnp.Uint64>;
    setFragmentNullCounts(value: capnp.List<capnp.Uint64>): void;
    getVersion(): number;
    setVersion(value: number): void;
    adoptTimestampRange(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTimestampRange(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTimestampRange(): capnp.List<capnp.Uint64>;
    hasTimestampRange(): boolean;
    initTimestampRange(length: number): capnp.List<capnp.Uint64>;
    setTimestampRange(value: capnp.List<capnp.Uint64>): void;
    getLastTileCellNum(): capnp.Uint64;
    setLastTileCellNum(value: capnp.Uint64): void;
    adoptNonEmptyDomain(value: capnp.Orphan<NonEmptyDomainList>): void;
    disownNonEmptyDomain(): capnp.Orphan<NonEmptyDomainList>;
    getNonEmptyDomain(): NonEmptyDomainList;
    hasNonEmptyDomain(): boolean;
    initNonEmptyDomain(): NonEmptyDomainList;
    setNonEmptyDomain(value: NonEmptyDomainList): void;
    adoptRtree(value: capnp.Orphan<capnp.Data>): void;
    disownRtree(): capnp.Orphan<capnp.Data>;
    getRtree(): capnp.Data;
    hasRtree(): boolean;
    initRtree(length: number): capnp.Data;
    setRtree(value: capnp.Data): void;
    getHasConsolidatedFooter(): boolean;
    setHasConsolidatedFooter(value: boolean): void;
    adoptGtOffsets(value: capnp.Orphan<FragmentMetadata_GenericTileOffsets>): void;
    disownGtOffsets(): capnp.Orphan<FragmentMetadata_GenericTileOffsets>;
    getGtOffsets(): FragmentMetadata_GenericTileOffsets;
    hasGtOffsets(): boolean;
    initGtOffsets(): FragmentMetadata_GenericTileOffsets;
    setGtOffsets(value: FragmentMetadata_GenericTileOffsets): void;
    toString(): string;
}
export declare class ArrayOpen extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    adoptConfig(value: capnp.Orphan<Config>): void;
    disownConfig(): capnp.Orphan<Config>;
    getConfig(): Config;
    hasConfig(): boolean;
    initConfig(): Config;
    setConfig(value: Config): void;
    getQueryType(): string;
    setQueryType(value: string): void;
    toString(): string;
}
export declare class ArraySchema extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Attributes: capnp.ListCtor<Attribute>;
    getArrayType(): string;
    setArrayType(value: string): void;
    adoptAttributes(value: capnp.Orphan<capnp.List<Attribute>>): void;
    disownAttributes(): capnp.Orphan<capnp.List<Attribute>>;
    getAttributes(): capnp.List<Attribute>;
    hasAttributes(): boolean;
    initAttributes(length: number): capnp.List<Attribute>;
    setAttributes(value: capnp.List<Attribute>): void;
    getCapacity(): capnp.Uint64;
    setCapacity(value: capnp.Uint64): void;
    getCellOrder(): string;
    setCellOrder(value: string): void;
    adoptCoordsFilterPipeline(value: capnp.Orphan<FilterPipeline>): void;
    disownCoordsFilterPipeline(): capnp.Orphan<FilterPipeline>;
    getCoordsFilterPipeline(): FilterPipeline;
    hasCoordsFilterPipeline(): boolean;
    initCoordsFilterPipeline(): FilterPipeline;
    setCoordsFilterPipeline(value: FilterPipeline): void;
    adoptDomain(value: capnp.Orphan<Domain>): void;
    disownDomain(): capnp.Orphan<Domain>;
    getDomain(): Domain;
    hasDomain(): boolean;
    initDomain(): Domain;
    setDomain(value: Domain): void;
    adoptOffsetFilterPipeline(value: capnp.Orphan<FilterPipeline>): void;
    disownOffsetFilterPipeline(): capnp.Orphan<FilterPipeline>;
    getOffsetFilterPipeline(): FilterPipeline;
    hasOffsetFilterPipeline(): boolean;
    initOffsetFilterPipeline(): FilterPipeline;
    setOffsetFilterPipeline(value: FilterPipeline): void;
    getTileOrder(): string;
    setTileOrder(value: string): void;
    getUri(): string;
    setUri(value: string): void;
    adoptVersion(value: capnp.Orphan<capnp.List<number>>): void;
    disownVersion(): capnp.Orphan<capnp.List<number>>;
    getVersion(): capnp.List<number>;
    hasVersion(): boolean;
    initVersion(length: number): capnp.List<number>;
    setVersion(value: capnp.List<number>): void;
    getAllowsDuplicates(): boolean;
    setAllowsDuplicates(value: boolean): void;
    adoptValidityFilterPipeline(value: capnp.Orphan<FilterPipeline>): void;
    disownValidityFilterPipeline(): capnp.Orphan<FilterPipeline>;
    getValidityFilterPipeline(): FilterPipeline;
    hasValidityFilterPipeline(): boolean;
    initValidityFilterPipeline(): FilterPipeline;
    setValidityFilterPipeline(value: FilterPipeline): void;
    getName(): string;
    setName(value: string): void;
    adoptTimestampRange(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownTimestampRange(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getTimestampRange(): capnp.List<capnp.Uint64>;
    hasTimestampRange(): boolean;
    initTimestampRange(length: number): capnp.List<capnp.Uint64>;
    setTimestampRange(value: capnp.List<capnp.Uint64>): void;
    toString(): string;
}
export declare class FloatScaleConfig extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getScale(): number;
    setScale(value: number): void;
    getOffset(): number;
    setOffset(value: number): void;
    getByteWidth(): capnp.Uint64;
    setByteWidth(value: capnp.Uint64): void;
    toString(): string;
}
export declare enum Filter_Data_Which {
    TEXT = 0,
    BYTES = 1,
    INT8 = 2,
    UINT8 = 3,
    INT16 = 4,
    UINT16 = 5,
    INT32 = 6,
    UINT32 = 7,
    INT64 = 8,
    UINT64 = 9,
    FLOAT32 = 10,
    FLOAT64 = 11
}
export declare class Filter_Data extends __S {
    static readonly TEXT = Filter_Data_Which.TEXT;
    static readonly BYTES = Filter_Data_Which.BYTES;
    static readonly INT8 = Filter_Data_Which.INT8;
    static readonly UINT8 = Filter_Data_Which.UINT8;
    static readonly INT16 = Filter_Data_Which.INT16;
    static readonly UINT16 = Filter_Data_Which.UINT16;
    static readonly INT32 = Filter_Data_Which.INT32;
    static readonly UINT32 = Filter_Data_Which.UINT32;
    static readonly INT64 = Filter_Data_Which.INT64;
    static readonly UINT64 = Filter_Data_Which.UINT64;
    static readonly FLOAT32 = Filter_Data_Which.FLOAT32;
    static readonly FLOAT64 = Filter_Data_Which.FLOAT64;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getText(): string;
    isText(): boolean;
    setText(value: string): void;
    adoptBytes(value: capnp.Orphan<capnp.Data>): void;
    disownBytes(): capnp.Orphan<capnp.Data>;
    getBytes(): capnp.Data;
    hasBytes(): boolean;
    initBytes(length: number): capnp.Data;
    isBytes(): boolean;
    setBytes(value: capnp.Data): void;
    getInt8(): number;
    isInt8(): boolean;
    setInt8(value: number): void;
    getUint8(): number;
    isUint8(): boolean;
    setUint8(value: number): void;
    getInt16(): number;
    isInt16(): boolean;
    setInt16(value: number): void;
    getUint16(): number;
    isUint16(): boolean;
    setUint16(value: number): void;
    getInt32(): number;
    isInt32(): boolean;
    setInt32(value: number): void;
    getUint32(): number;
    isUint32(): boolean;
    setUint32(value: number): void;
    getInt64(): capnp.Int64;
    isInt64(): boolean;
    setInt64(value: capnp.Int64): void;
    getUint64(): capnp.Uint64;
    isUint64(): boolean;
    setUint64(value: capnp.Uint64): void;
    getFloat32(): number;
    isFloat32(): boolean;
    setFloat32(value: number): void;
    getFloat64(): number;
    isFloat64(): boolean;
    setFloat64(value: number): void;
    toString(): string;
    which(): Filter_Data_Which;
}
export declare class Filter extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getType(): string;
    setType(value: string): void;
    getData(): Filter_Data;
    initData(): Filter_Data;
    adoptFloatScaleConfig(value: capnp.Orphan<FloatScaleConfig>): void;
    disownFloatScaleConfig(): capnp.Orphan<FloatScaleConfig>;
    getFloatScaleConfig(): FloatScaleConfig;
    hasFloatScaleConfig(): boolean;
    initFloatScaleConfig(): FloatScaleConfig;
    setFloatScaleConfig(value: FloatScaleConfig): void;
    toString(): string;
}
export declare class FilterPipeline extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Filters: capnp.ListCtor<Filter>;
    adoptFilters(value: capnp.Orphan<capnp.List<Filter>>): void;
    disownFilters(): capnp.Orphan<capnp.List<Filter>>;
    getFilters(): capnp.List<Filter>;
    hasFilters(): boolean;
    initFilters(length: number): capnp.List<Filter>;
    setFilters(value: capnp.List<Filter>): void;
    toString(): string;
}
export declare class ArraySchemaMap_Entry extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getKey(): string;
    setKey(value: string): void;
    adoptValue(value: capnp.Orphan<ArraySchema>): void;
    disownValue(): capnp.Orphan<ArraySchema>;
    getValue(): ArraySchema;
    hasValue(): boolean;
    initValue(): ArraySchema;
    setValue(value: ArraySchema): void;
    toString(): string;
}
export declare class ArraySchemaMap extends __S {
    static readonly Entry: typeof ArraySchemaMap_Entry;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Entries: capnp.ListCtor<ArraySchemaMap_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<ArraySchemaMap_Entry>>): void;
    disownEntries(): capnp.Orphan<capnp.List<ArraySchemaMap_Entry>>;
    getEntries(): capnp.List<ArraySchemaMap_Entry>;
    hasEntries(): boolean;
    initEntries(length: number): capnp.List<ArraySchemaMap_Entry>;
    setEntries(value: capnp.List<ArraySchemaMap_Entry>): void;
    toString(): string;
}
export declare class Map_Entry extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    adoptKey(value: capnp.Orphan<capnp.Pointer>): void;
    disownKey(): capnp.Orphan<capnp.Pointer>;
    getKey(): capnp.Pointer;
    hasKey(): boolean;
    setKey(value: capnp.Pointer): void;
    adoptValue(value: capnp.Orphan<capnp.Pointer>): void;
    disownValue(): capnp.Orphan<capnp.Pointer>;
    getValue(): capnp.Pointer;
    hasValue(): boolean;
    setValue(value: capnp.Pointer): void;
    toString(): string;
}
export declare class Map extends __S {
    static readonly Entry: typeof Map_Entry;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Entries: capnp.ListCtor<Map_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<Map_Entry>>): void;
    disownEntries(): capnp.Orphan<capnp.List<Map_Entry>>;
    getEntries(): capnp.List<Map_Entry>;
    hasEntries(): boolean;
    initEntries(length: number): capnp.List<Map_Entry>;
    setEntries(value: capnp.List<Map_Entry>): void;
    toString(): string;
}
export declare class KV extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getKey(): string;
    setKey(value: string): void;
    getValue(): string;
    setValue(value: string): void;
    toString(): string;
}
export declare class Config extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Entries: capnp.ListCtor<KV>;
    adoptEntries(value: capnp.Orphan<capnp.List<KV>>): void;
    disownEntries(): capnp.Orphan<capnp.List<KV>>;
    getEntries(): capnp.List<KV>;
    hasEntries(): boolean;
    initEntries(length: number): capnp.List<KV>;
    setEntries(value: capnp.List<KV>): void;
    toString(): string;
}
export declare class Stats extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    adoptTimers(value: capnp.Orphan<MapFloat64>): void;
    disownTimers(): capnp.Orphan<MapFloat64>;
    getTimers(): MapFloat64;
    hasTimers(): boolean;
    initTimers(): MapFloat64;
    setTimers(value: MapFloat64): void;
    adoptCounters(value: capnp.Orphan<MapUInt64>): void;
    disownCounters(): capnp.Orphan<MapUInt64>;
    getCounters(): MapUInt64;
    hasCounters(): boolean;
    initCounters(): MapUInt64;
    setCounters(value: MapUInt64): void;
    toString(): string;
}
export declare class Writer extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getCheckCoordDups(): boolean;
    setCheckCoordDups(value: boolean): void;
    getCheckCoordOOB(): boolean;
    setCheckCoordOOB(value: boolean): void;
    getDedupCoords(): boolean;
    setDedupCoords(value: boolean): void;
    adoptSubarray(value: capnp.Orphan<DomainArray>): void;
    disownSubarray(): capnp.Orphan<DomainArray>;
    getSubarray(): DomainArray;
    hasSubarray(): boolean;
    initSubarray(): DomainArray;
    setSubarray(value: DomainArray): void;
    adoptSubarrayRanges(value: capnp.Orphan<Subarray>): void;
    disownSubarrayRanges(): capnp.Orphan<Subarray>;
    getSubarrayRanges(): Subarray;
    hasSubarrayRanges(): boolean;
    initSubarrayRanges(): Subarray;
    setSubarrayRanges(value: Subarray): void;
    adoptStats(value: capnp.Orphan<Stats>): void;
    disownStats(): capnp.Orphan<Stats>;
    getStats(): Stats;
    hasStats(): boolean;
    initStats(): Stats;
    setStats(value: Stats): void;
    toString(): string;
}
export declare class QueryReader extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getLayout(): string;
    setLayout(value: string): void;
    adoptSubarray(value: capnp.Orphan<Subarray>): void;
    disownSubarray(): capnp.Orphan<Subarray>;
    getSubarray(): Subarray;
    hasSubarray(): boolean;
    initSubarray(): Subarray;
    setSubarray(value: Subarray): void;
    adoptReadState(value: capnp.Orphan<ReadState>): void;
    disownReadState(): capnp.Orphan<ReadState>;
    getReadState(): ReadState;
    hasReadState(): boolean;
    initReadState(): ReadState;
    setReadState(value: ReadState): void;
    adoptCondition(value: capnp.Orphan<Condition>): void;
    disownCondition(): capnp.Orphan<Condition>;
    getCondition(): Condition;
    hasCondition(): boolean;
    initCondition(): Condition;
    setCondition(value: Condition): void;
    adoptStats(value: capnp.Orphan<Stats>): void;
    disownStats(): capnp.Orphan<Stats>;
    getStats(): Stats;
    hasStats(): boolean;
    initStats(): Stats;
    setStats(value: Stats): void;
    toString(): string;
}
export declare class SubarrayRanges extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getType(): string;
    setType(value: string): void;
    getHasDefaultRange(): boolean;
    setHasDefaultRange(value: boolean): void;
    adoptBuffer(value: capnp.Orphan<capnp.Data>): void;
    disownBuffer(): capnp.Orphan<capnp.Data>;
    getBuffer(): capnp.Data;
    hasBuffer(): boolean;
    initBuffer(length: number): capnp.Data;
    setBuffer(value: capnp.Data): void;
    adoptBufferSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownBufferSizes(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getBufferSizes(): capnp.List<capnp.Uint64>;
    hasBufferSizes(): boolean;
    initBufferSizes(length: number): capnp.List<capnp.Uint64>;
    setBufferSizes(value: capnp.List<capnp.Uint64>): void;
    adoptBufferStartSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownBufferStartSizes(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getBufferStartSizes(): capnp.List<capnp.Uint64>;
    hasBufferStartSizes(): boolean;
    initBufferStartSizes(length: number): capnp.List<capnp.Uint64>;
    setBufferStartSizes(value: capnp.List<capnp.Uint64>): void;
    toString(): string;
}
export declare class Subarray extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Ranges: capnp.ListCtor<SubarrayRanges>;
    getLayout(): string;
    setLayout(value: string): void;
    adoptRanges(value: capnp.Orphan<capnp.List<SubarrayRanges>>): void;
    disownRanges(): capnp.Orphan<capnp.List<SubarrayRanges>>;
    getRanges(): capnp.List<SubarrayRanges>;
    hasRanges(): boolean;
    initRanges(length: number): capnp.List<SubarrayRanges>;
    setRanges(value: capnp.List<SubarrayRanges>): void;
    adoptStats(value: capnp.Orphan<Stats>): void;
    disownStats(): capnp.Orphan<Stats>;
    getStats(): Stats;
    hasStats(): boolean;
    initStats(): Stats;
    setStats(value: Stats): void;
    toString(): string;
}
export declare class SubarrayPartitioner_PartitionInfo extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    adoptSubarray(value: capnp.Orphan<Subarray>): void;
    disownSubarray(): capnp.Orphan<Subarray>;
    getSubarray(): Subarray;
    hasSubarray(): boolean;
    initSubarray(): Subarray;
    setSubarray(value: Subarray): void;
    getStart(): capnp.Uint64;
    setStart(value: capnp.Uint64): void;
    getEnd(): capnp.Uint64;
    setEnd(value: capnp.Uint64): void;
    getSplitMultiRange(): boolean;
    setSplitMultiRange(value: boolean): void;
    toString(): string;
}
export declare class SubarrayPartitioner_State extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _SingleRange: capnp.ListCtor<Subarray>;
    static _MultiRange: capnp.ListCtor<Subarray>;
    getStart(): capnp.Uint64;
    setStart(value: capnp.Uint64): void;
    getEnd(): capnp.Uint64;
    setEnd(value: capnp.Uint64): void;
    adoptSingleRange(value: capnp.Orphan<capnp.List<Subarray>>): void;
    disownSingleRange(): capnp.Orphan<capnp.List<Subarray>>;
    getSingleRange(): capnp.List<Subarray>;
    hasSingleRange(): boolean;
    initSingleRange(length: number): capnp.List<Subarray>;
    setSingleRange(value: capnp.List<Subarray>): void;
    adoptMultiRange(value: capnp.Orphan<capnp.List<Subarray>>): void;
    disownMultiRange(): capnp.Orphan<capnp.List<Subarray>>;
    getMultiRange(): capnp.List<Subarray>;
    hasMultiRange(): boolean;
    initMultiRange(length: number): capnp.List<Subarray>;
    setMultiRange(value: capnp.List<Subarray>): void;
    toString(): string;
}
export declare class SubarrayPartitioner extends __S {
    static readonly PartitionInfo: typeof SubarrayPartitioner_PartitionInfo;
    static readonly State: typeof SubarrayPartitioner_State;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Budget: capnp.ListCtor<AttributeBufferSize>;
    adoptSubarray(value: capnp.Orphan<Subarray>): void;
    disownSubarray(): capnp.Orphan<Subarray>;
    getSubarray(): Subarray;
    hasSubarray(): boolean;
    initSubarray(): Subarray;
    setSubarray(value: Subarray): void;
    adoptBudget(value: capnp.Orphan<capnp.List<AttributeBufferSize>>): void;
    disownBudget(): capnp.Orphan<capnp.List<AttributeBufferSize>>;
    getBudget(): capnp.List<AttributeBufferSize>;
    hasBudget(): boolean;
    initBudget(length: number): capnp.List<AttributeBufferSize>;
    setBudget(value: capnp.List<AttributeBufferSize>): void;
    adoptCurrent(value: capnp.Orphan<SubarrayPartitioner_PartitionInfo>): void;
    disownCurrent(): capnp.Orphan<SubarrayPartitioner_PartitionInfo>;
    getCurrent(): SubarrayPartitioner_PartitionInfo;
    hasCurrent(): boolean;
    initCurrent(): SubarrayPartitioner_PartitionInfo;
    setCurrent(value: SubarrayPartitioner_PartitionInfo): void;
    adoptState(value: capnp.Orphan<SubarrayPartitioner_State>): void;
    disownState(): capnp.Orphan<SubarrayPartitioner_State>;
    getState(): SubarrayPartitioner_State;
    hasState(): boolean;
    initState(): SubarrayPartitioner_State;
    setState(value: SubarrayPartitioner_State): void;
    getMemoryBudget(): capnp.Uint64;
    setMemoryBudget(value: capnp.Uint64): void;
    getMemoryBudgetVar(): capnp.Uint64;
    setMemoryBudgetVar(value: capnp.Uint64): void;
    getMemoryBudgetValidity(): capnp.Uint64;
    setMemoryBudgetValidity(value: capnp.Uint64): void;
    adoptStats(value: capnp.Orphan<Stats>): void;
    disownStats(): capnp.Orphan<Stats>;
    getStats(): Stats;
    hasStats(): boolean;
    initStats(): Stats;
    setStats(value: Stats): void;
    toString(): string;
}
export declare class ReadState extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getOverflowed(): boolean;
    setOverflowed(value: boolean): void;
    getUnsplittable(): boolean;
    setUnsplittable(value: boolean): void;
    getInitialized(): boolean;
    setInitialized(value: boolean): void;
    adoptSubarrayPartitioner(value: capnp.Orphan<SubarrayPartitioner>): void;
    disownSubarrayPartitioner(): capnp.Orphan<SubarrayPartitioner>;
    getSubarrayPartitioner(): SubarrayPartitioner;
    hasSubarrayPartitioner(): boolean;
    initSubarrayPartitioner(): SubarrayPartitioner;
    setSubarrayPartitioner(value: SubarrayPartitioner): void;
    toString(): string;
}
export declare class ConditionClause extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getFieldName(): string;
    setFieldName(value: string): void;
    adoptValue(value: capnp.Orphan<capnp.Data>): void;
    disownValue(): capnp.Orphan<capnp.Data>;
    getValue(): capnp.Data;
    hasValue(): boolean;
    initValue(length: number): capnp.Data;
    setValue(value: capnp.Data): void;
    getOp(): string;
    setOp(value: string): void;
    toString(): string;
}
export declare class Condition extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Clauses: capnp.ListCtor<ConditionClause>;
    adoptClauses(value: capnp.Orphan<capnp.List<ConditionClause>>): void;
    disownClauses(): capnp.Orphan<capnp.List<ConditionClause>>;
    getClauses(): capnp.List<ConditionClause>;
    hasClauses(): boolean;
    initClauses(length: number): capnp.List<ConditionClause>;
    setClauses(value: capnp.List<ConditionClause>): void;
    adoptClauseCombinationOps(value: capnp.Orphan<capnp.List<string>>): void;
    disownClauseCombinationOps(): capnp.Orphan<capnp.List<string>>;
    getClauseCombinationOps(): capnp.List<string>;
    hasClauseCombinationOps(): boolean;
    initClauseCombinationOps(length: number): capnp.List<string>;
    setClauseCombinationOps(value: capnp.List<string>): void;
    toString(): string;
}
export declare class DomainArray extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    adoptInt8(value: capnp.Orphan<capnp.List<number>>): void;
    disownInt8(): capnp.Orphan<capnp.List<number>>;
    getInt8(): capnp.List<number>;
    hasInt8(): boolean;
    initInt8(length: number): capnp.List<number>;
    setInt8(value: capnp.List<number>): void;
    adoptUint8(value: capnp.Orphan<capnp.List<number>>): void;
    disownUint8(): capnp.Orphan<capnp.List<number>>;
    getUint8(): capnp.List<number>;
    hasUint8(): boolean;
    initUint8(length: number): capnp.List<number>;
    setUint8(value: capnp.List<number>): void;
    adoptInt16(value: capnp.Orphan<capnp.List<number>>): void;
    disownInt16(): capnp.Orphan<capnp.List<number>>;
    getInt16(): capnp.List<number>;
    hasInt16(): boolean;
    initInt16(length: number): capnp.List<number>;
    setInt16(value: capnp.List<number>): void;
    adoptUint16(value: capnp.Orphan<capnp.List<number>>): void;
    disownUint16(): capnp.Orphan<capnp.List<number>>;
    getUint16(): capnp.List<number>;
    hasUint16(): boolean;
    initUint16(length: number): capnp.List<number>;
    setUint16(value: capnp.List<number>): void;
    adoptInt32(value: capnp.Orphan<capnp.List<number>>): void;
    disownInt32(): capnp.Orphan<capnp.List<number>>;
    getInt32(): capnp.List<number>;
    hasInt32(): boolean;
    initInt32(length: number): capnp.List<number>;
    setInt32(value: capnp.List<number>): void;
    adoptUint32(value: capnp.Orphan<capnp.List<number>>): void;
    disownUint32(): capnp.Orphan<capnp.List<number>>;
    getUint32(): capnp.List<number>;
    hasUint32(): boolean;
    initUint32(length: number): capnp.List<number>;
    setUint32(value: capnp.List<number>): void;
    adoptInt64(value: capnp.Orphan<capnp.List<capnp.Int64>>): void;
    disownInt64(): capnp.Orphan<capnp.List<capnp.Int64>>;
    getInt64(): capnp.List<capnp.Int64>;
    hasInt64(): boolean;
    initInt64(length: number): capnp.List<capnp.Int64>;
    setInt64(value: capnp.List<capnp.Int64>): void;
    adoptUint64(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void;
    disownUint64(): capnp.Orphan<capnp.List<capnp.Uint64>>;
    getUint64(): capnp.List<capnp.Uint64>;
    hasUint64(): boolean;
    initUint64(length: number): capnp.List<capnp.Uint64>;
    setUint64(value: capnp.List<capnp.Uint64>): void;
    adoptFloat32(value: capnp.Orphan<capnp.List<number>>): void;
    disownFloat32(): capnp.Orphan<capnp.List<number>>;
    getFloat32(): capnp.List<number>;
    hasFloat32(): boolean;
    initFloat32(length: number): capnp.List<number>;
    setFloat32(value: capnp.List<number>): void;
    adoptFloat64(value: capnp.Orphan<capnp.List<number>>): void;
    disownFloat64(): capnp.Orphan<capnp.List<number>>;
    getFloat64(): capnp.List<number>;
    hasFloat64(): boolean;
    initFloat64(length: number): capnp.List<number>;
    setFloat64(value: capnp.List<number>): void;
    toString(): string;
}
export declare class MapFloat64_Entry extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getKey(): string;
    setKey(value: string): void;
    getValue(): number;
    setValue(value: number): void;
    toString(): string;
}
export declare class MapFloat64 extends __S {
    static readonly Entry: typeof MapFloat64_Entry;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Entries: capnp.ListCtor<MapFloat64_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<MapFloat64_Entry>>): void;
    disownEntries(): capnp.Orphan<capnp.List<MapFloat64_Entry>>;
    getEntries(): capnp.List<MapFloat64_Entry>;
    hasEntries(): boolean;
    initEntries(length: number): capnp.List<MapFloat64_Entry>;
    setEntries(value: capnp.List<MapFloat64_Entry>): void;
    toString(): string;
}
export declare class MapUInt64_Entry extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getKey(): string;
    setKey(value: string): void;
    getValue(): capnp.Uint64;
    setValue(value: capnp.Uint64): void;
    toString(): string;
}
export declare class MapUInt64 extends __S {
    static readonly Entry: typeof MapUInt64_Entry;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Entries: capnp.ListCtor<MapUInt64_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<MapUInt64_Entry>>): void;
    disownEntries(): capnp.Orphan<capnp.List<MapUInt64_Entry>>;
    getEntries(): capnp.List<MapUInt64_Entry>;
    hasEntries(): boolean;
    initEntries(length: number): capnp.List<MapUInt64_Entry>;
    setEntries(value: capnp.List<MapUInt64_Entry>): void;
    toString(): string;
}
export declare class AttributeBufferSize extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getAttribute(): string;
    setAttribute(value: string): void;
    getOffsetBytes(): capnp.Uint64;
    setOffsetBytes(value: capnp.Uint64): void;
    getDataBytes(): capnp.Uint64;
    setDataBytes(value: capnp.Uint64): void;
    getValidityBytes(): capnp.Uint64;
    setValidityBytes(value: capnp.Uint64): void;
    toString(): string;
}
export declare class ArrayMetadata_MetadataEntry extends __S {
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    getKey(): string;
    setKey(value: string): void;
    getType(): string;
    setType(value: string): void;
    getValueNum(): number;
    setValueNum(value: number): void;
    adoptValue(value: capnp.Orphan<capnp.Data>): void;
    disownValue(): capnp.Orphan<capnp.Data>;
    getValue(): capnp.Data;
    hasValue(): boolean;
    initValue(length: number): capnp.Data;
    setValue(value: capnp.Data): void;
    getDel(): boolean;
    setDel(value: boolean): void;
    toString(): string;
}
export declare class ArrayMetadata extends __S {
    static readonly MetadataEntry: typeof ArrayMetadata_MetadataEntry;
    static readonly _capnp: {
        displayName: string;
        id: string;
        size: capnp.ObjectSize;
    };
    static _Entries: capnp.ListCtor<ArrayMetadata_MetadataEntry>;
    adoptEntries(value: capnp.Orphan<capnp.List<ArrayMetadata_MetadataEntry>>): void;
    disownEntries(): capnp.Orphan<capnp.List<ArrayMetadata_MetadataEntry>>;
    getEntries(): capnp.List<ArrayMetadata_MetadataEntry>;
    hasEntries(): boolean;
    initEntries(length: number): capnp.List<ArrayMetadata_MetadataEntry>;
    setEntries(value: capnp.List<ArrayMetadata_MetadataEntry>): void;
    toString(): string;
}
