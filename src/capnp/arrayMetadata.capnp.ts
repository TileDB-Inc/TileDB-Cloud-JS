/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "b57d9224b587d87f";
export class ArrayMetadata_MetadataEntry extends __S {
    static readonly _capnp = { displayName: "MetadataEntry", id: "926fe1c3b12ed651", size: new __O(8, 3) };
    getKey(): string { return __S.getText(0, this); }
    setKey(value: string): void { __S.setText(0, value, this); }
    getType(): string { return __S.getText(1, this); }
    setType(value: string): void { __S.setText(1, value, this); }
    getValueNum(): number { return __S.getUint32(0, this); }
    setValueNum(value: number): void { __S.setUint32(0, value, this); }
    adoptValue(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownValue(): capnp.Orphan<capnp.Data> { return __S.disown(this.getValue()); }
    getValue(): capnp.Data { return __S.getData(2, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initValue(length: number): capnp.Data { return __S.initData(2, length, this); }
    setValue(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    getDel(): boolean { return __S.getBit(32, this); }
    setDel(value: boolean): void { __S.setBit(32, value, this); }
    toString(): string { return "ArrayMetadata_MetadataEntry_" + super.toString(); }
}
export class ArrayMetadata extends __S {
    static readonly MetadataEntry = ArrayMetadata_MetadataEntry;
    static readonly _capnp = { displayName: "ArrayMetadata", id: "9737dcafdfce31bb", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<ArrayMetadata_MetadataEntry>;
    adoptEntries(value: capnp.Orphan<capnp.List<ArrayMetadata_MetadataEntry>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<ArrayMetadata_MetadataEntry>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<ArrayMetadata_MetadataEntry> { return __S.getList(0, ArrayMetadata._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<ArrayMetadata_MetadataEntry> { return __S.initList(0, ArrayMetadata._Entries, length, this); }
    setEntries(value: capnp.List<ArrayMetadata_MetadataEntry>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "ArrayMetadata_" + super.toString(); }
}
export class DataBox extends __S {
    static readonly _capnp = { displayName: "DataBox", id: "9983d93d37709d16", size: new __O(0, 1) };
    adoptValue(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownValue(): capnp.Orphan<capnp.Data> { return __S.disown(this.getValue()); }
    getValue(): capnp.Data { return __S.getData(0, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initValue(length: number): capnp.Data { return __S.initData(0, length, this); }
    setValue(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "DataBox_" + super.toString(); }
}
ArrayMetadata._Entries = capnp.CompositeList(ArrayMetadata_MetadataEntry);
