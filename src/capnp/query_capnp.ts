/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from 'capnp-ts';
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = 'b57d9224b587d87f';
export class Query extends __S {
  static readonly _capnp = {
    displayName: 'Query',
    id: '96ba49d0f8b23ccc',
    size: new __O(32, 12)
  };
  static _AttributeBufferHeaders: capnp.ListCtor<AttributeBufferHeader>;
  adoptAttributeBufferHeaders(
    value: capnp.Orphan<capnp.List<AttributeBufferHeader>>
  ): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownAttributeBufferHeaders(): capnp.Orphan<
    capnp.List<AttributeBufferHeader>
  > {
    return __S.disown(this.getAttributeBufferHeaders());
  }
  getAttributeBufferHeaders(): capnp.List<AttributeBufferHeader> {
    return __S.getList(0, Query._AttributeBufferHeaders, this);
  }
  hasAttributeBufferHeaders(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initAttributeBufferHeaders(
    length: number
  ): capnp.List<AttributeBufferHeader> {
    return __S.initList(0, Query._AttributeBufferHeaders, length, this);
  }
  setAttributeBufferHeaders(value: capnp.List<AttributeBufferHeader>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  getLayout(): string {
    return __S.getText(1, this);
  }
  setLayout(value: string): void {
    __S.setText(1, value, this);
  }
  getStatus(): string {
    return __S.getText(2, this);
  }
  setStatus(value: string): void {
    __S.setText(2, value, this);
  }
  getType(): string {
    return __S.getText(3, this);
  }
  setType(value: string): void {
    __S.setText(3, value, this);
  }
  adoptWriter(value: capnp.Orphan<Writer>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownWriter(): capnp.Orphan<Writer> {
    return __S.disown(this.getWriter());
  }
  getWriter(): Writer {
    return __S.getStruct(4, Writer, this);
  }
  hasWriter(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initWriter(): Writer {
    return __S.initStructAt(4, Writer, this);
  }
  setWriter(value: Writer): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  adoptReader(value: capnp.Orphan<QueryReader>): void {
    __S.adopt(value, __S.getPointer(5, this));
  }
  disownReader(): capnp.Orphan<QueryReader> {
    return __S.disown(this.getReader());
  }
  getReader(): QueryReader {
    return __S.getStruct(5, QueryReader, this);
  }
  hasReader(): boolean {
    return !__S.isNull(__S.getPointer(5, this));
  }
  initReader(): QueryReader {
    return __S.initStructAt(5, QueryReader, this);
  }
  setReader(value: QueryReader): void {
    __S.copyFrom(value, __S.getPointer(5, this));
  }
  adoptArray(value: capnp.Orphan<Array>): void {
    __S.adopt(value, __S.getPointer(6, this));
  }
  disownArray(): capnp.Orphan<Array> {
    return __S.disown(this.getArray());
  }
  getArray(): Array {
    return __S.getStruct(6, Array, this);
  }
  hasArray(): boolean {
    return !__S.isNull(__S.getPointer(6, this));
  }
  initArray(): Array {
    return __S.initStructAt(6, Array, this);
  }
  setArray(value: Array): void {
    __S.copyFrom(value, __S.getPointer(6, this));
  }
  getTotalFixedLengthBufferBytes(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setTotalFixedLengthBufferBytes(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getTotalVarLenBufferBytes(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setTotalVarLenBufferBytes(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  getTotalValidityBufferBytes(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setTotalValidityBufferBytes(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  getVarOffsetsMode(): string {
    return __S.getText(7, this);
  }
  setVarOffsetsMode(value: string): void {
    __S.setText(7, value, this);
  }
  getVarOffsetsAddExtraElement(): boolean {
    return __S.getBit(192, this);
  }
  setVarOffsetsAddExtraElement(value: boolean): void {
    __S.setBit(192, value, this);
  }
  getVarOffsetsBitsize(): number {
    return __S.getInt32(28, this);
  }
  setVarOffsetsBitsize(value: number): void {
    __S.setInt32(28, value, this);
  }
  adoptConfig(value: capnp.Orphan<Config>): void {
    __S.adopt(value, __S.getPointer(8, this));
  }
  disownConfig(): capnp.Orphan<Config> {
    return __S.disown(this.getConfig());
  }
  getConfig(): Config {
    return __S.getStruct(8, Config, this);
  }
  hasConfig(): boolean {
    return !__S.isNull(__S.getPointer(8, this));
  }
  initConfig(): Config {
    return __S.initStructAt(8, Config, this);
  }
  setConfig(value: Config): void {
    __S.copyFrom(value, __S.getPointer(8, this));
  }
  adoptStats(value: capnp.Orphan<Stats>): void {
    __S.adopt(value, __S.getPointer(9, this));
  }
  disownStats(): capnp.Orphan<Stats> {
    return __S.disown(this.getStats());
  }
  getStats(): Stats {
    return __S.getStruct(9, Stats, this);
  }
  hasStats(): boolean {
    return !__S.isNull(__S.getPointer(9, this));
  }
  initStats(): Stats {
    return __S.initStructAt(9, Stats, this);
  }
  setStats(value: Stats): void {
    __S.copyFrom(value, __S.getPointer(9, this));
  }
  adoptReaderIndex(value: capnp.Orphan<ReaderIndex>): void {
    __S.adopt(value, __S.getPointer(10, this));
  }
  disownReaderIndex(): capnp.Orphan<ReaderIndex> {
    return __S.disown(this.getReaderIndex());
  }
  getReaderIndex(): ReaderIndex {
    return __S.getStruct(10, ReaderIndex, this);
  }
  hasReaderIndex(): boolean {
    return !__S.isNull(__S.getPointer(10, this));
  }
  initReaderIndex(): ReaderIndex {
    return __S.initStructAt(10, ReaderIndex, this);
  }
  setReaderIndex(value: ReaderIndex): void {
    __S.copyFrom(value, __S.getPointer(10, this));
  }
  adoptDenseReader(value: capnp.Orphan<QueryReader>): void {
    __S.adopt(value, __S.getPointer(11, this));
  }
  disownDenseReader(): capnp.Orphan<QueryReader> {
    return __S.disown(this.getDenseReader());
  }
  getDenseReader(): QueryReader {
    return __S.getStruct(11, QueryReader, this);
  }
  hasDenseReader(): boolean {
    return !__S.isNull(__S.getPointer(11, this));
  }
  initDenseReader(): QueryReader {
    return __S.initStructAt(11, QueryReader, this);
  }
  setDenseReader(value: QueryReader): void {
    __S.copyFrom(value, __S.getPointer(11, this));
  }
  toString(): string {
    return 'Query_' + super.toString();
  }
}
export class ReaderIndex extends __S {
  static readonly _capnp = {
    displayName: 'ReaderIndex',
    id: '9b9a5fc7713a8692',
    size: new __O(0, 5)
  };
  getLayout(): string {
    return __S.getText(0, this);
  }
  setLayout(value: string): void {
    __S.setText(0, value, this);
  }
  adoptSubarray(value: capnp.Orphan<Subarray>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownSubarray(): capnp.Orphan<Subarray> {
    return __S.disown(this.getSubarray());
  }
  getSubarray(): Subarray {
    return __S.getStruct(1, Subarray, this);
  }
  hasSubarray(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initSubarray(): Subarray {
    return __S.initStructAt(1, Subarray, this);
  }
  setSubarray(value: Subarray): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptReadState(value: capnp.Orphan<ReadStateIndex>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownReadState(): capnp.Orphan<ReadStateIndex> {
    return __S.disown(this.getReadState());
  }
  getReadState(): ReadStateIndex {
    return __S.getStruct(2, ReadStateIndex, this);
  }
  hasReadState(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initReadState(): ReadStateIndex {
    return __S.initStructAt(2, ReadStateIndex, this);
  }
  setReadState(value: ReadStateIndex): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptCondition(value: capnp.Orphan<Condition>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownCondition(): capnp.Orphan<Condition> {
    return __S.disown(this.getCondition());
  }
  getCondition(): Condition {
    return __S.getStruct(3, Condition, this);
  }
  hasCondition(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initCondition(): Condition {
    return __S.initStructAt(3, Condition, this);
  }
  setCondition(value: Condition): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  adoptStats(value: capnp.Orphan<Stats>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownStats(): capnp.Orphan<Stats> {
    return __S.disown(this.getStats());
  }
  getStats(): Stats {
    return __S.getStruct(4, Stats, this);
  }
  hasStats(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initStats(): Stats {
    return __S.initStructAt(4, Stats, this);
  }
  setStats(value: Stats): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  toString(): string {
    return 'ReaderIndex_' + super.toString();
  }
}
export class ReadStateIndex extends __S {
  static readonly _capnp = {
    displayName: 'ReadStateIndex',
    id: 'c86c77b5f6a2bf0f',
    size: new __O(8, 2)
  };
  static _ResultCellSlab: capnp.ListCtor<ResultCellSlab>;
  static _FragTileIdx: capnp.ListCtor<FragmentIndex>;
  adoptResultCellSlab(value: capnp.Orphan<capnp.List<ResultCellSlab>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownResultCellSlab(): capnp.Orphan<capnp.List<ResultCellSlab>> {
    return __S.disown(this.getResultCellSlab());
  }
  getResultCellSlab(): capnp.List<ResultCellSlab> {
    return __S.getList(0, ReadStateIndex._ResultCellSlab, this);
  }
  hasResultCellSlab(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initResultCellSlab(length: number): capnp.List<ResultCellSlab> {
    return __S.initList(0, ReadStateIndex._ResultCellSlab, length, this);
  }
  setResultCellSlab(value: capnp.List<ResultCellSlab>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptFragTileIdx(value: capnp.Orphan<capnp.List<FragmentIndex>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownFragTileIdx(): capnp.Orphan<capnp.List<FragmentIndex>> {
    return __S.disown(this.getFragTileIdx());
  }
  getFragTileIdx(): capnp.List<FragmentIndex> {
    return __S.getList(1, ReadStateIndex._FragTileIdx, this);
  }
  hasFragTileIdx(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initFragTileIdx(length: number): capnp.List<FragmentIndex> {
    return __S.initList(1, ReadStateIndex._FragTileIdx, length, this);
  }
  setFragTileIdx(value: capnp.List<FragmentIndex>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  getDoneAddingResultTiles(): boolean {
    return __S.getBit(0, this);
  }
  setDoneAddingResultTiles(value: boolean): void {
    __S.setBit(0, value, this);
  }
  toString(): string {
    return 'ReadStateIndex_' + super.toString();
  }
}
export class ResultCellSlab extends __S {
  static readonly _capnp = {
    displayName: 'ResultCellSlab',
    id: 'def87cead82188e7',
    size: new __O(32, 0)
  };
  getFragIdx(): number {
    return __S.getUint32(0, this);
  }
  setFragIdx(value: number): void {
    __S.setUint32(0, value, this);
  }
  getTileIdx(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setTileIdx(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  getStart(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setStart(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  getLength(): capnp.Uint64 {
    return __S.getUint64(24, this);
  }
  setLength(value: capnp.Uint64): void {
    __S.setUint64(24, value, this);
  }
  toString(): string {
    return 'ResultCellSlab_' + super.toString();
  }
}
export class FragmentIndex extends __S {
  static readonly _capnp = {
    displayName: 'FragmentIndex',
    id: 'c1a2d010de779de5',
    size: new __O(16, 0)
  };
  getTileIdx(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setTileIdx(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getCellIdx(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setCellIdx(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  toString(): string {
    return 'FragmentIndex_' + super.toString();
  }
}
export class NonEmptyDomain extends __S {
  static readonly _capnp = {
    displayName: 'NonEmptyDomain',
    id: '9df6f2a42c4e5f0b',
    size: new __O(8, 2)
  };
  adoptNonEmptyDomain(value: capnp.Orphan<DomainArray>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownNonEmptyDomain(): capnp.Orphan<DomainArray> {
    return __S.disown(this.getNonEmptyDomain());
  }
  getNonEmptyDomain(): DomainArray {
    return __S.getStruct(0, DomainArray, this);
  }
  hasNonEmptyDomain(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initNonEmptyDomain(): DomainArray {
    return __S.initStructAt(0, DomainArray, this);
  }
  setNonEmptyDomain(value: DomainArray): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  getIsEmpty(): boolean {
    return __S.getBit(0, this);
  }
  setIsEmpty(value: boolean): void {
    __S.setBit(0, value, this);
  }
  adoptSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getSizes());
  }
  getSizes(): capnp.List<capnp.Uint64> {
    return __S.getList(1, capnp.Uint64List, this);
  }
  hasSizes(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initSizes(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(1, capnp.Uint64List, length, this);
  }
  setSizes(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  toString(): string {
    return 'NonEmptyDomain_' + super.toString();
  }
}
export class NonEmptyDomainList extends __S {
  static readonly _capnp = {
    displayName: 'NonEmptyDomainList',
    id: 'a18264549448ece3',
    size: new __O(0, 1)
  };
  static _NonEmptyDomains: capnp.ListCtor<NonEmptyDomain>;
  adoptNonEmptyDomains(value: capnp.Orphan<capnp.List<NonEmptyDomain>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownNonEmptyDomains(): capnp.Orphan<capnp.List<NonEmptyDomain>> {
    return __S.disown(this.getNonEmptyDomains());
  }
  getNonEmptyDomains(): capnp.List<NonEmptyDomain> {
    return __S.getList(0, NonEmptyDomainList._NonEmptyDomains, this);
  }
  hasNonEmptyDomains(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initNonEmptyDomains(length: number): capnp.List<NonEmptyDomain> {
    return __S.initList(0, NonEmptyDomainList._NonEmptyDomains, length, this);
  }
  setNonEmptyDomains(value: capnp.List<NonEmptyDomain>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'NonEmptyDomainList_' + super.toString();
  }
}
export class Attribute extends __S {
  static readonly _capnp = {
    displayName: 'Attribute',
    id: '92ad78f56de3d76a',
    size: new __O(8, 4)
  };
  getCellValNum(): number {
    return __S.getUint32(0, this);
  }
  setCellValNum(value: number): void {
    __S.setUint32(0, value, this);
  }
  getName(): string {
    return __S.getText(0, this);
  }
  setName(value: string): void {
    __S.setText(0, value, this);
  }
  getType(): string {
    return __S.getText(1, this);
  }
  setType(value: string): void {
    __S.setText(1, value, this);
  }
  adoptFilterPipeline(value: capnp.Orphan<FilterPipeline>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownFilterPipeline(): capnp.Orphan<FilterPipeline> {
    return __S.disown(this.getFilterPipeline());
  }
  getFilterPipeline(): FilterPipeline {
    return __S.getStruct(2, FilterPipeline, this);
  }
  hasFilterPipeline(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initFilterPipeline(): FilterPipeline {
    return __S.initStructAt(2, FilterPipeline, this);
  }
  setFilterPipeline(value: FilterPipeline): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptFillValue(value: capnp.Orphan<capnp.Data>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownFillValue(): capnp.Orphan<capnp.Data> {
    return __S.disown(this.getFillValue());
  }
  getFillValue(): capnp.Data {
    return __S.getData(3, this);
  }
  hasFillValue(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initFillValue(length: number): capnp.Data {
    return __S.initData(3, length, this);
  }
  setFillValue(value: capnp.Data): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  getNullable(): boolean {
    return __S.getBit(32, this);
  }
  setNullable(value: boolean): void {
    __S.setBit(32, value, this);
  }
  getFillValueValidity(): boolean {
    return __S.getBit(33, this);
  }
  setFillValueValidity(value: boolean): void {
    __S.setBit(33, value, this);
  }
  toString(): string {
    return 'Attribute_' + super.toString();
  }
}
export class AttributeBufferHeader extends __S {
  static readonly _capnp = {
    displayName: 'AttributeBufferHeader',
    id: 'd20a578112fa92a2',
    size: new __O(48, 1)
  };
  getName(): string {
    return __S.getText(0, this);
  }
  setName(value: string): void {
    __S.setText(0, value, this);
  }
  getFixedLenBufferSizeInBytes(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setFixedLenBufferSizeInBytes(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getVarLenBufferSizeInBytes(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setVarLenBufferSizeInBytes(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  getValidityLenBufferSizeInBytes(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setValidityLenBufferSizeInBytes(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  getOriginalFixedLenBufferSizeInBytes(): capnp.Uint64 {
    return __S.getUint64(24, this);
  }
  setOriginalFixedLenBufferSizeInBytes(value: capnp.Uint64): void {
    __S.setUint64(24, value, this);
  }
  getOriginalVarLenBufferSizeInBytes(): capnp.Uint64 {
    return __S.getUint64(32, this);
  }
  setOriginalVarLenBufferSizeInBytes(value: capnp.Uint64): void {
    __S.setUint64(32, value, this);
  }
  getOriginalValidityLenBufferSizeInBytes(): capnp.Uint64 {
    return __S.getUint64(40, this);
  }
  setOriginalValidityLenBufferSizeInBytes(value: capnp.Uint64): void {
    __S.setUint64(40, value, this);
  }
  toString(): string {
    return 'AttributeBufferHeader_' + super.toString();
  }
}
export enum Dimension_TileExtent_Which {
  INT8 = 0,
  UINT8 = 1,
  INT16 = 2,
  UINT16 = 3,
  INT32 = 4,
  UINT32 = 5,
  INT64 = 6,
  UINT64 = 7,
  FLOAT32 = 8,
  FLOAT64 = 9
}
export class Dimension_TileExtent extends __S {
  static readonly INT8 = Dimension_TileExtent_Which.INT8;
  static readonly UINT8 = Dimension_TileExtent_Which.UINT8;
  static readonly INT16 = Dimension_TileExtent_Which.INT16;
  static readonly UINT16 = Dimension_TileExtent_Which.UINT16;
  static readonly INT32 = Dimension_TileExtent_Which.INT32;
  static readonly UINT32 = Dimension_TileExtent_Which.UINT32;
  static readonly INT64 = Dimension_TileExtent_Which.INT64;
  static readonly UINT64 = Dimension_TileExtent_Which.UINT64;
  static readonly FLOAT32 = Dimension_TileExtent_Which.FLOAT32;
  static readonly FLOAT64 = Dimension_TileExtent_Which.FLOAT64;
  static readonly _capnp = {
    displayName: 'tileExtent',
    id: 'a2a652536db09fa0',
    size: new __O(16, 4)
  };
  getInt8(): number {
    __S.testWhich('int8', __S.getUint16(2, this), 0, this);
    return __S.getInt8(1, this);
  }
  isInt8(): boolean {
    return __S.getUint16(2, this) === 0;
  }
  setInt8(value: number): void {
    __S.setUint16(2, 0, this);
    __S.setInt8(1, value, this);
  }
  getUint8(): number {
    __S.testWhich('uint8', __S.getUint16(2, this), 1, this);
    return __S.getUint8(1, this);
  }
  isUint8(): boolean {
    return __S.getUint16(2, this) === 1;
  }
  setUint8(value: number): void {
    __S.setUint16(2, 1, this);
    __S.setUint8(1, value, this);
  }
  getInt16(): number {
    __S.testWhich('int16', __S.getUint16(2, this), 2, this);
    return __S.getInt16(4, this);
  }
  isInt16(): boolean {
    return __S.getUint16(2, this) === 2;
  }
  setInt16(value: number): void {
    __S.setUint16(2, 2, this);
    __S.setInt16(4, value, this);
  }
  getUint16(): number {
    __S.testWhich('uint16', __S.getUint16(2, this), 3, this);
    return __S.getUint16(4, this);
  }
  isUint16(): boolean {
    return __S.getUint16(2, this) === 3;
  }
  setUint16(value: number): void {
    __S.setUint16(2, 3, this);
    __S.setUint16(4, value, this);
  }
  getInt32(): number {
    __S.testWhich('int32', __S.getUint16(2, this), 4, this);
    return __S.getInt32(4, this);
  }
  isInt32(): boolean {
    return __S.getUint16(2, this) === 4;
  }
  setInt32(value: number): void {
    __S.setUint16(2, 4, this);
    __S.setInt32(4, value, this);
  }
  getUint32(): number {
    __S.testWhich('uint32', __S.getUint16(2, this), 5, this);
    return __S.getUint32(4, this);
  }
  isUint32(): boolean {
    return __S.getUint16(2, this) === 5;
  }
  setUint32(value: number): void {
    __S.setUint16(2, 5, this);
    __S.setUint32(4, value, this);
  }
  getInt64(): capnp.Int64 {
    __S.testWhich('int64', __S.getUint16(2, this), 6, this);
    return __S.getInt64(8, this);
  }
  isInt64(): boolean {
    return __S.getUint16(2, this) === 6;
  }
  setInt64(value: capnp.Int64): void {
    __S.setUint16(2, 6, this);
    __S.setInt64(8, value, this);
  }
  getUint64(): capnp.Uint64 {
    __S.testWhich('uint64', __S.getUint16(2, this), 7, this);
    return __S.getUint64(8, this);
  }
  isUint64(): boolean {
    return __S.getUint16(2, this) === 7;
  }
  setUint64(value: capnp.Uint64): void {
    __S.setUint16(2, 7, this);
    __S.setUint64(8, value, this);
  }
  getFloat32(): number {
    __S.testWhich('float32', __S.getUint16(2, this), 8, this);
    return __S.getFloat32(4, this);
  }
  isFloat32(): boolean {
    return __S.getUint16(2, this) === 8;
  }
  setFloat32(value: number): void {
    __S.setUint16(2, 8, this);
    __S.setFloat32(4, value, this);
  }
  getFloat64(): number {
    __S.testWhich('float64', __S.getUint16(2, this), 9, this);
    return __S.getFloat64(8, this);
  }
  isFloat64(): boolean {
    return __S.getUint16(2, this) === 9;
  }
  setFloat64(value: number): void {
    __S.setUint16(2, 9, this);
    __S.setFloat64(8, value, this);
  }
  toString(): string {
    return 'Dimension_TileExtent_' + super.toString();
  }
  which(): Dimension_TileExtent_Which {
    return __S.getUint16(2, this);
  }
}
export class Dimension extends __S {
  static readonly _capnp = {
    displayName: 'Dimension',
    id: '95e26a84d32d8223',
    size: new __O(16, 4)
  };
  getName(): string {
    return __S.getText(0, this);
  }
  setName(value: string): void {
    __S.setText(0, value, this);
  }
  getNullTileExtent(): boolean {
    return __S.getBit(0, this);
  }
  setNullTileExtent(value: boolean): void {
    __S.setBit(0, value, this);
  }
  getType(): string {
    return __S.getText(1, this);
  }
  setType(value: string): void {
    __S.setText(1, value, this);
  }
  getTileExtent(): Dimension_TileExtent {
    return __S.getAs(Dimension_TileExtent, this);
  }
  initTileExtent(): Dimension_TileExtent {
    return __S.getAs(Dimension_TileExtent, this);
  }
  adoptDomain(value: capnp.Orphan<DomainArray>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownDomain(): capnp.Orphan<DomainArray> {
    return __S.disown(this.getDomain());
  }
  getDomain(): DomainArray {
    return __S.getStruct(2, DomainArray, this);
  }
  hasDomain(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initDomain(): DomainArray {
    return __S.initStructAt(2, DomainArray, this);
  }
  setDomain(value: DomainArray): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptFilterPipeline(value: capnp.Orphan<FilterPipeline>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownFilterPipeline(): capnp.Orphan<FilterPipeline> {
    return __S.disown(this.getFilterPipeline());
  }
  getFilterPipeline(): FilterPipeline {
    return __S.getStruct(3, FilterPipeline, this);
  }
  hasFilterPipeline(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initFilterPipeline(): FilterPipeline {
    return __S.initStructAt(3, FilterPipeline, this);
  }
  setFilterPipeline(value: FilterPipeline): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  toString(): string {
    return 'Dimension_' + super.toString();
  }
}
export class Domain extends __S {
  static readonly _capnp = {
    displayName: 'Domain',
    id: 'de030f447664754c',
    size: new __O(0, 4)
  };
  static _Dimensions: capnp.ListCtor<Dimension>;
  getCellOrder(): string {
    return __S.getText(0, this);
  }
  setCellOrder(value: string): void {
    __S.setText(0, value, this);
  }
  adoptDimensions(value: capnp.Orphan<capnp.List<Dimension>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownDimensions(): capnp.Orphan<capnp.List<Dimension>> {
    return __S.disown(this.getDimensions());
  }
  getDimensions(): capnp.List<Dimension> {
    return __S.getList(1, Domain._Dimensions, this);
  }
  hasDimensions(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initDimensions(length: number): capnp.List<Dimension> {
    return __S.initList(1, Domain._Dimensions, length, this);
  }
  setDimensions(value: capnp.List<Dimension>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  getTileOrder(): string {
    return __S.getText(2, this);
  }
  setTileOrder(value: string): void {
    __S.setText(2, value, this);
  }
  getType(): string {
    return __S.getText(3, this);
  }
  setType(value: string): void {
    __S.setText(3, value, this);
  }
  toString(): string {
    return 'Domain_' + super.toString();
  }
}
export class Array extends __S {
  static readonly _capnp = {
    displayName: 'Array',
    id: 'a45730f57e0460b4',
    size: new __O(24, 8)
  };
  static _FragmentMetadataAll: capnp.ListCtor<FragmentMetadata>;
  getEndTimestamp(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setEndTimestamp(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getQueryType(): string {
    return __S.getText(0, this);
  }
  setQueryType(value: string): void {
    __S.setText(0, value, this);
  }
  getUri(): string {
    return __S.getText(1, this);
  }
  setUri(value: string): void {
    __S.setText(1, value, this);
  }
  getStartTimestamp(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setStartTimestamp(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  adoptArraySchemaLatest(value: capnp.Orphan<ArraySchema>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownArraySchemaLatest(): capnp.Orphan<ArraySchema> {
    return __S.disown(this.getArraySchemaLatest());
  }
  getArraySchemaLatest(): ArraySchema {
    return __S.getStruct(2, ArraySchema, this);
  }
  hasArraySchemaLatest(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initArraySchemaLatest(): ArraySchema {
    return __S.initStructAt(2, ArraySchema, this);
  }
  setArraySchemaLatest(value: ArraySchema): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptArraySchemasAll(value: capnp.Orphan<ArraySchemaMap>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownArraySchemasAll(): capnp.Orphan<ArraySchemaMap> {
    return __S.disown(this.getArraySchemasAll());
  }
  getArraySchemasAll(): ArraySchemaMap {
    return __S.getStruct(3, ArraySchemaMap, this);
  }
  hasArraySchemasAll(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initArraySchemasAll(): ArraySchemaMap {
    return __S.initStructAt(3, ArraySchemaMap, this);
  }
  setArraySchemasAll(value: ArraySchemaMap): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  adoptNonEmptyDomain(value: capnp.Orphan<NonEmptyDomainList>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownNonEmptyDomain(): capnp.Orphan<NonEmptyDomainList> {
    return __S.disown(this.getNonEmptyDomain());
  }
  getNonEmptyDomain(): NonEmptyDomainList {
    return __S.getStruct(4, NonEmptyDomainList, this);
  }
  hasNonEmptyDomain(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initNonEmptyDomain(): NonEmptyDomainList {
    return __S.initStructAt(4, NonEmptyDomainList, this);
  }
  setNonEmptyDomain(value: NonEmptyDomainList): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  adoptArrayMetadata(value: capnp.Orphan<ArrayMetadata>): void {
    __S.adopt(value, __S.getPointer(5, this));
  }
  disownArrayMetadata(): capnp.Orphan<ArrayMetadata> {
    return __S.disown(this.getArrayMetadata());
  }
  getArrayMetadata(): ArrayMetadata {
    return __S.getStruct(5, ArrayMetadata, this);
  }
  hasArrayMetadata(): boolean {
    return !__S.isNull(__S.getPointer(5, this));
  }
  initArrayMetadata(): ArrayMetadata {
    return __S.initStructAt(5, ArrayMetadata, this);
  }
  setArrayMetadata(value: ArrayMetadata): void {
    __S.copyFrom(value, __S.getPointer(5, this));
  }
  adoptArrayDirectory(value: capnp.Orphan<ArrayDirectory>): void {
    __S.adopt(value, __S.getPointer(6, this));
  }
  disownArrayDirectory(): capnp.Orphan<ArrayDirectory> {
    return __S.disown(this.getArrayDirectory());
  }
  getArrayDirectory(): ArrayDirectory {
    return __S.getStruct(6, ArrayDirectory, this);
  }
  hasArrayDirectory(): boolean {
    return !__S.isNull(__S.getPointer(6, this));
  }
  initArrayDirectory(): ArrayDirectory {
    return __S.initStructAt(6, ArrayDirectory, this);
  }
  setArrayDirectory(value: ArrayDirectory): void {
    __S.copyFrom(value, __S.getPointer(6, this));
  }
  adoptFragmentMetadataAll(
    value: capnp.Orphan<capnp.List<FragmentMetadata>>
  ): void {
    __S.adopt(value, __S.getPointer(7, this));
  }
  disownFragmentMetadataAll(): capnp.Orphan<capnp.List<FragmentMetadata>> {
    return __S.disown(this.getFragmentMetadataAll());
  }
  getFragmentMetadataAll(): capnp.List<FragmentMetadata> {
    return __S.getList(7, Array._FragmentMetadataAll, this);
  }
  hasFragmentMetadataAll(): boolean {
    return !__S.isNull(__S.getPointer(7, this));
  }
  initFragmentMetadataAll(length: number): capnp.List<FragmentMetadata> {
    return __S.initList(7, Array._FragmentMetadataAll, length, this);
  }
  setFragmentMetadataAll(value: capnp.List<FragmentMetadata>): void {
    __S.copyFrom(value, __S.getPointer(7, this));
  }
  getOpenedAtEndTimestamp(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setOpenedAtEndTimestamp(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  toString(): string {
    return 'Array_' + super.toString();
  }
}
export class ArrayDirectory_TimestampedURI extends __S {
  static readonly _capnp = {
    displayName: 'TimestampedURI',
    id: 'd9d27c082dec9e26',
    size: new __O(16, 1)
  };
  getUri(): string {
    return __S.getText(0, this);
  }
  setUri(value: string): void {
    __S.setText(0, value, this);
  }
  getTimestampStart(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setTimestampStart(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getTimestampEnd(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setTimestampEnd(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  toString(): string {
    return 'ArrayDirectory_TimestampedURI_' + super.toString();
  }
}
export class ArrayDirectory_DeleteAndUpdateTileLocation extends __S {
  static readonly _capnp = {
    displayName: 'DeleteAndUpdateTileLocation',
    id: '9eb745af522d087c',
    size: new __O(8, 2)
  };
  getUri(): string {
    return __S.getText(0, this);
  }
  setUri(value: string): void {
    __S.setText(0, value, this);
  }
  getConditionMarker(): string {
    return __S.getText(1, this);
  }
  setConditionMarker(value: string): void {
    __S.setText(1, value, this);
  }
  getOffset(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setOffset(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  toString(): string {
    return 'ArrayDirectory_DeleteAndUpdateTileLocation_' + super.toString();
  }
}
export class ArrayDirectory extends __S {
  static readonly TimestampedURI = ArrayDirectory_TimestampedURI;
  static readonly DeleteAndUpdateTileLocation =
    ArrayDirectory_DeleteAndUpdateTileLocation;
  static readonly _capnp = {
    displayName: 'ArrayDirectory',
    id: '9317f20ce509d918',
    size: new __O(16, 12)
  };
  static _ArrayMetaUris: capnp.ListCtor<ArrayDirectory_TimestampedURI>;
  static _DeleteAndUpdateTileLocation: capnp.ListCtor<ArrayDirectory_DeleteAndUpdateTileLocation>;
  adoptUnfilteredFragmentUris(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownUnfilteredFragmentUris(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getUnfilteredFragmentUris());
  }
  getUnfilteredFragmentUris(): capnp.List<string> {
    return __S.getList(0, capnp.TextList, this);
  }
  hasUnfilteredFragmentUris(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initUnfilteredFragmentUris(length: number): capnp.List<string> {
    return __S.initList(0, capnp.TextList, length, this);
  }
  setUnfilteredFragmentUris(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptConsolidatedCommitUris(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownConsolidatedCommitUris(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getConsolidatedCommitUris());
  }
  getConsolidatedCommitUris(): capnp.List<string> {
    return __S.getList(1, capnp.TextList, this);
  }
  hasConsolidatedCommitUris(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initConsolidatedCommitUris(length: number): capnp.List<string> {
    return __S.initList(1, capnp.TextList, length, this);
  }
  setConsolidatedCommitUris(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptArraySchemaUris(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownArraySchemaUris(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getArraySchemaUris());
  }
  getArraySchemaUris(): capnp.List<string> {
    return __S.getList(2, capnp.TextList, this);
  }
  hasArraySchemaUris(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initArraySchemaUris(length: number): capnp.List<string> {
    return __S.initList(2, capnp.TextList, length, this);
  }
  setArraySchemaUris(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  getLatestArraySchemaUri(): string {
    return __S.getText(3, this);
  }
  setLatestArraySchemaUri(value: string): void {
    __S.setText(3, value, this);
  }
  adoptArrayMetaUrisToVacuum(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownArrayMetaUrisToVacuum(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getArrayMetaUrisToVacuum());
  }
  getArrayMetaUrisToVacuum(): capnp.List<string> {
    return __S.getList(4, capnp.TextList, this);
  }
  hasArrayMetaUrisToVacuum(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initArrayMetaUrisToVacuum(length: number): capnp.List<string> {
    return __S.initList(4, capnp.TextList, length, this);
  }
  setArrayMetaUrisToVacuum(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  adoptArrayMetaVacUrisToVacuum(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(5, this));
  }
  disownArrayMetaVacUrisToVacuum(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getArrayMetaVacUrisToVacuum());
  }
  getArrayMetaVacUrisToVacuum(): capnp.List<string> {
    return __S.getList(5, capnp.TextList, this);
  }
  hasArrayMetaVacUrisToVacuum(): boolean {
    return !__S.isNull(__S.getPointer(5, this));
  }
  initArrayMetaVacUrisToVacuum(length: number): capnp.List<string> {
    return __S.initList(5, capnp.TextList, length, this);
  }
  setArrayMetaVacUrisToVacuum(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(5, this));
  }
  adoptCommitUrisToConsolidate(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(6, this));
  }
  disownCommitUrisToConsolidate(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getCommitUrisToConsolidate());
  }
  getCommitUrisToConsolidate(): capnp.List<string> {
    return __S.getList(6, capnp.TextList, this);
  }
  hasCommitUrisToConsolidate(): boolean {
    return !__S.isNull(__S.getPointer(6, this));
  }
  initCommitUrisToConsolidate(length: number): capnp.List<string> {
    return __S.initList(6, capnp.TextList, length, this);
  }
  setCommitUrisToConsolidate(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(6, this));
  }
  adoptCommitUrisToVacuum(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(7, this));
  }
  disownCommitUrisToVacuum(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getCommitUrisToVacuum());
  }
  getCommitUrisToVacuum(): capnp.List<string> {
    return __S.getList(7, capnp.TextList, this);
  }
  hasCommitUrisToVacuum(): boolean {
    return !__S.isNull(__S.getPointer(7, this));
  }
  initCommitUrisToVacuum(length: number): capnp.List<string> {
    return __S.initList(7, capnp.TextList, length, this);
  }
  setCommitUrisToVacuum(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(7, this));
  }
  adoptConsolidatedCommitUrisToVacuum(
    value: capnp.Orphan<capnp.List<string>>
  ): void {
    __S.adopt(value, __S.getPointer(8, this));
  }
  disownConsolidatedCommitUrisToVacuum(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getConsolidatedCommitUrisToVacuum());
  }
  getConsolidatedCommitUrisToVacuum(): capnp.List<string> {
    return __S.getList(8, capnp.TextList, this);
  }
  hasConsolidatedCommitUrisToVacuum(): boolean {
    return !__S.isNull(__S.getPointer(8, this));
  }
  initConsolidatedCommitUrisToVacuum(length: number): capnp.List<string> {
    return __S.initList(8, capnp.TextList, length, this);
  }
  setConsolidatedCommitUrisToVacuum(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(8, this));
  }
  adoptArrayMetaUris(
    value: capnp.Orphan<capnp.List<ArrayDirectory_TimestampedURI>>
  ): void {
    __S.adopt(value, __S.getPointer(9, this));
  }
  disownArrayMetaUris(): capnp.Orphan<
    capnp.List<ArrayDirectory_TimestampedURI>
  > {
    return __S.disown(this.getArrayMetaUris());
  }
  getArrayMetaUris(): capnp.List<ArrayDirectory_TimestampedURI> {
    return __S.getList(9, ArrayDirectory._ArrayMetaUris, this);
  }
  hasArrayMetaUris(): boolean {
    return !__S.isNull(__S.getPointer(9, this));
  }
  initArrayMetaUris(length: number): capnp.List<ArrayDirectory_TimestampedURI> {
    return __S.initList(9, ArrayDirectory._ArrayMetaUris, length, this);
  }
  setArrayMetaUris(value: capnp.List<ArrayDirectory_TimestampedURI>): void {
    __S.copyFrom(value, __S.getPointer(9, this));
  }
  adoptFragmentMetaUris(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(10, this));
  }
  disownFragmentMetaUris(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getFragmentMetaUris());
  }
  getFragmentMetaUris(): capnp.List<string> {
    return __S.getList(10, capnp.TextList, this);
  }
  hasFragmentMetaUris(): boolean {
    return !__S.isNull(__S.getPointer(10, this));
  }
  initFragmentMetaUris(length: number): capnp.List<string> {
    return __S.initList(10, capnp.TextList, length, this);
  }
  setFragmentMetaUris(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(10, this));
  }
  adoptDeleteAndUpdateTileLocation(
    value: capnp.Orphan<capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation>>
  ): void {
    __S.adopt(value, __S.getPointer(11, this));
  }
  disownDeleteAndUpdateTileLocation(): capnp.Orphan<
    capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation>
  > {
    return __S.disown(this.getDeleteAndUpdateTileLocation());
  }
  getDeleteAndUpdateTileLocation(): capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation> {
    return __S.getList(11, ArrayDirectory._DeleteAndUpdateTileLocation, this);
  }
  hasDeleteAndUpdateTileLocation(): boolean {
    return !__S.isNull(__S.getPointer(11, this));
  }
  initDeleteAndUpdateTileLocation(
    length: number
  ): capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation> {
    return __S.initList(
      11,
      ArrayDirectory._DeleteAndUpdateTileLocation,
      length,
      this
    );
  }
  setDeleteAndUpdateTileLocation(
    value: capnp.List<ArrayDirectory_DeleteAndUpdateTileLocation>
  ): void {
    __S.copyFrom(value, __S.getPointer(11, this));
  }
  getTimestampStart(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setTimestampStart(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getTimestampEnd(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setTimestampEnd(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  toString(): string {
    return 'ArrayDirectory_' + super.toString();
  }
}
export class FragmentMetadata_GenericTileOffsets extends __S {
  static readonly _capnp = {
    displayName: 'GenericTileOffsets',
    id: '89aa8f4e88036b9e',
    size: new __O(24, 8)
  };
  getRtree(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setRtree(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  adoptTileOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownTileOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTileOffsets());
  }
  getTileOffsets(): capnp.List<capnp.Uint64> {
    return __S.getList(0, capnp.Uint64List, this);
  }
  hasTileOffsets(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initTileOffsets(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(0, capnp.Uint64List, length, this);
  }
  setTileOffsets(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptTileVarOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownTileVarOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTileVarOffsets());
  }
  getTileVarOffsets(): capnp.List<capnp.Uint64> {
    return __S.getList(1, capnp.Uint64List, this);
  }
  hasTileVarOffsets(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initTileVarOffsets(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(1, capnp.Uint64List, length, this);
  }
  setTileVarOffsets(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptTileVarSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownTileVarSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTileVarSizes());
  }
  getTileVarSizes(): capnp.List<capnp.Uint64> {
    return __S.getList(2, capnp.Uint64List, this);
  }
  hasTileVarSizes(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initTileVarSizes(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(2, capnp.Uint64List, length, this);
  }
  setTileVarSizes(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptTileValidityOffsets(
    value: capnp.Orphan<capnp.List<capnp.Uint64>>
  ): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownTileValidityOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTileValidityOffsets());
  }
  getTileValidityOffsets(): capnp.List<capnp.Uint64> {
    return __S.getList(3, capnp.Uint64List, this);
  }
  hasTileValidityOffsets(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initTileValidityOffsets(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(3, capnp.Uint64List, length, this);
  }
  setTileValidityOffsets(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  adoptTileMinOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownTileMinOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTileMinOffsets());
  }
  getTileMinOffsets(): capnp.List<capnp.Uint64> {
    return __S.getList(4, capnp.Uint64List, this);
  }
  hasTileMinOffsets(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initTileMinOffsets(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(4, capnp.Uint64List, length, this);
  }
  setTileMinOffsets(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  adoptTileMaxOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(5, this));
  }
  disownTileMaxOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTileMaxOffsets());
  }
  getTileMaxOffsets(): capnp.List<capnp.Uint64> {
    return __S.getList(5, capnp.Uint64List, this);
  }
  hasTileMaxOffsets(): boolean {
    return !__S.isNull(__S.getPointer(5, this));
  }
  initTileMaxOffsets(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(5, capnp.Uint64List, length, this);
  }
  setTileMaxOffsets(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(5, this));
  }
  adoptTileSumOffsets(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(6, this));
  }
  disownTileSumOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTileSumOffsets());
  }
  getTileSumOffsets(): capnp.List<capnp.Uint64> {
    return __S.getList(6, capnp.Uint64List, this);
  }
  hasTileSumOffsets(): boolean {
    return !__S.isNull(__S.getPointer(6, this));
  }
  initTileSumOffsets(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(6, capnp.Uint64List, length, this);
  }
  setTileSumOffsets(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(6, this));
  }
  adoptTileNullCountOffsets(
    value: capnp.Orphan<capnp.List<capnp.Uint64>>
  ): void {
    __S.adopt(value, __S.getPointer(7, this));
  }
  disownTileNullCountOffsets(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTileNullCountOffsets());
  }
  getTileNullCountOffsets(): capnp.List<capnp.Uint64> {
    return __S.getList(7, capnp.Uint64List, this);
  }
  hasTileNullCountOffsets(): boolean {
    return !__S.isNull(__S.getPointer(7, this));
  }
  initTileNullCountOffsets(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(7, capnp.Uint64List, length, this);
  }
  setTileNullCountOffsets(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(7, this));
  }
  getFragmentMinMaxSumNullCountOffset(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setFragmentMinMaxSumNullCountOffset(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  getProcessedConditionsOffsets(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setProcessedConditionsOffsets(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  toString(): string {
    return 'FragmentMetadata_GenericTileOffsets_' + super.toString();
  }
}
export class FragmentMetadata extends __S {
  static readonly GenericTileOffsets = FragmentMetadata_GenericTileOffsets;
  static readonly _capnp = {
    displayName: 'FragmentMetadata',
    id: 'cde352fc27e7ca61',
    size: new __O(32, 22)
  };
  static _TileOffsets: capnp.ListCtor<capnp.List<capnp.Uint64>>;
  static _TileVarOffsets: capnp.ListCtor<capnp.List<capnp.Uint64>>;
  static _TileVarSizes: capnp.ListCtor<capnp.List<capnp.Uint64>>;
  static _TileValidityOffsets: capnp.ListCtor<capnp.List<capnp.Uint64>>;
  static _TileMinBuffer: capnp.ListCtor<capnp.List<number>>;
  static _TileMinVarBuffer: capnp.ListCtor<capnp.List<number>>;
  static _TileMaxBuffer: capnp.ListCtor<capnp.List<number>>;
  static _TileMaxVarBuffer: capnp.ListCtor<capnp.List<number>>;
  static _TileSums: capnp.ListCtor<capnp.List<number>>;
  static _TileNullCounts: capnp.ListCtor<capnp.List<capnp.Uint64>>;
  static _FragmentMins: capnp.ListCtor<capnp.List<number>>;
  static _FragmentMaxs: capnp.ListCtor<capnp.List<number>>;
  adoptFileSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownFileSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getFileSizes());
  }
  getFileSizes(): capnp.List<capnp.Uint64> {
    return __S.getList(0, capnp.Uint64List, this);
  }
  hasFileSizes(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initFileSizes(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(0, capnp.Uint64List, length, this);
  }
  setFileSizes(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptFileVarSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownFileVarSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getFileVarSizes());
  }
  getFileVarSizes(): capnp.List<capnp.Uint64> {
    return __S.getList(1, capnp.Uint64List, this);
  }
  hasFileVarSizes(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initFileVarSizes(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(1, capnp.Uint64List, length, this);
  }
  setFileVarSizes(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptFileValiditySizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownFileValiditySizes(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getFileValiditySizes());
  }
  getFileValiditySizes(): capnp.List<capnp.Uint64> {
    return __S.getList(2, capnp.Uint64List, this);
  }
  hasFileValiditySizes(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initFileValiditySizes(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(2, capnp.Uint64List, length, this);
  }
  setFileValiditySizes(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  getFragmentUri(): string {
    return __S.getText(3, this);
  }
  setFragmentUri(value: string): void {
    __S.setText(3, value, this);
  }
  getHasTimestamps(): boolean {
    return __S.getBit(0, this);
  }
  setHasTimestamps(value: boolean): void {
    __S.setBit(0, value, this);
  }
  getHasDeleteMeta(): boolean {
    return __S.getBit(1, this);
  }
  setHasDeleteMeta(value: boolean): void {
    __S.setBit(1, value, this);
  }
  getSparseTileNum(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setSparseTileNum(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  getTileIndexBase(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setTileIndexBase(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  adoptTileOffsets(
    value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>
  ): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownTileOffsets(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>> {
    return __S.disown(this.getTileOffsets());
  }
  getTileOffsets(): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.getList(4, FragmentMetadata._TileOffsets, this);
  }
  hasTileOffsets(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initTileOffsets(length: number): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.initList(4, FragmentMetadata._TileOffsets, length, this);
  }
  setTileOffsets(value: capnp.List<capnp.List<capnp.Uint64>>): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  adoptTileVarOffsets(
    value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>
  ): void {
    __S.adopt(value, __S.getPointer(5, this));
  }
  disownTileVarOffsets(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>> {
    return __S.disown(this.getTileVarOffsets());
  }
  getTileVarOffsets(): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.getList(5, FragmentMetadata._TileVarOffsets, this);
  }
  hasTileVarOffsets(): boolean {
    return !__S.isNull(__S.getPointer(5, this));
  }
  initTileVarOffsets(length: number): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.initList(5, FragmentMetadata._TileVarOffsets, length, this);
  }
  setTileVarOffsets(value: capnp.List<capnp.List<capnp.Uint64>>): void {
    __S.copyFrom(value, __S.getPointer(5, this));
  }
  adoptTileVarSizes(
    value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>
  ): void {
    __S.adopt(value, __S.getPointer(6, this));
  }
  disownTileVarSizes(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>> {
    return __S.disown(this.getTileVarSizes());
  }
  getTileVarSizes(): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.getList(6, FragmentMetadata._TileVarSizes, this);
  }
  hasTileVarSizes(): boolean {
    return !__S.isNull(__S.getPointer(6, this));
  }
  initTileVarSizes(length: number): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.initList(6, FragmentMetadata._TileVarSizes, length, this);
  }
  setTileVarSizes(value: capnp.List<capnp.List<capnp.Uint64>>): void {
    __S.copyFrom(value, __S.getPointer(6, this));
  }
  adoptTileValidityOffsets(
    value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>
  ): void {
    __S.adopt(value, __S.getPointer(7, this));
  }
  disownTileValidityOffsets(): capnp.Orphan<
    capnp.List<capnp.List<capnp.Uint64>>
  > {
    return __S.disown(this.getTileValidityOffsets());
  }
  getTileValidityOffsets(): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.getList(7, FragmentMetadata._TileValidityOffsets, this);
  }
  hasTileValidityOffsets(): boolean {
    return !__S.isNull(__S.getPointer(7, this));
  }
  initTileValidityOffsets(
    length: number
  ): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.initList(7, FragmentMetadata._TileValidityOffsets, length, this);
  }
  setTileValidityOffsets(value: capnp.List<capnp.List<capnp.Uint64>>): void {
    __S.copyFrom(value, __S.getPointer(7, this));
  }
  adoptTileMinBuffer(
    value: capnp.Orphan<capnp.List<capnp.List<number>>>
  ): void {
    __S.adopt(value, __S.getPointer(8, this));
  }
  disownTileMinBuffer(): capnp.Orphan<capnp.List<capnp.List<number>>> {
    return __S.disown(this.getTileMinBuffer());
  }
  getTileMinBuffer(): capnp.List<capnp.List<number>> {
    return __S.getList(8, FragmentMetadata._TileMinBuffer, this);
  }
  hasTileMinBuffer(): boolean {
    return !__S.isNull(__S.getPointer(8, this));
  }
  initTileMinBuffer(length: number): capnp.List<capnp.List<number>> {
    return __S.initList(8, FragmentMetadata._TileMinBuffer, length, this);
  }
  setTileMinBuffer(value: capnp.List<capnp.List<number>>): void {
    __S.copyFrom(value, __S.getPointer(8, this));
  }
  adoptTileMinVarBuffer(
    value: capnp.Orphan<capnp.List<capnp.List<number>>>
  ): void {
    __S.adopt(value, __S.getPointer(9, this));
  }
  disownTileMinVarBuffer(): capnp.Orphan<capnp.List<capnp.List<number>>> {
    return __S.disown(this.getTileMinVarBuffer());
  }
  getTileMinVarBuffer(): capnp.List<capnp.List<number>> {
    return __S.getList(9, FragmentMetadata._TileMinVarBuffer, this);
  }
  hasTileMinVarBuffer(): boolean {
    return !__S.isNull(__S.getPointer(9, this));
  }
  initTileMinVarBuffer(length: number): capnp.List<capnp.List<number>> {
    return __S.initList(9, FragmentMetadata._TileMinVarBuffer, length, this);
  }
  setTileMinVarBuffer(value: capnp.List<capnp.List<number>>): void {
    __S.copyFrom(value, __S.getPointer(9, this));
  }
  adoptTileMaxBuffer(
    value: capnp.Orphan<capnp.List<capnp.List<number>>>
  ): void {
    __S.adopt(value, __S.getPointer(10, this));
  }
  disownTileMaxBuffer(): capnp.Orphan<capnp.List<capnp.List<number>>> {
    return __S.disown(this.getTileMaxBuffer());
  }
  getTileMaxBuffer(): capnp.List<capnp.List<number>> {
    return __S.getList(10, FragmentMetadata._TileMaxBuffer, this);
  }
  hasTileMaxBuffer(): boolean {
    return !__S.isNull(__S.getPointer(10, this));
  }
  initTileMaxBuffer(length: number): capnp.List<capnp.List<number>> {
    return __S.initList(10, FragmentMetadata._TileMaxBuffer, length, this);
  }
  setTileMaxBuffer(value: capnp.List<capnp.List<number>>): void {
    __S.copyFrom(value, __S.getPointer(10, this));
  }
  adoptTileMaxVarBuffer(
    value: capnp.Orphan<capnp.List<capnp.List<number>>>
  ): void {
    __S.adopt(value, __S.getPointer(11, this));
  }
  disownTileMaxVarBuffer(): capnp.Orphan<capnp.List<capnp.List<number>>> {
    return __S.disown(this.getTileMaxVarBuffer());
  }
  getTileMaxVarBuffer(): capnp.List<capnp.List<number>> {
    return __S.getList(11, FragmentMetadata._TileMaxVarBuffer, this);
  }
  hasTileMaxVarBuffer(): boolean {
    return !__S.isNull(__S.getPointer(11, this));
  }
  initTileMaxVarBuffer(length: number): capnp.List<capnp.List<number>> {
    return __S.initList(11, FragmentMetadata._TileMaxVarBuffer, length, this);
  }
  setTileMaxVarBuffer(value: capnp.List<capnp.List<number>>): void {
    __S.copyFrom(value, __S.getPointer(11, this));
  }
  adoptTileSums(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void {
    __S.adopt(value, __S.getPointer(12, this));
  }
  disownTileSums(): capnp.Orphan<capnp.List<capnp.List<number>>> {
    return __S.disown(this.getTileSums());
  }
  getTileSums(): capnp.List<capnp.List<number>> {
    return __S.getList(12, FragmentMetadata._TileSums, this);
  }
  hasTileSums(): boolean {
    return !__S.isNull(__S.getPointer(12, this));
  }
  initTileSums(length: number): capnp.List<capnp.List<number>> {
    return __S.initList(12, FragmentMetadata._TileSums, length, this);
  }
  setTileSums(value: capnp.List<capnp.List<number>>): void {
    __S.copyFrom(value, __S.getPointer(12, this));
  }
  adoptTileNullCounts(
    value: capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>>
  ): void {
    __S.adopt(value, __S.getPointer(13, this));
  }
  disownTileNullCounts(): capnp.Orphan<capnp.List<capnp.List<capnp.Uint64>>> {
    return __S.disown(this.getTileNullCounts());
  }
  getTileNullCounts(): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.getList(13, FragmentMetadata._TileNullCounts, this);
  }
  hasTileNullCounts(): boolean {
    return !__S.isNull(__S.getPointer(13, this));
  }
  initTileNullCounts(length: number): capnp.List<capnp.List<capnp.Uint64>> {
    return __S.initList(13, FragmentMetadata._TileNullCounts, length, this);
  }
  setTileNullCounts(value: capnp.List<capnp.List<capnp.Uint64>>): void {
    __S.copyFrom(value, __S.getPointer(13, this));
  }
  adoptFragmentMins(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void {
    __S.adopt(value, __S.getPointer(14, this));
  }
  disownFragmentMins(): capnp.Orphan<capnp.List<capnp.List<number>>> {
    return __S.disown(this.getFragmentMins());
  }
  getFragmentMins(): capnp.List<capnp.List<number>> {
    return __S.getList(14, FragmentMetadata._FragmentMins, this);
  }
  hasFragmentMins(): boolean {
    return !__S.isNull(__S.getPointer(14, this));
  }
  initFragmentMins(length: number): capnp.List<capnp.List<number>> {
    return __S.initList(14, FragmentMetadata._FragmentMins, length, this);
  }
  setFragmentMins(value: capnp.List<capnp.List<number>>): void {
    __S.copyFrom(value, __S.getPointer(14, this));
  }
  adoptFragmentMaxs(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void {
    __S.adopt(value, __S.getPointer(15, this));
  }
  disownFragmentMaxs(): capnp.Orphan<capnp.List<capnp.List<number>>> {
    return __S.disown(this.getFragmentMaxs());
  }
  getFragmentMaxs(): capnp.List<capnp.List<number>> {
    return __S.getList(15, FragmentMetadata._FragmentMaxs, this);
  }
  hasFragmentMaxs(): boolean {
    return !__S.isNull(__S.getPointer(15, this));
  }
  initFragmentMaxs(length: number): capnp.List<capnp.List<number>> {
    return __S.initList(15, FragmentMetadata._FragmentMaxs, length, this);
  }
  setFragmentMaxs(value: capnp.List<capnp.List<number>>): void {
    __S.copyFrom(value, __S.getPointer(15, this));
  }
  adoptFragmentSums(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(16, this));
  }
  disownFragmentSums(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getFragmentSums());
  }
  getFragmentSums(): capnp.List<capnp.Uint64> {
    return __S.getList(16, capnp.Uint64List, this);
  }
  hasFragmentSums(): boolean {
    return !__S.isNull(__S.getPointer(16, this));
  }
  initFragmentSums(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(16, capnp.Uint64List, length, this);
  }
  setFragmentSums(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(16, this));
  }
  adoptFragmentNullCounts(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(17, this));
  }
  disownFragmentNullCounts(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getFragmentNullCounts());
  }
  getFragmentNullCounts(): capnp.List<capnp.Uint64> {
    return __S.getList(17, capnp.Uint64List, this);
  }
  hasFragmentNullCounts(): boolean {
    return !__S.isNull(__S.getPointer(17, this));
  }
  initFragmentNullCounts(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(17, capnp.Uint64List, length, this);
  }
  setFragmentNullCounts(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(17, this));
  }
  getVersion(): number {
    return __S.getUint32(4, this);
  }
  setVersion(value: number): void {
    __S.setUint32(4, value, this);
  }
  adoptTimestampRange(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(18, this));
  }
  disownTimestampRange(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTimestampRange());
  }
  getTimestampRange(): capnp.List<capnp.Uint64> {
    return __S.getList(18, capnp.Uint64List, this);
  }
  hasTimestampRange(): boolean {
    return !__S.isNull(__S.getPointer(18, this));
  }
  initTimestampRange(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(18, capnp.Uint64List, length, this);
  }
  setTimestampRange(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(18, this));
  }
  getLastTileCellNum(): capnp.Uint64 {
    return __S.getUint64(24, this);
  }
  setLastTileCellNum(value: capnp.Uint64): void {
    __S.setUint64(24, value, this);
  }
  adoptNonEmptyDomain(value: capnp.Orphan<NonEmptyDomainList>): void {
    __S.adopt(value, __S.getPointer(19, this));
  }
  disownNonEmptyDomain(): capnp.Orphan<NonEmptyDomainList> {
    return __S.disown(this.getNonEmptyDomain());
  }
  getNonEmptyDomain(): NonEmptyDomainList {
    return __S.getStruct(19, NonEmptyDomainList, this);
  }
  hasNonEmptyDomain(): boolean {
    return !__S.isNull(__S.getPointer(19, this));
  }
  initNonEmptyDomain(): NonEmptyDomainList {
    return __S.initStructAt(19, NonEmptyDomainList, this);
  }
  setNonEmptyDomain(value: NonEmptyDomainList): void {
    __S.copyFrom(value, __S.getPointer(19, this));
  }
  adoptRtree(value: capnp.Orphan<capnp.Data>): void {
    __S.adopt(value, __S.getPointer(20, this));
  }
  disownRtree(): capnp.Orphan<capnp.Data> {
    return __S.disown(this.getRtree());
  }
  getRtree(): capnp.Data {
    return __S.getData(20, this);
  }
  hasRtree(): boolean {
    return !__S.isNull(__S.getPointer(20, this));
  }
  initRtree(length: number): capnp.Data {
    return __S.initData(20, length, this);
  }
  setRtree(value: capnp.Data): void {
    __S.copyFrom(value, __S.getPointer(20, this));
  }
  getHasConsolidatedFooter(): boolean {
    return __S.getBit(2, this);
  }
  setHasConsolidatedFooter(value: boolean): void {
    __S.setBit(2, value, this);
  }
  adoptGtOffsets(
    value: capnp.Orphan<FragmentMetadata_GenericTileOffsets>
  ): void {
    __S.adopt(value, __S.getPointer(21, this));
  }
  disownGtOffsets(): capnp.Orphan<FragmentMetadata_GenericTileOffsets> {
    return __S.disown(this.getGtOffsets());
  }
  getGtOffsets(): FragmentMetadata_GenericTileOffsets {
    return __S.getStruct(21, FragmentMetadata_GenericTileOffsets, this);
  }
  hasGtOffsets(): boolean {
    return !__S.isNull(__S.getPointer(21, this));
  }
  initGtOffsets(): FragmentMetadata_GenericTileOffsets {
    return __S.initStructAt(21, FragmentMetadata_GenericTileOffsets, this);
  }
  setGtOffsets(value: FragmentMetadata_GenericTileOffsets): void {
    __S.copyFrom(value, __S.getPointer(21, this));
  }
  toString(): string {
    return 'FragmentMetadata_' + super.toString();
  }
}
export class ArrayOpen extends __S {
  static readonly _capnp = {
    displayName: 'ArrayOpen',
    id: 'facceeafd4472c68',
    size: new __O(0, 2)
  };
  adoptConfig(value: capnp.Orphan<Config>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownConfig(): capnp.Orphan<Config> {
    return __S.disown(this.getConfig());
  }
  getConfig(): Config {
    return __S.getStruct(0, Config, this);
  }
  hasConfig(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initConfig(): Config {
    return __S.initStructAt(0, Config, this);
  }
  setConfig(value: Config): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  getQueryType(): string {
    return __S.getText(1, this);
  }
  setQueryType(value: string): void {
    __S.setText(1, value, this);
  }
  toString(): string {
    return 'ArrayOpen_' + super.toString();
  }
}
export class ArraySchema extends __S {
  static readonly _capnp = {
    displayName: 'ArraySchema',
    id: 'd71de32f98e296fe',
    size: new __O(16, 12)
  };
  static _Attributes: capnp.ListCtor<Attribute>;
  getArrayType(): string {
    return __S.getText(0, this);
  }
  setArrayType(value: string): void {
    __S.setText(0, value, this);
  }
  adoptAttributes(value: capnp.Orphan<capnp.List<Attribute>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownAttributes(): capnp.Orphan<capnp.List<Attribute>> {
    return __S.disown(this.getAttributes());
  }
  getAttributes(): capnp.List<Attribute> {
    return __S.getList(1, ArraySchema._Attributes, this);
  }
  hasAttributes(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initAttributes(length: number): capnp.List<Attribute> {
    return __S.initList(1, ArraySchema._Attributes, length, this);
  }
  setAttributes(value: capnp.List<Attribute>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  getCapacity(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setCapacity(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getCellOrder(): string {
    return __S.getText(2, this);
  }
  setCellOrder(value: string): void {
    __S.setText(2, value, this);
  }
  adoptCoordsFilterPipeline(value: capnp.Orphan<FilterPipeline>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownCoordsFilterPipeline(): capnp.Orphan<FilterPipeline> {
    return __S.disown(this.getCoordsFilterPipeline());
  }
  getCoordsFilterPipeline(): FilterPipeline {
    return __S.getStruct(3, FilterPipeline, this);
  }
  hasCoordsFilterPipeline(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initCoordsFilterPipeline(): FilterPipeline {
    return __S.initStructAt(3, FilterPipeline, this);
  }
  setCoordsFilterPipeline(value: FilterPipeline): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  adoptDomain(value: capnp.Orphan<Domain>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownDomain(): capnp.Orphan<Domain> {
    return __S.disown(this.getDomain());
  }
  getDomain(): Domain {
    return __S.getStruct(4, Domain, this);
  }
  hasDomain(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initDomain(): Domain {
    return __S.initStructAt(4, Domain, this);
  }
  setDomain(value: Domain): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  adoptOffsetFilterPipeline(value: capnp.Orphan<FilterPipeline>): void {
    __S.adopt(value, __S.getPointer(5, this));
  }
  disownOffsetFilterPipeline(): capnp.Orphan<FilterPipeline> {
    return __S.disown(this.getOffsetFilterPipeline());
  }
  getOffsetFilterPipeline(): FilterPipeline {
    return __S.getStruct(5, FilterPipeline, this);
  }
  hasOffsetFilterPipeline(): boolean {
    return !__S.isNull(__S.getPointer(5, this));
  }
  initOffsetFilterPipeline(): FilterPipeline {
    return __S.initStructAt(5, FilterPipeline, this);
  }
  setOffsetFilterPipeline(value: FilterPipeline): void {
    __S.copyFrom(value, __S.getPointer(5, this));
  }
  getTileOrder(): string {
    return __S.getText(6, this);
  }
  setTileOrder(value: string): void {
    __S.setText(6, value, this);
  }
  getUri(): string {
    return __S.getText(7, this);
  }
  setUri(value: string): void {
    __S.setText(7, value, this);
  }
  adoptVersion(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(8, this));
  }
  disownVersion(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getVersion());
  }
  getVersion(): capnp.List<number> {
    return __S.getList(8, capnp.Int32List, this);
  }
  hasVersion(): boolean {
    return !__S.isNull(__S.getPointer(8, this));
  }
  initVersion(length: number): capnp.List<number> {
    return __S.initList(8, capnp.Int32List, length, this);
  }
  setVersion(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(8, this));
  }
  getAllowsDuplicates(): boolean {
    return __S.getBit(64, this);
  }
  setAllowsDuplicates(value: boolean): void {
    __S.setBit(64, value, this);
  }
  adoptValidityFilterPipeline(value: capnp.Orphan<FilterPipeline>): void {
    __S.adopt(value, __S.getPointer(9, this));
  }
  disownValidityFilterPipeline(): capnp.Orphan<FilterPipeline> {
    return __S.disown(this.getValidityFilterPipeline());
  }
  getValidityFilterPipeline(): FilterPipeline {
    return __S.getStruct(9, FilterPipeline, this);
  }
  hasValidityFilterPipeline(): boolean {
    return !__S.isNull(__S.getPointer(9, this));
  }
  initValidityFilterPipeline(): FilterPipeline {
    return __S.initStructAt(9, FilterPipeline, this);
  }
  setValidityFilterPipeline(value: FilterPipeline): void {
    __S.copyFrom(value, __S.getPointer(9, this));
  }
  getName(): string {
    return __S.getText(10, this);
  }
  setName(value: string): void {
    __S.setText(10, value, this);
  }
  adoptTimestampRange(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(11, this));
  }
  disownTimestampRange(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getTimestampRange());
  }
  getTimestampRange(): capnp.List<capnp.Uint64> {
    return __S.getList(11, capnp.Uint64List, this);
  }
  hasTimestampRange(): boolean {
    return !__S.isNull(__S.getPointer(11, this));
  }
  initTimestampRange(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(11, capnp.Uint64List, length, this);
  }
  setTimestampRange(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(11, this));
  }
  toString(): string {
    return 'ArraySchema_' + super.toString();
  }
}
export class FloatScaleConfig extends __S {
  static readonly _capnp = {
    displayName: 'FloatScaleConfig',
    id: 'fda1cb9663a55b70',
    size: new __O(24, 0)
  };
  getScale(): number {
    return __S.getFloat64(0, this);
  }
  setScale(value: number): void {
    __S.setFloat64(0, value, this);
  }
  getOffset(): number {
    return __S.getFloat64(8, this);
  }
  setOffset(value: number): void {
    __S.setFloat64(8, value, this);
  }
  getByteWidth(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setByteWidth(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  toString(): string {
    return 'FloatScaleConfig_' + super.toString();
  }
}
export enum Filter_Data_Which {
  TEXT = 0,
  BYTES = 1,
  INT8 = 2,
  UINT8 = 3,
  INT16 = 4,
  UINT16 = 5,
  INT32 = 6,
  UINT32 = 7,
  INT64 = 8,
  UINT64 = 9,
  FLOAT32 = 10,
  FLOAT64 = 11
}
export class Filter_Data extends __S {
  static readonly TEXT = Filter_Data_Which.TEXT;
  static readonly BYTES = Filter_Data_Which.BYTES;
  static readonly INT8 = Filter_Data_Which.INT8;
  static readonly UINT8 = Filter_Data_Which.UINT8;
  static readonly INT16 = Filter_Data_Which.INT16;
  static readonly UINT16 = Filter_Data_Which.UINT16;
  static readonly INT32 = Filter_Data_Which.INT32;
  static readonly UINT32 = Filter_Data_Which.UINT32;
  static readonly INT64 = Filter_Data_Which.INT64;
  static readonly UINT64 = Filter_Data_Which.UINT64;
  static readonly FLOAT32 = Filter_Data_Which.FLOAT32;
  static readonly FLOAT64 = Filter_Data_Which.FLOAT64;
  static readonly _capnp = {
    displayName: 'data',
    id: '9ceaf832b3ab897f',
    size: new __O(16, 3)
  };
  getText(): string {
    __S.testWhich('text', __S.getUint16(0, this), 0, this);
    return __S.getText(1, this);
  }
  isText(): boolean {
    return __S.getUint16(0, this) === 0;
  }
  setText(value: string): void {
    __S.setUint16(0, 0, this);
    __S.setText(1, value, this);
  }
  adoptBytes(value: capnp.Orphan<capnp.Data>): void {
    __S.setUint16(0, 1, this);
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownBytes(): capnp.Orphan<capnp.Data> {
    return __S.disown(this.getBytes());
  }
  getBytes(): capnp.Data {
    __S.testWhich('bytes', __S.getUint16(0, this), 1, this);
    return __S.getData(1, this);
  }
  hasBytes(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initBytes(length: number): capnp.Data {
    __S.setUint16(0, 1, this);
    return __S.initData(1, length, this);
  }
  isBytes(): boolean {
    return __S.getUint16(0, this) === 1;
  }
  setBytes(value: capnp.Data): void {
    __S.setUint16(0, 1, this);
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  getInt8(): number {
    __S.testWhich('int8', __S.getUint16(0, this), 2, this);
    return __S.getInt8(2, this);
  }
  isInt8(): boolean {
    return __S.getUint16(0, this) === 2;
  }
  setInt8(value: number): void {
    __S.setUint16(0, 2, this);
    __S.setInt8(2, value, this);
  }
  getUint8(): number {
    __S.testWhich('uint8', __S.getUint16(0, this), 3, this);
    return __S.getUint8(2, this);
  }
  isUint8(): boolean {
    return __S.getUint16(0, this) === 3;
  }
  setUint8(value: number): void {
    __S.setUint16(0, 3, this);
    __S.setUint8(2, value, this);
  }
  getInt16(): number {
    __S.testWhich('int16', __S.getUint16(0, this), 4, this);
    return __S.getInt16(2, this);
  }
  isInt16(): boolean {
    return __S.getUint16(0, this) === 4;
  }
  setInt16(value: number): void {
    __S.setUint16(0, 4, this);
    __S.setInt16(2, value, this);
  }
  getUint16(): number {
    __S.testWhich('uint16', __S.getUint16(0, this), 5, this);
    return __S.getUint16(2, this);
  }
  isUint16(): boolean {
    return __S.getUint16(0, this) === 5;
  }
  setUint16(value: number): void {
    __S.setUint16(0, 5, this);
    __S.setUint16(2, value, this);
  }
  getInt32(): number {
    __S.testWhich('int32', __S.getUint16(0, this), 6, this);
    return __S.getInt32(4, this);
  }
  isInt32(): boolean {
    return __S.getUint16(0, this) === 6;
  }
  setInt32(value: number): void {
    __S.setUint16(0, 6, this);
    __S.setInt32(4, value, this);
  }
  getUint32(): number {
    __S.testWhich('uint32', __S.getUint16(0, this), 7, this);
    return __S.getUint32(4, this);
  }
  isUint32(): boolean {
    return __S.getUint16(0, this) === 7;
  }
  setUint32(value: number): void {
    __S.setUint16(0, 7, this);
    __S.setUint32(4, value, this);
  }
  getInt64(): capnp.Int64 {
    __S.testWhich('int64', __S.getUint16(0, this), 8, this);
    return __S.getInt64(8, this);
  }
  isInt64(): boolean {
    return __S.getUint16(0, this) === 8;
  }
  setInt64(value: capnp.Int64): void {
    __S.setUint16(0, 8, this);
    __S.setInt64(8, value, this);
  }
  getUint64(): capnp.Uint64 {
    __S.testWhich('uint64', __S.getUint16(0, this), 9, this);
    return __S.getUint64(8, this);
  }
  isUint64(): boolean {
    return __S.getUint16(0, this) === 9;
  }
  setUint64(value: capnp.Uint64): void {
    __S.setUint16(0, 9, this);
    __S.setUint64(8, value, this);
  }
  getFloat32(): number {
    __S.testWhich('float32', __S.getUint16(0, this), 10, this);
    return __S.getFloat32(4, this);
  }
  isFloat32(): boolean {
    return __S.getUint16(0, this) === 10;
  }
  setFloat32(value: number): void {
    __S.setUint16(0, 10, this);
    __S.setFloat32(4, value, this);
  }
  getFloat64(): number {
    __S.testWhich('float64', __S.getUint16(0, this), 11, this);
    return __S.getFloat64(8, this);
  }
  isFloat64(): boolean {
    return __S.getUint16(0, this) === 11;
  }
  setFloat64(value: number): void {
    __S.setUint16(0, 11, this);
    __S.setFloat64(8, value, this);
  }
  toString(): string {
    return 'Filter_Data_' + super.toString();
  }
  which(): Filter_Data_Which {
    return __S.getUint16(0, this);
  }
}
export class Filter extends __S {
  static readonly _capnp = {
    displayName: 'Filter',
    id: 'e7175047415b3f97',
    size: new __O(16, 3)
  };
  getType(): string {
    return __S.getText(0, this);
  }
  setType(value: string): void {
    __S.setText(0, value, this);
  }
  getData(): Filter_Data {
    return __S.getAs(Filter_Data, this);
  }
  initData(): Filter_Data {
    return __S.getAs(Filter_Data, this);
  }
  adoptFloatScaleConfig(value: capnp.Orphan<FloatScaleConfig>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownFloatScaleConfig(): capnp.Orphan<FloatScaleConfig> {
    return __S.disown(this.getFloatScaleConfig());
  }
  getFloatScaleConfig(): FloatScaleConfig {
    return __S.getStruct(2, FloatScaleConfig, this);
  }
  hasFloatScaleConfig(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initFloatScaleConfig(): FloatScaleConfig {
    return __S.initStructAt(2, FloatScaleConfig, this);
  }
  setFloatScaleConfig(value: FloatScaleConfig): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  toString(): string {
    return 'Filter_' + super.toString();
  }
}
export class FilterPipeline extends __S {
  static readonly _capnp = {
    displayName: 'FilterPipeline',
    id: 'bc4583f733eac4f5',
    size: new __O(0, 1)
  };
  static _Filters: capnp.ListCtor<Filter>;
  adoptFilters(value: capnp.Orphan<capnp.List<Filter>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownFilters(): capnp.Orphan<capnp.List<Filter>> {
    return __S.disown(this.getFilters());
  }
  getFilters(): capnp.List<Filter> {
    return __S.getList(0, FilterPipeline._Filters, this);
  }
  hasFilters(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initFilters(length: number): capnp.List<Filter> {
    return __S.initList(0, FilterPipeline._Filters, length, this);
  }
  setFilters(value: capnp.List<Filter>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'FilterPipeline_' + super.toString();
  }
}
export class ArraySchemaMap_Entry extends __S {
  static readonly _capnp = {
    displayName: 'Entry',
    id: 'a83848fc842105d1',
    size: new __O(0, 2)
  };
  getKey(): string {
    return __S.getText(0, this);
  }
  setKey(value: string): void {
    __S.setText(0, value, this);
  }
  adoptValue(value: capnp.Orphan<ArraySchema>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownValue(): capnp.Orphan<ArraySchema> {
    return __S.disown(this.getValue());
  }
  getValue(): ArraySchema {
    return __S.getStruct(1, ArraySchema, this);
  }
  hasValue(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initValue(): ArraySchema {
    return __S.initStructAt(1, ArraySchema, this);
  }
  setValue(value: ArraySchema): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  toString(): string {
    return 'ArraySchemaMap_Entry_' + super.toString();
  }
}
export class ArraySchemaMap extends __S {
  static readonly Entry = ArraySchemaMap_Entry;
  static readonly _capnp = {
    displayName: 'ArraySchemaMap',
    id: 'bc7f485a864cc075',
    size: new __O(0, 1)
  };
  static _Entries: capnp.ListCtor<ArraySchemaMap_Entry>;
  adoptEntries(value: capnp.Orphan<capnp.List<ArraySchemaMap_Entry>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownEntries(): capnp.Orphan<capnp.List<ArraySchemaMap_Entry>> {
    return __S.disown(this.getEntries());
  }
  getEntries(): capnp.List<ArraySchemaMap_Entry> {
    return __S.getList(0, ArraySchemaMap._Entries, this);
  }
  hasEntries(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initEntries(length: number): capnp.List<ArraySchemaMap_Entry> {
    return __S.initList(0, ArraySchemaMap._Entries, length, this);
  }
  setEntries(value: capnp.List<ArraySchemaMap_Entry>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'ArraySchemaMap_' + super.toString();
  }
}
export class Map_Entry extends __S {
  static readonly _capnp = {
    displayName: 'Entry',
    id: 'db5514c8aaf6faea',
    size: new __O(0, 2)
  };
  adoptKey(value: capnp.Orphan<capnp.Pointer>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownKey(): capnp.Orphan<capnp.Pointer> {
    return __S.disown(this.getKey());
  }
  getKey(): capnp.Pointer {
    return __S.getPointer(0, this);
  }
  hasKey(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  setKey(value: capnp.Pointer): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptValue(value: capnp.Orphan<capnp.Pointer>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownValue(): capnp.Orphan<capnp.Pointer> {
    return __S.disown(this.getValue());
  }
  getValue(): capnp.Pointer {
    return __S.getPointer(1, this);
  }
  hasValue(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  setValue(value: capnp.Pointer): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  toString(): string {
    return 'Map_Entry_' + super.toString();
  }
}
export class Map extends __S {
  static readonly Entry = Map_Entry;
  static readonly _capnp = {
    displayName: 'Map',
    id: 'f179c194ae71718c',
    size: new __O(0, 1)
  };
  static _Entries: capnp.ListCtor<Map_Entry>;
  adoptEntries(value: capnp.Orphan<capnp.List<Map_Entry>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownEntries(): capnp.Orphan<capnp.List<Map_Entry>> {
    return __S.disown(this.getEntries());
  }
  getEntries(): capnp.List<Map_Entry> {
    return __S.getList(0, Map._Entries, this);
  }
  hasEntries(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initEntries(length: number): capnp.List<Map_Entry> {
    return __S.initList(0, Map._Entries, length, this);
  }
  setEntries(value: capnp.List<Map_Entry>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'Map_' + super.toString();
  }
}
export class KV extends __S {
  static readonly _capnp = {
    displayName: 'KV',
    id: 'e3dadf2bf211bc97',
    size: new __O(0, 2)
  };
  getKey(): string {
    return __S.getText(0, this);
  }
  setKey(value: string): void {
    __S.setText(0, value, this);
  }
  getValue(): string {
    return __S.getText(1, this);
  }
  setValue(value: string): void {
    __S.setText(1, value, this);
  }
  toString(): string {
    return 'KV_' + super.toString();
  }
}
export class Config extends __S {
  static readonly _capnp = {
    displayName: 'Config',
    id: 'b6c95b4b8111ad36',
    size: new __O(0, 1)
  };
  static _Entries: capnp.ListCtor<KV>;
  adoptEntries(value: capnp.Orphan<capnp.List<KV>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownEntries(): capnp.Orphan<capnp.List<KV>> {
    return __S.disown(this.getEntries());
  }
  getEntries(): capnp.List<KV> {
    return __S.getList(0, Config._Entries, this);
  }
  hasEntries(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initEntries(length: number): capnp.List<KV> {
    return __S.initList(0, Config._Entries, length, this);
  }
  setEntries(value: capnp.List<KV>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'Config_' + super.toString();
  }
}
export class Stats extends __S {
  static readonly _capnp = {
    displayName: 'Stats',
    id: 'c7e036a11506a1a4',
    size: new __O(0, 2)
  };
  adoptTimers(value: capnp.Orphan<MapFloat64>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownTimers(): capnp.Orphan<MapFloat64> {
    return __S.disown(this.getTimers());
  }
  getTimers(): MapFloat64 {
    return __S.getStruct(0, MapFloat64, this);
  }
  hasTimers(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initTimers(): MapFloat64 {
    return __S.initStructAt(0, MapFloat64, this);
  }
  setTimers(value: MapFloat64): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptCounters(value: capnp.Orphan<MapUInt64>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownCounters(): capnp.Orphan<MapUInt64> {
    return __S.disown(this.getCounters());
  }
  getCounters(): MapUInt64 {
    return __S.getStruct(1, MapUInt64, this);
  }
  hasCounters(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initCounters(): MapUInt64 {
    return __S.initStructAt(1, MapUInt64, this);
  }
  setCounters(value: MapUInt64): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  toString(): string {
    return 'Stats_' + super.toString();
  }
}
export class Writer extends __S {
  static readonly _capnp = {
    displayName: 'Writer',
    id: '8ba60147a0e6735e',
    size: new __O(8, 3)
  };
  getCheckCoordDups(): boolean {
    return __S.getBit(0, this);
  }
  setCheckCoordDups(value: boolean): void {
    __S.setBit(0, value, this);
  }
  getCheckCoordOOB(): boolean {
    return __S.getBit(1, this);
  }
  setCheckCoordOOB(value: boolean): void {
    __S.setBit(1, value, this);
  }
  getDedupCoords(): boolean {
    return __S.getBit(2, this);
  }
  setDedupCoords(value: boolean): void {
    __S.setBit(2, value, this);
  }
  adoptSubarray(value: capnp.Orphan<DomainArray>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownSubarray(): capnp.Orphan<DomainArray> {
    return __S.disown(this.getSubarray());
  }
  getSubarray(): DomainArray {
    return __S.getStruct(0, DomainArray, this);
  }
  hasSubarray(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initSubarray(): DomainArray {
    return __S.initStructAt(0, DomainArray, this);
  }
  setSubarray(value: DomainArray): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptSubarrayRanges(value: capnp.Orphan<Subarray>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownSubarrayRanges(): capnp.Orphan<Subarray> {
    return __S.disown(this.getSubarrayRanges());
  }
  getSubarrayRanges(): Subarray {
    return __S.getStruct(1, Subarray, this);
  }
  hasSubarrayRanges(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initSubarrayRanges(): Subarray {
    return __S.initStructAt(1, Subarray, this);
  }
  setSubarrayRanges(value: Subarray): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptStats(value: capnp.Orphan<Stats>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownStats(): capnp.Orphan<Stats> {
    return __S.disown(this.getStats());
  }
  getStats(): Stats {
    return __S.getStruct(2, Stats, this);
  }
  hasStats(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initStats(): Stats {
    return __S.initStructAt(2, Stats, this);
  }
  setStats(value: Stats): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  toString(): string {
    return 'Writer_' + super.toString();
  }
}
export class QueryReader extends __S {
  static readonly _capnp = {
    displayName: 'QueryReader',
    id: 'e19754f813ccf79c',
    size: new __O(0, 5)
  };
  getLayout(): string {
    return __S.getText(0, this);
  }
  setLayout(value: string): void {
    __S.setText(0, value, this);
  }
  adoptSubarray(value: capnp.Orphan<Subarray>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownSubarray(): capnp.Orphan<Subarray> {
    return __S.disown(this.getSubarray());
  }
  getSubarray(): Subarray {
    return __S.getStruct(1, Subarray, this);
  }
  hasSubarray(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initSubarray(): Subarray {
    return __S.initStructAt(1, Subarray, this);
  }
  setSubarray(value: Subarray): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptReadState(value: capnp.Orphan<ReadState>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownReadState(): capnp.Orphan<ReadState> {
    return __S.disown(this.getReadState());
  }
  getReadState(): ReadState {
    return __S.getStruct(2, ReadState, this);
  }
  hasReadState(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initReadState(): ReadState {
    return __S.initStructAt(2, ReadState, this);
  }
  setReadState(value: ReadState): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptCondition(value: capnp.Orphan<Condition>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownCondition(): capnp.Orphan<Condition> {
    return __S.disown(this.getCondition());
  }
  getCondition(): Condition {
    return __S.getStruct(3, Condition, this);
  }
  hasCondition(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initCondition(): Condition {
    return __S.initStructAt(3, Condition, this);
  }
  setCondition(value: Condition): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  adoptStats(value: capnp.Orphan<Stats>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownStats(): capnp.Orphan<Stats> {
    return __S.disown(this.getStats());
  }
  getStats(): Stats {
    return __S.getStruct(4, Stats, this);
  }
  hasStats(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initStats(): Stats {
    return __S.initStructAt(4, Stats, this);
  }
  setStats(value: Stats): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  toString(): string {
    return 'QueryReader_' + super.toString();
  }
}
export class SubarrayRanges extends __S {
  static readonly _capnp = {
    displayName: 'SubarrayRanges',
    id: '86cfc12d74ed4aa0',
    size: new __O(8, 4)
  };
  getType(): string {
    return __S.getText(0, this);
  }
  setType(value: string): void {
    __S.setText(0, value, this);
  }
  getHasDefaultRange(): boolean {
    return __S.getBit(0, this);
  }
  setHasDefaultRange(value: boolean): void {
    __S.setBit(0, value, this);
  }
  adoptBuffer(value: capnp.Orphan<capnp.Data>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownBuffer(): capnp.Orphan<capnp.Data> {
    return __S.disown(this.getBuffer());
  }
  getBuffer(): capnp.Data {
    return __S.getData(1, this);
  }
  hasBuffer(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initBuffer(length: number): capnp.Data {
    return __S.initData(1, length, this);
  }
  setBuffer(value: capnp.Data): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptBufferSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownBufferSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getBufferSizes());
  }
  getBufferSizes(): capnp.List<capnp.Uint64> {
    return __S.getList(2, capnp.Uint64List, this);
  }
  hasBufferSizes(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initBufferSizes(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(2, capnp.Uint64List, length, this);
  }
  setBufferSizes(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptBufferStartSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownBufferStartSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getBufferStartSizes());
  }
  getBufferStartSizes(): capnp.List<capnp.Uint64> {
    return __S.getList(3, capnp.Uint64List, this);
  }
  hasBufferStartSizes(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initBufferStartSizes(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(3, capnp.Uint64List, length, this);
  }
  setBufferStartSizes(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  toString(): string {
    return 'SubarrayRanges_' + super.toString();
  }
}
export class Subarray extends __S {
  static readonly _capnp = {
    displayName: 'Subarray',
    id: 'dba20dec138adac9',
    size: new __O(8, 4)
  };
  static _Ranges: capnp.ListCtor<SubarrayRanges>;
  getLayout(): string {
    return __S.getText(0, this);
  }
  setLayout(value: string): void {
    __S.setText(0, value, this);
  }
  adoptRanges(value: capnp.Orphan<capnp.List<SubarrayRanges>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownRanges(): capnp.Orphan<capnp.List<SubarrayRanges>> {
    return __S.disown(this.getRanges());
  }
  getRanges(): capnp.List<SubarrayRanges> {
    return __S.getList(1, Subarray._Ranges, this);
  }
  hasRanges(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initRanges(length: number): capnp.List<SubarrayRanges> {
    return __S.initList(1, Subarray._Ranges, length, this);
  }
  setRanges(value: capnp.List<SubarrayRanges>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptStats(value: capnp.Orphan<Stats>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownStats(): capnp.Orphan<Stats> {
    return __S.disown(this.getStats());
  }
  getStats(): Stats {
    return __S.getStruct(2, Stats, this);
  }
  hasStats(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initStats(): Stats {
    return __S.initStructAt(2, Stats, this);
  }
  setStats(value: Stats): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptRelevantFragments(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownRelevantFragments(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getRelevantFragments());
  }
  getRelevantFragments(): capnp.List<number> {
    return __S.getList(3, capnp.Uint32List, this);
  }
  hasRelevantFragments(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initRelevantFragments(length: number): capnp.List<number> {
    return __S.initList(3, capnp.Uint32List, length, this);
  }
  setRelevantFragments(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  getCoalesceRanges(): boolean {
    return __S.getBit(0, this);
  }
  setCoalesceRanges(value: boolean): void {
    __S.setBit(0, value, this);
  }
  toString(): string {
    return 'Subarray_' + super.toString();
  }
}
export class SubarrayPartitioner_PartitionInfo extends __S {
  static readonly _capnp = {
    displayName: 'PartitionInfo',
    id: 'f86b7bf97823250f',
    size: new __O(24, 1)
  };
  adoptSubarray(value: capnp.Orphan<Subarray>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownSubarray(): capnp.Orphan<Subarray> {
    return __S.disown(this.getSubarray());
  }
  getSubarray(): Subarray {
    return __S.getStruct(0, Subarray, this);
  }
  hasSubarray(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initSubarray(): Subarray {
    return __S.initStructAt(0, Subarray, this);
  }
  setSubarray(value: Subarray): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  getStart(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setStart(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getEnd(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setEnd(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  getSplitMultiRange(): boolean {
    return __S.getBit(128, this);
  }
  setSplitMultiRange(value: boolean): void {
    __S.setBit(128, value, this);
  }
  toString(): string {
    return 'SubarrayPartitioner_PartitionInfo_' + super.toString();
  }
}
export class SubarrayPartitioner_State extends __S {
  static readonly _capnp = {
    displayName: 'State',
    id: 'fdd9e47288724221',
    size: new __O(16, 2)
  };
  static _SingleRange: capnp.ListCtor<Subarray>;
  static _MultiRange: capnp.ListCtor<Subarray>;
  getStart(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setStart(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getEnd(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setEnd(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  adoptSingleRange(value: capnp.Orphan<capnp.List<Subarray>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownSingleRange(): capnp.Orphan<capnp.List<Subarray>> {
    return __S.disown(this.getSingleRange());
  }
  getSingleRange(): capnp.List<Subarray> {
    return __S.getList(0, SubarrayPartitioner_State._SingleRange, this);
  }
  hasSingleRange(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initSingleRange(length: number): capnp.List<Subarray> {
    return __S.initList(
      0,
      SubarrayPartitioner_State._SingleRange,
      length,
      this
    );
  }
  setSingleRange(value: capnp.List<Subarray>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptMultiRange(value: capnp.Orphan<capnp.List<Subarray>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownMultiRange(): capnp.Orphan<capnp.List<Subarray>> {
    return __S.disown(this.getMultiRange());
  }
  getMultiRange(): capnp.List<Subarray> {
    return __S.getList(1, SubarrayPartitioner_State._MultiRange, this);
  }
  hasMultiRange(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initMultiRange(length: number): capnp.List<Subarray> {
    return __S.initList(1, SubarrayPartitioner_State._MultiRange, length, this);
  }
  setMultiRange(value: capnp.List<Subarray>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  toString(): string {
    return 'SubarrayPartitioner_State_' + super.toString();
  }
}
export class SubarrayPartitioner extends __S {
  static readonly PartitionInfo = SubarrayPartitioner_PartitionInfo;
  static readonly State = SubarrayPartitioner_State;
  static readonly _capnp = {
    displayName: 'SubarrayPartitioner',
    id: 'ff14003c70494585',
    size: new __O(24, 5)
  };
  static _Budget: capnp.ListCtor<AttributeBufferSize>;
  adoptSubarray(value: capnp.Orphan<Subarray>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownSubarray(): capnp.Orphan<Subarray> {
    return __S.disown(this.getSubarray());
  }
  getSubarray(): Subarray {
    return __S.getStruct(0, Subarray, this);
  }
  hasSubarray(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initSubarray(): Subarray {
    return __S.initStructAt(0, Subarray, this);
  }
  setSubarray(value: Subarray): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptBudget(value: capnp.Orphan<capnp.List<AttributeBufferSize>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownBudget(): capnp.Orphan<capnp.List<AttributeBufferSize>> {
    return __S.disown(this.getBudget());
  }
  getBudget(): capnp.List<AttributeBufferSize> {
    return __S.getList(1, SubarrayPartitioner._Budget, this);
  }
  hasBudget(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initBudget(length: number): capnp.List<AttributeBufferSize> {
    return __S.initList(1, SubarrayPartitioner._Budget, length, this);
  }
  setBudget(value: capnp.List<AttributeBufferSize>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptCurrent(value: capnp.Orphan<SubarrayPartitioner_PartitionInfo>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownCurrent(): capnp.Orphan<SubarrayPartitioner_PartitionInfo> {
    return __S.disown(this.getCurrent());
  }
  getCurrent(): SubarrayPartitioner_PartitionInfo {
    return __S.getStruct(2, SubarrayPartitioner_PartitionInfo, this);
  }
  hasCurrent(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initCurrent(): SubarrayPartitioner_PartitionInfo {
    return __S.initStructAt(2, SubarrayPartitioner_PartitionInfo, this);
  }
  setCurrent(value: SubarrayPartitioner_PartitionInfo): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptState(value: capnp.Orphan<SubarrayPartitioner_State>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownState(): capnp.Orphan<SubarrayPartitioner_State> {
    return __S.disown(this.getState());
  }
  getState(): SubarrayPartitioner_State {
    return __S.getStruct(3, SubarrayPartitioner_State, this);
  }
  hasState(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initState(): SubarrayPartitioner_State {
    return __S.initStructAt(3, SubarrayPartitioner_State, this);
  }
  setState(value: SubarrayPartitioner_State): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  getMemoryBudget(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setMemoryBudget(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getMemoryBudgetVar(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setMemoryBudgetVar(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  getMemoryBudgetValidity(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setMemoryBudgetValidity(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  adoptStats(value: capnp.Orphan<Stats>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownStats(): capnp.Orphan<Stats> {
    return __S.disown(this.getStats());
  }
  getStats(): Stats {
    return __S.getStruct(4, Stats, this);
  }
  hasStats(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initStats(): Stats {
    return __S.initStructAt(4, Stats, this);
  }
  setStats(value: Stats): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  toString(): string {
    return 'SubarrayPartitioner_' + super.toString();
  }
}
export class ReadState extends __S {
  static readonly _capnp = {
    displayName: 'ReadState',
    id: 'cbe1e7c13508aa2c',
    size: new __O(8, 1)
  };
  getOverflowed(): boolean {
    return __S.getBit(0, this);
  }
  setOverflowed(value: boolean): void {
    __S.setBit(0, value, this);
  }
  getUnsplittable(): boolean {
    return __S.getBit(1, this);
  }
  setUnsplittable(value: boolean): void {
    __S.setBit(1, value, this);
  }
  getInitialized(): boolean {
    return __S.getBit(2, this);
  }
  setInitialized(value: boolean): void {
    __S.setBit(2, value, this);
  }
  adoptSubarrayPartitioner(value: capnp.Orphan<SubarrayPartitioner>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownSubarrayPartitioner(): capnp.Orphan<SubarrayPartitioner> {
    return __S.disown(this.getSubarrayPartitioner());
  }
  getSubarrayPartitioner(): SubarrayPartitioner {
    return __S.getStruct(0, SubarrayPartitioner, this);
  }
  hasSubarrayPartitioner(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initSubarrayPartitioner(): SubarrayPartitioner {
    return __S.initStructAt(0, SubarrayPartitioner, this);
  }
  setSubarrayPartitioner(value: SubarrayPartitioner): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'ReadState_' + super.toString();
  }
}
export class ConditionClause extends __S {
  static readonly _capnp = {
    displayName: 'ConditionClause',
    id: 'dac6a7f675c57409',
    size: new __O(0, 3)
  };
  getFieldName(): string {
    return __S.getText(0, this);
  }
  setFieldName(value: string): void {
    __S.setText(0, value, this);
  }
  adoptValue(value: capnp.Orphan<capnp.Data>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownValue(): capnp.Orphan<capnp.Data> {
    return __S.disown(this.getValue());
  }
  getValue(): capnp.Data {
    return __S.getData(1, this);
  }
  hasValue(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initValue(length: number): capnp.Data {
    return __S.initData(1, length, this);
  }
  setValue(value: capnp.Data): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  getOp(): string {
    return __S.getText(2, this);
  }
  setOp(value: string): void {
    __S.setText(2, value, this);
  }
  toString(): string {
    return 'ConditionClause_' + super.toString();
  }
}
export class Condition extends __S {
  static readonly _capnp = {
    displayName: 'Condition',
    id: 'eaf57cb9871fc06f',
    size: new __O(0, 2)
  };
  static _Clauses: capnp.ListCtor<ConditionClause>;
  adoptClauses(value: capnp.Orphan<capnp.List<ConditionClause>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownClauses(): capnp.Orphan<capnp.List<ConditionClause>> {
    return __S.disown(this.getClauses());
  }
  getClauses(): capnp.List<ConditionClause> {
    return __S.getList(0, Condition._Clauses, this);
  }
  hasClauses(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initClauses(length: number): capnp.List<ConditionClause> {
    return __S.initList(0, Condition._Clauses, length, this);
  }
  setClauses(value: capnp.List<ConditionClause>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptClauseCombinationOps(value: capnp.Orphan<capnp.List<string>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownClauseCombinationOps(): capnp.Orphan<capnp.List<string>> {
    return __S.disown(this.getClauseCombinationOps());
  }
  getClauseCombinationOps(): capnp.List<string> {
    return __S.getList(1, capnp.TextList, this);
  }
  hasClauseCombinationOps(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initClauseCombinationOps(length: number): capnp.List<string> {
    return __S.initList(1, capnp.TextList, length, this);
  }
  setClauseCombinationOps(value: capnp.List<string>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  toString(): string {
    return 'Condition_' + super.toString();
  }
}
export class DomainArray extends __S {
  static readonly _capnp = {
    displayName: 'DomainArray',
    id: 'ce5904e6f9410cec',
    size: new __O(0, 10)
  };
  adoptInt8(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownInt8(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getInt8());
  }
  getInt8(): capnp.List<number> {
    return __S.getList(0, capnp.Int8List, this);
  }
  hasInt8(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initInt8(length: number): capnp.List<number> {
    return __S.initList(0, capnp.Int8List, length, this);
  }
  setInt8(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  adoptUint8(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(1, this));
  }
  disownUint8(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getUint8());
  }
  getUint8(): capnp.List<number> {
    return __S.getList(1, capnp.Uint8List, this);
  }
  hasUint8(): boolean {
    return !__S.isNull(__S.getPointer(1, this));
  }
  initUint8(length: number): capnp.List<number> {
    return __S.initList(1, capnp.Uint8List, length, this);
  }
  setUint8(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(1, this));
  }
  adoptInt16(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownInt16(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getInt16());
  }
  getInt16(): capnp.List<number> {
    return __S.getList(2, capnp.Int16List, this);
  }
  hasInt16(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initInt16(length: number): capnp.List<number> {
    return __S.initList(2, capnp.Int16List, length, this);
  }
  setInt16(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  adoptUint16(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(3, this));
  }
  disownUint16(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getUint16());
  }
  getUint16(): capnp.List<number> {
    return __S.getList(3, capnp.Uint16List, this);
  }
  hasUint16(): boolean {
    return !__S.isNull(__S.getPointer(3, this));
  }
  initUint16(length: number): capnp.List<number> {
    return __S.initList(3, capnp.Uint16List, length, this);
  }
  setUint16(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(3, this));
  }
  adoptInt32(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(4, this));
  }
  disownInt32(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getInt32());
  }
  getInt32(): capnp.List<number> {
    return __S.getList(4, capnp.Int32List, this);
  }
  hasInt32(): boolean {
    return !__S.isNull(__S.getPointer(4, this));
  }
  initInt32(length: number): capnp.List<number> {
    return __S.initList(4, capnp.Int32List, length, this);
  }
  setInt32(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(4, this));
  }
  adoptUint32(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(5, this));
  }
  disownUint32(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getUint32());
  }
  getUint32(): capnp.List<number> {
    return __S.getList(5, capnp.Uint32List, this);
  }
  hasUint32(): boolean {
    return !__S.isNull(__S.getPointer(5, this));
  }
  initUint32(length: number): capnp.List<number> {
    return __S.initList(5, capnp.Uint32List, length, this);
  }
  setUint32(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(5, this));
  }
  adoptInt64(value: capnp.Orphan<capnp.List<capnp.Int64>>): void {
    __S.adopt(value, __S.getPointer(6, this));
  }
  disownInt64(): capnp.Orphan<capnp.List<capnp.Int64>> {
    return __S.disown(this.getInt64());
  }
  getInt64(): capnp.List<capnp.Int64> {
    return __S.getList(6, capnp.Int64List, this);
  }
  hasInt64(): boolean {
    return !__S.isNull(__S.getPointer(6, this));
  }
  initInt64(length: number): capnp.List<capnp.Int64> {
    return __S.initList(6, capnp.Int64List, length, this);
  }
  setInt64(value: capnp.List<capnp.Int64>): void {
    __S.copyFrom(value, __S.getPointer(6, this));
  }
  adoptUint64(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void {
    __S.adopt(value, __S.getPointer(7, this));
  }
  disownUint64(): capnp.Orphan<capnp.List<capnp.Uint64>> {
    return __S.disown(this.getUint64());
  }
  getUint64(): capnp.List<capnp.Uint64> {
    return __S.getList(7, capnp.Uint64List, this);
  }
  hasUint64(): boolean {
    return !__S.isNull(__S.getPointer(7, this));
  }
  initUint64(length: number): capnp.List<capnp.Uint64> {
    return __S.initList(7, capnp.Uint64List, length, this);
  }
  setUint64(value: capnp.List<capnp.Uint64>): void {
    __S.copyFrom(value, __S.getPointer(7, this));
  }
  adoptFloat32(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(8, this));
  }
  disownFloat32(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getFloat32());
  }
  getFloat32(): capnp.List<number> {
    return __S.getList(8, capnp.Float32List, this);
  }
  hasFloat32(): boolean {
    return !__S.isNull(__S.getPointer(8, this));
  }
  initFloat32(length: number): capnp.List<number> {
    return __S.initList(8, capnp.Float32List, length, this);
  }
  setFloat32(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(8, this));
  }
  adoptFloat64(value: capnp.Orphan<capnp.List<number>>): void {
    __S.adopt(value, __S.getPointer(9, this));
  }
  disownFloat64(): capnp.Orphan<capnp.List<number>> {
    return __S.disown(this.getFloat64());
  }
  getFloat64(): capnp.List<number> {
    return __S.getList(9, capnp.Float64List, this);
  }
  hasFloat64(): boolean {
    return !__S.isNull(__S.getPointer(9, this));
  }
  initFloat64(length: number): capnp.List<number> {
    return __S.initList(9, capnp.Float64List, length, this);
  }
  setFloat64(value: capnp.List<number>): void {
    __S.copyFrom(value, __S.getPointer(9, this));
  }
  toString(): string {
    return 'DomainArray_' + super.toString();
  }
}
export class MapFloat64_Entry extends __S {
  static readonly _capnp = {
    displayName: 'Entry',
    id: 'bb80cdbc3f312934',
    size: new __O(8, 1)
  };
  getKey(): string {
    return __S.getText(0, this);
  }
  setKey(value: string): void {
    __S.setText(0, value, this);
  }
  getValue(): number {
    return __S.getFloat64(0, this);
  }
  setValue(value: number): void {
    __S.setFloat64(0, value, this);
  }
  toString(): string {
    return 'MapFloat64_Entry_' + super.toString();
  }
}
export class MapFloat64 extends __S {
  static readonly Entry = MapFloat64_Entry;
  static readonly _capnp = {
    displayName: 'MapFloat64',
    id: '9354174d952207d2',
    size: new __O(0, 1)
  };
  static _Entries: capnp.ListCtor<MapFloat64_Entry>;
  adoptEntries(value: capnp.Orphan<capnp.List<MapFloat64_Entry>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownEntries(): capnp.Orphan<capnp.List<MapFloat64_Entry>> {
    return __S.disown(this.getEntries());
  }
  getEntries(): capnp.List<MapFloat64_Entry> {
    return __S.getList(0, MapFloat64._Entries, this);
  }
  hasEntries(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initEntries(length: number): capnp.List<MapFloat64_Entry> {
    return __S.initList(0, MapFloat64._Entries, length, this);
  }
  setEntries(value: capnp.List<MapFloat64_Entry>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'MapFloat64_' + super.toString();
  }
}
export class MapUInt64_Entry extends __S {
  static readonly _capnp = {
    displayName: 'Entry',
    id: '82d7452da7cd249a',
    size: new __O(8, 1)
  };
  getKey(): string {
    return __S.getText(0, this);
  }
  setKey(value: string): void {
    __S.setText(0, value, this);
  }
  getValue(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setValue(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  toString(): string {
    return 'MapUInt64_Entry_' + super.toString();
  }
}
export class MapUInt64 extends __S {
  static readonly Entry = MapUInt64_Entry;
  static readonly _capnp = {
    displayName: 'MapUInt64',
    id: 'd3c5983c670e0f42',
    size: new __O(0, 1)
  };
  static _Entries: capnp.ListCtor<MapUInt64_Entry>;
  adoptEntries(value: capnp.Orphan<capnp.List<MapUInt64_Entry>>): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownEntries(): capnp.Orphan<capnp.List<MapUInt64_Entry>> {
    return __S.disown(this.getEntries());
  }
  getEntries(): capnp.List<MapUInt64_Entry> {
    return __S.getList(0, MapUInt64._Entries, this);
  }
  hasEntries(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initEntries(length: number): capnp.List<MapUInt64_Entry> {
    return __S.initList(0, MapUInt64._Entries, length, this);
  }
  setEntries(value: capnp.List<MapUInt64_Entry>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'MapUInt64_' + super.toString();
  }
}
export class AttributeBufferSize extends __S {
  static readonly _capnp = {
    displayName: 'AttributeBufferSize',
    id: '9be1921b07e6cd2d',
    size: new __O(24, 1)
  };
  getAttribute(): string {
    return __S.getText(0, this);
  }
  setAttribute(value: string): void {
    __S.setText(0, value, this);
  }
  getOffsetBytes(): capnp.Uint64 {
    return __S.getUint64(0, this);
  }
  setOffsetBytes(value: capnp.Uint64): void {
    __S.setUint64(0, value, this);
  }
  getDataBytes(): capnp.Uint64 {
    return __S.getUint64(8, this);
  }
  setDataBytes(value: capnp.Uint64): void {
    __S.setUint64(8, value, this);
  }
  getValidityBytes(): capnp.Uint64 {
    return __S.getUint64(16, this);
  }
  setValidityBytes(value: capnp.Uint64): void {
    __S.setUint64(16, value, this);
  }
  toString(): string {
    return 'AttributeBufferSize_' + super.toString();
  }
}
export class ArrayMetadata_MetadataEntry extends __S {
  static readonly _capnp = {
    displayName: 'MetadataEntry',
    id: '926fe1c3b12ed651',
    size: new __O(8, 3)
  };
  getKey(): string {
    return __S.getText(0, this);
  }
  setKey(value: string): void {
    __S.setText(0, value, this);
  }
  getType(): string {
    return __S.getText(1, this);
  }
  setType(value: string): void {
    __S.setText(1, value, this);
  }
  getValueNum(): number {
    return __S.getUint32(0, this);
  }
  setValueNum(value: number): void {
    __S.setUint32(0, value, this);
  }
  adoptValue(value: capnp.Orphan<capnp.Data>): void {
    __S.adopt(value, __S.getPointer(2, this));
  }
  disownValue(): capnp.Orphan<capnp.Data> {
    return __S.disown(this.getValue());
  }
  getValue(): capnp.Data {
    return __S.getData(2, this);
  }
  hasValue(): boolean {
    return !__S.isNull(__S.getPointer(2, this));
  }
  initValue(length: number): capnp.Data {
    return __S.initData(2, length, this);
  }
  setValue(value: capnp.Data): void {
    __S.copyFrom(value, __S.getPointer(2, this));
  }
  getDel(): boolean {
    return __S.getBit(32, this);
  }
  setDel(value: boolean): void {
    __S.setBit(32, value, this);
  }
  toString(): string {
    return 'ArrayMetadata_MetadataEntry_' + super.toString();
  }
}
export class ArrayMetadata extends __S {
  static readonly MetadataEntry = ArrayMetadata_MetadataEntry;
  static readonly _capnp = {
    displayName: 'ArrayMetadata',
    id: '9737dcafdfce31bb',
    size: new __O(0, 1)
  };
  static _Entries: capnp.ListCtor<ArrayMetadata_MetadataEntry>;
  adoptEntries(
    value: capnp.Orphan<capnp.List<ArrayMetadata_MetadataEntry>>
  ): void {
    __S.adopt(value, __S.getPointer(0, this));
  }
  disownEntries(): capnp.Orphan<capnp.List<ArrayMetadata_MetadataEntry>> {
    return __S.disown(this.getEntries());
  }
  getEntries(): capnp.List<ArrayMetadata_MetadataEntry> {
    return __S.getList(0, ArrayMetadata._Entries, this);
  }
  hasEntries(): boolean {
    return !__S.isNull(__S.getPointer(0, this));
  }
  initEntries(length: number): capnp.List<ArrayMetadata_MetadataEntry> {
    return __S.initList(0, ArrayMetadata._Entries, length, this);
  }
  setEntries(value: capnp.List<ArrayMetadata_MetadataEntry>): void {
    __S.copyFrom(value, __S.getPointer(0, this));
  }
  toString(): string {
    return 'ArrayMetadata_' + super.toString();
  }
}
Query._AttributeBufferHeaders = capnp.CompositeList(AttributeBufferHeader);
ReadStateIndex._ResultCellSlab = capnp.CompositeList(ResultCellSlab);
ReadStateIndex._FragTileIdx = capnp.CompositeList(FragmentIndex);
NonEmptyDomainList._NonEmptyDomains = capnp.CompositeList(NonEmptyDomain);
Domain._Dimensions = capnp.CompositeList(Dimension);
Array._FragmentMetadataAll = capnp.CompositeList(FragmentMetadata);
ArrayDirectory._ArrayMetaUris = capnp.CompositeList(
  ArrayDirectory_TimestampedURI
);
ArrayDirectory._DeleteAndUpdateTileLocation = capnp.CompositeList(
  ArrayDirectory_DeleteAndUpdateTileLocation
);
FragmentMetadata._TileOffsets = capnp.PointerList(capnp.Uint64List);
FragmentMetadata._TileVarOffsets = capnp.PointerList(capnp.Uint64List);
FragmentMetadata._TileVarSizes = capnp.PointerList(capnp.Uint64List);
FragmentMetadata._TileValidityOffsets = capnp.PointerList(capnp.Uint64List);
FragmentMetadata._TileMinBuffer = capnp.PointerList(capnp.Uint8List);
FragmentMetadata._TileMinVarBuffer = capnp.PointerList(capnp.Uint8List);
FragmentMetadata._TileMaxBuffer = capnp.PointerList(capnp.Uint8List);
FragmentMetadata._TileMaxVarBuffer = capnp.PointerList(capnp.Uint8List);
FragmentMetadata._TileSums = capnp.PointerList(capnp.Uint8List);
FragmentMetadata._TileNullCounts = capnp.PointerList(capnp.Uint64List);
FragmentMetadata._FragmentMins = capnp.PointerList(capnp.Uint8List);
FragmentMetadata._FragmentMaxs = capnp.PointerList(capnp.Uint8List);
ArraySchema._Attributes = capnp.CompositeList(Attribute);
FilterPipeline._Filters = capnp.CompositeList(Filter);
ArraySchemaMap._Entries = capnp.CompositeList(ArraySchemaMap_Entry);
Map._Entries = capnp.CompositeList(Map_Entry);
Config._Entries = capnp.CompositeList(KV);
Subarray._Ranges = capnp.CompositeList(SubarrayRanges);
SubarrayPartitioner_State._SingleRange = capnp.CompositeList(Subarray);
SubarrayPartitioner_State._MultiRange = capnp.CompositeList(Subarray);
SubarrayPartitioner._Budget = capnp.CompositeList(AttributeBufferSize);
Condition._Clauses = capnp.CompositeList(ConditionClause);
MapFloat64._Entries = capnp.CompositeList(MapFloat64_Entry);
MapUInt64._Entries = capnp.CompositeList(MapUInt64_Entry);
ArrayMetadata._Entries = capnp.CompositeList(ArrayMetadata_MetadataEntry);
