/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "b57d9224b587d87e";
export class Query extends __S {
    static readonly _capnp = { displayName: "Query", id: "ea34268ae031ac7a", size: new __O(32, 10) };
    static _AttributeBufferHeaders: capnp.ListCtor<AttributeBufferHeader>;
    adoptAttributeBufferHeaders(value: capnp.Orphan<capnp.List<AttributeBufferHeader>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownAttributeBufferHeaders(): capnp.Orphan<capnp.List<AttributeBufferHeader>> { return __S.disown(this.getAttributeBufferHeaders()); }
    getAttributeBufferHeaders(): capnp.List<AttributeBufferHeader> { return __S.getList(0, Query._AttributeBufferHeaders, this); }
    hasAttributeBufferHeaders(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initAttributeBufferHeaders(length: number): capnp.List<AttributeBufferHeader> { return __S.initList(0, Query._AttributeBufferHeaders, length, this); }
    setAttributeBufferHeaders(value: capnp.List<AttributeBufferHeader>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getLayout(): string { return __S.getText(1, this); }
    setLayout(value: string): void { __S.setText(1, value, this); }
    getStatus(): string { return __S.getText(2, this); }
    setStatus(value: string): void { __S.setText(2, value, this); }
    getType(): string { return __S.getText(3, this); }
    setType(value: string): void { __S.setText(3, value, this); }
    adoptWriter(value: capnp.Orphan<Writer>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownWriter(): capnp.Orphan<Writer> { return __S.disown(this.getWriter()); }
    getWriter(): Writer { return __S.getStruct(4, Writer, this); }
    hasWriter(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initWriter(): Writer { return __S.initStructAt(4, Writer, this); }
    setWriter(value: Writer): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptReader(value: capnp.Orphan<QueryReader>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownReader(): capnp.Orphan<QueryReader> { return __S.disown(this.getReader()); }
    getReader(): QueryReader { return __S.getStruct(5, QueryReader, this); }
    hasReader(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initReader(): QueryReader { return __S.initStructAt(5, QueryReader, this); }
    setReader(value: QueryReader): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    adoptArray(value: capnp.Orphan<Array>): void { __S.adopt(value, __S.getPointer(6, this)); }
    disownArray(): capnp.Orphan<Array> { return __S.disown(this.getArray()); }
    getArray(): Array { return __S.getStruct(6, Array, this); }
    hasArray(): boolean { return !__S.isNull(__S.getPointer(6, this)); }
    initArray(): Array { return __S.initStructAt(6, Array, this); }
    setArray(value: Array): void { __S.copyFrom(value, __S.getPointer(6, this)); }
    getTotalFixedLengthBufferBytes(): capnp.Uint64 { return __S.getUint64(0, this); }
    setTotalFixedLengthBufferBytes(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getTotalVarLenBufferBytes(): capnp.Uint64 { return __S.getUint64(8, this); }
    setTotalVarLenBufferBytes(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    getTotalValidityBufferBytes(): capnp.Uint64 { return __S.getUint64(16, this); }
    setTotalValidityBufferBytes(value: capnp.Uint64): void { __S.setUint64(16, value, this); }
    getVarOffsetsMode(): string { return __S.getText(7, this); }
    setVarOffsetsMode(value: string): void { __S.setText(7, value, this); }
    getVarOffsetsAddExtraElement(): boolean { return __S.getBit(192, this); }
    setVarOffsetsAddExtraElement(value: boolean): void { __S.setBit(192, value, this); }
    getVarOffsetsBitsize(): number { return __S.getInt32(28, this); }
    setVarOffsetsBitsize(value: number): void { __S.setInt32(28, value, this); }
    adoptConfig(value: capnp.Orphan<Config>): void { __S.adopt(value, __S.getPointer(8, this)); }
    disownConfig(): capnp.Orphan<Config> { return __S.disown(this.getConfig()); }
    getConfig(): Config { return __S.getStruct(8, Config, this); }
    hasConfig(): boolean { return !__S.isNull(__S.getPointer(8, this)); }
    initConfig(): Config { return __S.initStructAt(8, Config, this); }
    setConfig(value: Config): void { __S.copyFrom(value, __S.getPointer(8, this)); }
    adoptStats(value: capnp.Orphan<Stats>): void { __S.adopt(value, __S.getPointer(9, this)); }
    disownStats(): capnp.Orphan<Stats> { return __S.disown(this.getStats()); }
    getStats(): Stats { return __S.getStruct(9, Stats, this); }
    hasStats(): boolean { return !__S.isNull(__S.getPointer(9, this)); }
    initStats(): Stats { return __S.initStructAt(9, Stats, this); }
    setStats(value: Stats): void { __S.copyFrom(value, __S.getPointer(9, this)); }
    toString(): string { return "Query_" + super.toString(); }
}
export class NonEmptyDomain extends __S {
    static readonly _capnp = { displayName: "NonEmptyDomain", id: "8ee6e91f0369a459", size: new __O(8, 2) };
    adoptNonEmptyDomain(value: capnp.Orphan<DomainArray>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownNonEmptyDomain(): capnp.Orphan<DomainArray> { return __S.disown(this.getNonEmptyDomain()); }
    getNonEmptyDomain(): DomainArray { return __S.getStruct(0, DomainArray, this); }
    hasNonEmptyDomain(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initNonEmptyDomain(): DomainArray { return __S.initStructAt(0, DomainArray, this); }
    setNonEmptyDomain(value: DomainArray): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getIsEmpty(): boolean { return __S.getBit(0, this); }
    setIsEmpty(value: boolean): void { __S.setBit(0, value, this); }
    adoptSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> { return __S.disown(this.getSizes()); }
    getSizes(): capnp.List<capnp.Uint64> { return __S.getList(1, capnp.Uint64List, this); }
    hasSizes(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSizes(length: number): capnp.List<capnp.Uint64> { return __S.initList(1, capnp.Uint64List, length, this); }
    setSizes(value: capnp.List<capnp.Uint64>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "NonEmptyDomain_" + super.toString(); }
}
export class NonEmptyDomainList extends __S {
    static readonly _capnp = { displayName: "NonEmptyDomainList", id: "ec4d493d30f4b23d", size: new __O(0, 1) };
    static _NonEmptyDomains: capnp.ListCtor<NonEmptyDomain>;
    adoptNonEmptyDomains(value: capnp.Orphan<capnp.List<NonEmptyDomain>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownNonEmptyDomains(): capnp.Orphan<capnp.List<NonEmptyDomain>> { return __S.disown(this.getNonEmptyDomains()); }
    getNonEmptyDomains(): capnp.List<NonEmptyDomain> { return __S.getList(0, NonEmptyDomainList._NonEmptyDomains, this); }
    hasNonEmptyDomains(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initNonEmptyDomains(length: number): capnp.List<NonEmptyDomain> { return __S.initList(0, NonEmptyDomainList._NonEmptyDomains, length, this); }
    setNonEmptyDomains(value: capnp.List<NonEmptyDomain>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "NonEmptyDomainList_" + super.toString(); }
}
export class Attribute extends __S {
    static readonly _capnp = { displayName: "Attribute", id: "c3c6d96fc6043315", size: new __O(8, 4) };
    getCellValNum(): number { return __S.getUint32(0, this); }
    setCellValNum(value: number): void { __S.setUint32(0, value, this); }
    getName(): string { return __S.getText(0, this); }
    setName(value: string): void { __S.setText(0, value, this); }
    getType(): string { return __S.getText(1, this); }
    setType(value: string): void { __S.setText(1, value, this); }
    adoptFilterPipeline(value: capnp.Orphan<FilterPipeline>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownFilterPipeline(): capnp.Orphan<FilterPipeline> { return __S.disown(this.getFilterPipeline()); }
    getFilterPipeline(): FilterPipeline { return __S.getStruct(2, FilterPipeline, this); }
    hasFilterPipeline(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initFilterPipeline(): FilterPipeline { return __S.initStructAt(2, FilterPipeline, this); }
    setFilterPipeline(value: FilterPipeline): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptFillValue(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownFillValue(): capnp.Orphan<capnp.Data> { return __S.disown(this.getFillValue()); }
    getFillValue(): capnp.Data { return __S.getData(3, this); }
    hasFillValue(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initFillValue(length: number): capnp.Data { return __S.initData(3, length, this); }
    setFillValue(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    getNullable(): boolean { return __S.getBit(32, this); }
    setNullable(value: boolean): void { __S.setBit(32, value, this); }
    getFillValueValidity(): boolean { return __S.getBit(33, this); }
    setFillValueValidity(value: boolean): void { __S.setBit(33, value, this); }
    toString(): string { return "Attribute_" + super.toString(); }
}
export class AttributeBufferHeader extends __S {
    static readonly _capnp = { displayName: "AttributeBufferHeader", id: "9884df9a1b40f364", size: new __O(48, 1) };
    getName(): string { return __S.getText(0, this); }
    setName(value: string): void { __S.setText(0, value, this); }
    getFixedLenBufferSizeInBytes(): capnp.Uint64 { return __S.getUint64(0, this); }
    setFixedLenBufferSizeInBytes(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getVarLenBufferSizeInBytes(): capnp.Uint64 { return __S.getUint64(8, this); }
    setVarLenBufferSizeInBytes(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    getValidityLenBufferSizeInBytes(): capnp.Uint64 { return __S.getUint64(16, this); }
    setValidityLenBufferSizeInBytes(value: capnp.Uint64): void { __S.setUint64(16, value, this); }
    getOriginalFixedLenBufferSizeInBytes(): capnp.Uint64 { return __S.getUint64(24, this); }
    setOriginalFixedLenBufferSizeInBytes(value: capnp.Uint64): void { __S.setUint64(24, value, this); }
    getOriginalVarLenBufferSizeInBytes(): capnp.Uint64 { return __S.getUint64(32, this); }
    setOriginalVarLenBufferSizeInBytes(value: capnp.Uint64): void { __S.setUint64(32, value, this); }
    getOriginalValidityLenBufferSizeInBytes(): capnp.Uint64 { return __S.getUint64(40, this); }
    setOriginalValidityLenBufferSizeInBytes(value: capnp.Uint64): void { __S.setUint64(40, value, this); }
    toString(): string { return "AttributeBufferHeader_" + super.toString(); }
}
export enum Dimension_TileExtent_Which {
    INT8 = 0,
    UINT8 = 1,
    INT16 = 2,
    UINT16 = 3,
    INT32 = 4,
    UINT32 = 5,
    INT64 = 6,
    UINT64 = 7,
    FLOAT32 = 8,
    FLOAT64 = 9
}
export class Dimension_TileExtent extends __S {
    static readonly INT8 = Dimension_TileExtent_Which.INT8;
    static readonly UINT8 = Dimension_TileExtent_Which.UINT8;
    static readonly INT16 = Dimension_TileExtent_Which.INT16;
    static readonly UINT16 = Dimension_TileExtent_Which.UINT16;
    static readonly INT32 = Dimension_TileExtent_Which.INT32;
    static readonly UINT32 = Dimension_TileExtent_Which.UINT32;
    static readonly INT64 = Dimension_TileExtent_Which.INT64;
    static readonly UINT64 = Dimension_TileExtent_Which.UINT64;
    static readonly FLOAT32 = Dimension_TileExtent_Which.FLOAT32;
    static readonly FLOAT64 = Dimension_TileExtent_Which.FLOAT64;
    static readonly _capnp = { displayName: "tileExtent", id: "e669e109ac3471bd", size: new __O(16, 4) };
    getInt8(): number {
        __S.testWhich("int8", __S.getUint16(2, this), 0, this);
        return __S.getInt8(1, this);
    }
    isInt8(): boolean { return __S.getUint16(2, this) === 0; }
    setInt8(value: number): void {
        __S.setUint16(2, 0, this);
        __S.setInt8(1, value, this);
    }
    getUint8(): number {
        __S.testWhich("uint8", __S.getUint16(2, this), 1, this);
        return __S.getUint8(1, this);
    }
    isUint8(): boolean { return __S.getUint16(2, this) === 1; }
    setUint8(value: number): void {
        __S.setUint16(2, 1, this);
        __S.setUint8(1, value, this);
    }
    getInt16(): number {
        __S.testWhich("int16", __S.getUint16(2, this), 2, this);
        return __S.getInt16(4, this);
    }
    isInt16(): boolean { return __S.getUint16(2, this) === 2; }
    setInt16(value: number): void {
        __S.setUint16(2, 2, this);
        __S.setInt16(4, value, this);
    }
    getUint16(): number {
        __S.testWhich("uint16", __S.getUint16(2, this), 3, this);
        return __S.getUint16(4, this);
    }
    isUint16(): boolean { return __S.getUint16(2, this) === 3; }
    setUint16(value: number): void {
        __S.setUint16(2, 3, this);
        __S.setUint16(4, value, this);
    }
    getInt32(): number {
        __S.testWhich("int32", __S.getUint16(2, this), 4, this);
        return __S.getInt32(4, this);
    }
    isInt32(): boolean { return __S.getUint16(2, this) === 4; }
    setInt32(value: number): void {
        __S.setUint16(2, 4, this);
        __S.setInt32(4, value, this);
    }
    getUint32(): number {
        __S.testWhich("uint32", __S.getUint16(2, this), 5, this);
        return __S.getUint32(4, this);
    }
    isUint32(): boolean { return __S.getUint16(2, this) === 5; }
    setUint32(value: number): void {
        __S.setUint16(2, 5, this);
        __S.setUint32(4, value, this);
    }
    getInt64(): capnp.Int64 {
        __S.testWhich("int64", __S.getUint16(2, this), 6, this);
        return __S.getInt64(8, this);
    }
    isInt64(): boolean { return __S.getUint16(2, this) === 6; }
    setInt64(value: capnp.Int64): void {
        __S.setUint16(2, 6, this);
        __S.setInt64(8, value, this);
    }
    getUint64(): capnp.Uint64 {
        __S.testWhich("uint64", __S.getUint16(2, this), 7, this);
        return __S.getUint64(8, this);
    }
    isUint64(): boolean { return __S.getUint16(2, this) === 7; }
    setUint64(value: capnp.Uint64): void {
        __S.setUint16(2, 7, this);
        __S.setUint64(8, value, this);
    }
    getFloat32(): number {
        __S.testWhich("float32", __S.getUint16(2, this), 8, this);
        return __S.getFloat32(4, this);
    }
    isFloat32(): boolean { return __S.getUint16(2, this) === 8; }
    setFloat32(value: number): void {
        __S.setUint16(2, 8, this);
        __S.setFloat32(4, value, this);
    }
    getFloat64(): number {
        __S.testWhich("float64", __S.getUint16(2, this), 9, this);
        return __S.getFloat64(8, this);
    }
    isFloat64(): boolean { return __S.getUint16(2, this) === 9; }
    setFloat64(value: number): void {
        __S.setUint16(2, 9, this);
        __S.setFloat64(8, value, this);
    }
    toString(): string { return "Dimension_TileExtent_" + super.toString(); }
    which(): Dimension_TileExtent_Which { return __S.getUint16(2, this); }
}
export class Dimension extends __S {
    static readonly _capnp = { displayName: "Dimension", id: "8740d96d749301b9", size: new __O(16, 4) };
    getName(): string { return __S.getText(0, this); }
    setName(value: string): void { __S.setText(0, value, this); }
    getNullTileExtent(): boolean { return __S.getBit(0, this); }
    setNullTileExtent(value: boolean): void { __S.setBit(0, value, this); }
    getType(): string { return __S.getText(1, this); }
    setType(value: string): void { __S.setText(1, value, this); }
    getTileExtent(): Dimension_TileExtent { return __S.getAs(Dimension_TileExtent, this); }
    initTileExtent(): Dimension_TileExtent { return __S.getAs(Dimension_TileExtent, this); }
    adoptDomain(value: capnp.Orphan<DomainArray>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownDomain(): capnp.Orphan<DomainArray> { return __S.disown(this.getDomain()); }
    getDomain(): DomainArray { return __S.getStruct(2, DomainArray, this); }
    hasDomain(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initDomain(): DomainArray { return __S.initStructAt(2, DomainArray, this); }
    setDomain(value: DomainArray): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptFilterPipeline(value: capnp.Orphan<FilterPipeline>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownFilterPipeline(): capnp.Orphan<FilterPipeline> { return __S.disown(this.getFilterPipeline()); }
    getFilterPipeline(): FilterPipeline { return __S.getStruct(3, FilterPipeline, this); }
    hasFilterPipeline(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initFilterPipeline(): FilterPipeline { return __S.initStructAt(3, FilterPipeline, this); }
    setFilterPipeline(value: FilterPipeline): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "Dimension_" + super.toString(); }
}
export class Domain extends __S {
    static readonly _capnp = { displayName: "Domain", id: "f8ef6fb69336c12f", size: new __O(0, 4) };
    static _Dimensions: capnp.ListCtor<Dimension>;
    getCellOrder(): string { return __S.getText(0, this); }
    setCellOrder(value: string): void { __S.setText(0, value, this); }
    adoptDimensions(value: capnp.Orphan<capnp.List<Dimension>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownDimensions(): capnp.Orphan<capnp.List<Dimension>> { return __S.disown(this.getDimensions()); }
    getDimensions(): capnp.List<Dimension> { return __S.getList(1, Domain._Dimensions, this); }
    hasDimensions(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initDimensions(length: number): capnp.List<Dimension> { return __S.initList(1, Domain._Dimensions, length, this); }
    setDimensions(value: capnp.List<Dimension>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getTileOrder(): string { return __S.getText(2, this); }
    setTileOrder(value: string): void { __S.setText(2, value, this); }
    getType(): string { return __S.getText(3, this); }
    setType(value: string): void { __S.setText(3, value, this); }
    toString(): string { return "Domain_" + super.toString(); }
}
export class Array extends __S {
    static readonly _capnp = { displayName: "Array", id: "e8b44da5a3b284a4", size: new __O(16, 6) };
    getEndTimestamp(): capnp.Uint64 { return __S.getUint64(0, this); }
    setEndTimestamp(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getQueryType(): string { return __S.getText(0, this); }
    setQueryType(value: string): void { __S.setText(0, value, this); }
    getUri(): string { return __S.getText(1, this); }
    setUri(value: string): void { __S.setText(1, value, this); }
    getStartTimestamp(): capnp.Uint64 { return __S.getUint64(8, this); }
    setStartTimestamp(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    adoptArraySchemaLatest(value: capnp.Orphan<ArraySchema>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownArraySchemaLatest(): capnp.Orphan<ArraySchema> { return __S.disown(this.getArraySchemaLatest()); }
    getArraySchemaLatest(): ArraySchema { return __S.getStruct(2, ArraySchema, this); }
    hasArraySchemaLatest(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initArraySchemaLatest(): ArraySchema { return __S.initStructAt(2, ArraySchema, this); }
    setArraySchemaLatest(value: ArraySchema): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptArraySchemasAll(value: capnp.Orphan<Map>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownArraySchemasAll(): capnp.Orphan<Map> { return __S.disown(this.getArraySchemasAll()); }
    getArraySchemasAll(): Map { return __S.getStruct(3, Map, this); }
    hasArraySchemasAll(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initArraySchemasAll(): Map { return __S.initStructAt(3, Map, this); }
    setArraySchemasAll(value: Map): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptNonEmptyDomain(value: capnp.Orphan<NonEmptyDomainList>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownNonEmptyDomain(): capnp.Orphan<NonEmptyDomainList> { return __S.disown(this.getNonEmptyDomain()); }
    getNonEmptyDomain(): NonEmptyDomainList { return __S.getStruct(4, NonEmptyDomainList, this); }
    hasNonEmptyDomain(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initNonEmptyDomain(): NonEmptyDomainList { return __S.initStructAt(4, NonEmptyDomainList, this); }
    setNonEmptyDomain(value: NonEmptyDomainList): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptArrayMetadata(value: capnp.Orphan<ArrayMetadata>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownArrayMetadata(): capnp.Orphan<ArrayMetadata> { return __S.disown(this.getArrayMetadata()); }
    getArrayMetadata(): ArrayMetadata { return __S.getStruct(5, ArrayMetadata, this); }
    hasArrayMetadata(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initArrayMetadata(): ArrayMetadata { return __S.initStructAt(5, ArrayMetadata, this); }
    setArrayMetadata(value: ArrayMetadata): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    toString(): string { return "Array_" + super.toString(); }
}
export class ArrayOpen extends __S {
    static readonly _capnp = { displayName: "ArrayOpen", id: "98080e8276f32101", size: new __O(0, 2) };
    adoptConfig(value: capnp.Orphan<Config>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownConfig(): capnp.Orphan<Config> { return __S.disown(this.getConfig()); }
    getConfig(): Config { return __S.getStruct(0, Config, this); }
    hasConfig(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initConfig(): Config { return __S.initStructAt(0, Config, this); }
    setConfig(value: Config): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getQueryType(): string { return __S.getText(1, this); }
    setQueryType(value: string): void { __S.setText(1, value, this); }
    toString(): string { return "ArrayOpen_" + super.toString(); }
}
export class ArraySchema extends __S {
    static readonly _capnp = { displayName: "ArraySchema", id: "e4e6fd8e4b4df3bd", size: new __O(16, 12) };
    static _Attributes: capnp.ListCtor<Attribute>;
    getArrayType(): string { return __S.getText(0, this); }
    setArrayType(value: string): void { __S.setText(0, value, this); }
    adoptAttributes(value: capnp.Orphan<capnp.List<Attribute>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownAttributes(): capnp.Orphan<capnp.List<Attribute>> { return __S.disown(this.getAttributes()); }
    getAttributes(): capnp.List<Attribute> { return __S.getList(1, ArraySchema._Attributes, this); }
    hasAttributes(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initAttributes(length: number): capnp.List<Attribute> { return __S.initList(1, ArraySchema._Attributes, length, this); }
    setAttributes(value: capnp.List<Attribute>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getCapacity(): capnp.Uint64 { return __S.getUint64(0, this); }
    setCapacity(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getCellOrder(): string { return __S.getText(2, this); }
    setCellOrder(value: string): void { __S.setText(2, value, this); }
    adoptCoordsFilterPipeline(value: capnp.Orphan<FilterPipeline>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownCoordsFilterPipeline(): capnp.Orphan<FilterPipeline> { return __S.disown(this.getCoordsFilterPipeline()); }
    getCoordsFilterPipeline(): FilterPipeline { return __S.getStruct(3, FilterPipeline, this); }
    hasCoordsFilterPipeline(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initCoordsFilterPipeline(): FilterPipeline { return __S.initStructAt(3, FilterPipeline, this); }
    setCoordsFilterPipeline(value: FilterPipeline): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptDomain(value: capnp.Orphan<Domain>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownDomain(): capnp.Orphan<Domain> { return __S.disown(this.getDomain()); }
    getDomain(): Domain { return __S.getStruct(4, Domain, this); }
    hasDomain(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initDomain(): Domain { return __S.initStructAt(4, Domain, this); }
    setDomain(value: Domain): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptOffsetFilterPipeline(value: capnp.Orphan<FilterPipeline>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownOffsetFilterPipeline(): capnp.Orphan<FilterPipeline> { return __S.disown(this.getOffsetFilterPipeline()); }
    getOffsetFilterPipeline(): FilterPipeline { return __S.getStruct(5, FilterPipeline, this); }
    hasOffsetFilterPipeline(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initOffsetFilterPipeline(): FilterPipeline { return __S.initStructAt(5, FilterPipeline, this); }
    setOffsetFilterPipeline(value: FilterPipeline): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    getTileOrder(): string { return __S.getText(6, this); }
    setTileOrder(value: string): void { __S.setText(6, value, this); }
    getUri(): string { return __S.getText(7, this); }
    setUri(value: string): void { __S.setText(7, value, this); }
    adoptVersion(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(8, this)); }
    disownVersion(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getVersion()); }
    getVersion(): capnp.List<number> { return __S.getList(8, capnp.Int32List, this); }
    hasVersion(): boolean { return !__S.isNull(__S.getPointer(8, this)); }
    initVersion(length: number): capnp.List<number> { return __S.initList(8, capnp.Int32List, length, this); }
    setVersion(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(8, this)); }
    getAllowsDuplicates(): boolean { return __S.getBit(64, this); }
    setAllowsDuplicates(value: boolean): void { __S.setBit(64, value, this); }
    adoptValidityFilterPipeline(value: capnp.Orphan<FilterPipeline>): void { __S.adopt(value, __S.getPointer(9, this)); }
    disownValidityFilterPipeline(): capnp.Orphan<FilterPipeline> { return __S.disown(this.getValidityFilterPipeline()); }
    getValidityFilterPipeline(): FilterPipeline { return __S.getStruct(9, FilterPipeline, this); }
    hasValidityFilterPipeline(): boolean { return !__S.isNull(__S.getPointer(9, this)); }
    initValidityFilterPipeline(): FilterPipeline { return __S.initStructAt(9, FilterPipeline, this); }
    setValidityFilterPipeline(value: FilterPipeline): void { __S.copyFrom(value, __S.getPointer(9, this)); }
    getName(): string { return __S.getText(10, this); }
    setName(value: string): void { __S.setText(10, value, this); }
    adoptTimestampRange(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void { __S.adopt(value, __S.getPointer(11, this)); }
    disownTimestampRange(): capnp.Orphan<capnp.List<capnp.Uint64>> { return __S.disown(this.getTimestampRange()); }
    getTimestampRange(): capnp.List<capnp.Uint64> { return __S.getList(11, capnp.Uint64List, this); }
    hasTimestampRange(): boolean { return !__S.isNull(__S.getPointer(11, this)); }
    initTimestampRange(length: number): capnp.List<capnp.Uint64> { return __S.initList(11, capnp.Uint64List, length, this); }
    setTimestampRange(value: capnp.List<capnp.Uint64>): void { __S.copyFrom(value, __S.getPointer(11, this)); }
    toString(): string { return "ArraySchema_" + super.toString(); }
}
export class FloatScaleConfig extends __S {
    static readonly _capnp = { displayName: "FloatScaleConfig", id: "e2405479453349b4", size: new __O(24, 0) };
    getScale(): number { return __S.getFloat64(0, this); }
    setScale(value: number): void { __S.setFloat64(0, value, this); }
    getOffset(): number { return __S.getFloat64(8, this); }
    setOffset(value: number): void { __S.setFloat64(8, value, this); }
    getByteWidth(): capnp.Uint64 { return __S.getUint64(16, this); }
    setByteWidth(value: capnp.Uint64): void { __S.setUint64(16, value, this); }
    toString(): string { return "FloatScaleConfig_" + super.toString(); }
}
export enum Filter_Data_Which {
    TEXT = 0,
    BYTES = 1,
    INT8 = 2,
    UINT8 = 3,
    INT16 = 4,
    UINT16 = 5,
    INT32 = 6,
    UINT32 = 7,
    INT64 = 8,
    UINT64 = 9,
    FLOAT32 = 10,
    FLOAT64 = 11
}
export class Filter_Data extends __S {
    static readonly TEXT = Filter_Data_Which.TEXT;
    static readonly BYTES = Filter_Data_Which.BYTES;
    static readonly INT8 = Filter_Data_Which.INT8;
    static readonly UINT8 = Filter_Data_Which.UINT8;
    static readonly INT16 = Filter_Data_Which.INT16;
    static readonly UINT16 = Filter_Data_Which.UINT16;
    static readonly INT32 = Filter_Data_Which.INT32;
    static readonly UINT32 = Filter_Data_Which.UINT32;
    static readonly INT64 = Filter_Data_Which.INT64;
    static readonly UINT64 = Filter_Data_Which.UINT64;
    static readonly FLOAT32 = Filter_Data_Which.FLOAT32;
    static readonly FLOAT64 = Filter_Data_Which.FLOAT64;
    static readonly _capnp = { displayName: "data", id: "f7e88fec77255f9a", size: new __O(16, 3) };
    getText(): string {
        __S.testWhich("text", __S.getUint16(0, this), 0, this);
        return __S.getText(1, this);
    }
    isText(): boolean { return __S.getUint16(0, this) === 0; }
    setText(value: string): void {
        __S.setUint16(0, 0, this);
        __S.setText(1, value, this);
    }
    adoptBytes(value: capnp.Orphan<capnp.Data>): void {
        __S.setUint16(0, 1, this);
        __S.adopt(value, __S.getPointer(1, this));
    }
    disownBytes(): capnp.Orphan<capnp.Data> { return __S.disown(this.getBytes()); }
    getBytes(): capnp.Data {
        __S.testWhich("bytes", __S.getUint16(0, this), 1, this);
        return __S.getData(1, this);
    }
    hasBytes(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initBytes(length: number): capnp.Data {
        __S.setUint16(0, 1, this);
        return __S.initData(1, length, this);
    }
    isBytes(): boolean { return __S.getUint16(0, this) === 1; }
    setBytes(value: capnp.Data): void {
        __S.setUint16(0, 1, this);
        __S.copyFrom(value, __S.getPointer(1, this));
    }
    getInt8(): number {
        __S.testWhich("int8", __S.getUint16(0, this), 2, this);
        return __S.getInt8(2, this);
    }
    isInt8(): boolean { return __S.getUint16(0, this) === 2; }
    setInt8(value: number): void {
        __S.setUint16(0, 2, this);
        __S.setInt8(2, value, this);
    }
    getUint8(): number {
        __S.testWhich("uint8", __S.getUint16(0, this), 3, this);
        return __S.getUint8(2, this);
    }
    isUint8(): boolean { return __S.getUint16(0, this) === 3; }
    setUint8(value: number): void {
        __S.setUint16(0, 3, this);
        __S.setUint8(2, value, this);
    }
    getInt16(): number {
        __S.testWhich("int16", __S.getUint16(0, this), 4, this);
        return __S.getInt16(2, this);
    }
    isInt16(): boolean { return __S.getUint16(0, this) === 4; }
    setInt16(value: number): void {
        __S.setUint16(0, 4, this);
        __S.setInt16(2, value, this);
    }
    getUint16(): number {
        __S.testWhich("uint16", __S.getUint16(0, this), 5, this);
        return __S.getUint16(2, this);
    }
    isUint16(): boolean { return __S.getUint16(0, this) === 5; }
    setUint16(value: number): void {
        __S.setUint16(0, 5, this);
        __S.setUint16(2, value, this);
    }
    getInt32(): number {
        __S.testWhich("int32", __S.getUint16(0, this), 6, this);
        return __S.getInt32(4, this);
    }
    isInt32(): boolean { return __S.getUint16(0, this) === 6; }
    setInt32(value: number): void {
        __S.setUint16(0, 6, this);
        __S.setInt32(4, value, this);
    }
    getUint32(): number {
        __S.testWhich("uint32", __S.getUint16(0, this), 7, this);
        return __S.getUint32(4, this);
    }
    isUint32(): boolean { return __S.getUint16(0, this) === 7; }
    setUint32(value: number): void {
        __S.setUint16(0, 7, this);
        __S.setUint32(4, value, this);
    }
    getInt64(): capnp.Int64 {
        __S.testWhich("int64", __S.getUint16(0, this), 8, this);
        return __S.getInt64(8, this);
    }
    isInt64(): boolean { return __S.getUint16(0, this) === 8; }
    setInt64(value: capnp.Int64): void {
        __S.setUint16(0, 8, this);
        __S.setInt64(8, value, this);
    }
    getUint64(): capnp.Uint64 {
        __S.testWhich("uint64", __S.getUint16(0, this), 9, this);
        return __S.getUint64(8, this);
    }
    isUint64(): boolean { return __S.getUint16(0, this) === 9; }
    setUint64(value: capnp.Uint64): void {
        __S.setUint16(0, 9, this);
        __S.setUint64(8, value, this);
    }
    getFloat32(): number {
        __S.testWhich("float32", __S.getUint16(0, this), 10, this);
        return __S.getFloat32(4, this);
    }
    isFloat32(): boolean { return __S.getUint16(0, this) === 10; }
    setFloat32(value: number): void {
        __S.setUint16(0, 10, this);
        __S.setFloat32(4, value, this);
    }
    getFloat64(): number {
        __S.testWhich("float64", __S.getUint16(0, this), 11, this);
        return __S.getFloat64(8, this);
    }
    isFloat64(): boolean { return __S.getUint16(0, this) === 11; }
    setFloat64(value: number): void {
        __S.setUint16(0, 11, this);
        __S.setFloat64(8, value, this);
    }
    toString(): string { return "Filter_Data_" + super.toString(); }
    which(): Filter_Data_Which { return __S.getUint16(0, this); }
}
export class Filter extends __S {
    static readonly _capnp = { displayName: "Filter", id: "dac88a0a3b53a50a", size: new __O(16, 3) };
    getType(): string { return __S.getText(0, this); }
    setType(value: string): void { __S.setText(0, value, this); }
    getData(): Filter_Data { return __S.getAs(Filter_Data, this); }
    initData(): Filter_Data { return __S.getAs(Filter_Data, this); }
    adoptFloatScaleConfig(value: capnp.Orphan<FloatScaleConfig>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownFloatScaleConfig(): capnp.Orphan<FloatScaleConfig> { return __S.disown(this.getFloatScaleConfig()); }
    getFloatScaleConfig(): FloatScaleConfig { return __S.getStruct(2, FloatScaleConfig, this); }
    hasFloatScaleConfig(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initFloatScaleConfig(): FloatScaleConfig { return __S.initStructAt(2, FloatScaleConfig, this); }
    setFloatScaleConfig(value: FloatScaleConfig): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    toString(): string { return "Filter_" + super.toString(); }
}
export class FilterPipeline extends __S {
    static readonly _capnp = { displayName: "FilterPipeline", id: "a6d903a3c84d4809", size: new __O(0, 1) };
    static _Filters: capnp.ListCtor<Filter>;
    adoptFilters(value: capnp.Orphan<capnp.List<Filter>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownFilters(): capnp.Orphan<capnp.List<Filter>> { return __S.disown(this.getFilters()); }
    getFilters(): capnp.List<Filter> { return __S.getList(0, FilterPipeline._Filters, this); }
    hasFilters(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initFilters(length: number): capnp.List<Filter> { return __S.initList(0, FilterPipeline._Filters, length, this); }
    setFilters(value: capnp.List<Filter>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "FilterPipeline_" + super.toString(); }
}
export class ArraySchemaMap_Entry extends __S {
    static readonly _capnp = { displayName: "Entry", id: "f6918b8d3d6aaece", size: new __O(0, 2) };
    getKey(): string { return __S.getText(0, this); }
    setKey(value: string): void { __S.setText(0, value, this); }
    adoptValue(value: capnp.Orphan<ArraySchema>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownValue(): capnp.Orphan<ArraySchema> { return __S.disown(this.getValue()); }
    getValue(): ArraySchema { return __S.getStruct(1, ArraySchema, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initValue(): ArraySchema { return __S.initStructAt(1, ArraySchema, this); }
    setValue(value: ArraySchema): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "ArraySchemaMap_Entry_" + super.toString(); }
}
export class ArraySchemaMap extends __S {
    static readonly Entry = ArraySchemaMap_Entry;
    static readonly _capnp = { displayName: "ArraySchemaMap", id: "fd01f8198120e948", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<ArraySchemaMap_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<ArraySchemaMap_Entry>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<ArraySchemaMap_Entry>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<ArraySchemaMap_Entry> { return __S.getList(0, ArraySchemaMap._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<ArraySchemaMap_Entry> { return __S.initList(0, ArraySchemaMap._Entries, length, this); }
    setEntries(value: capnp.List<ArraySchemaMap_Entry>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "ArraySchemaMap_" + super.toString(); }
}
export class Map_Entry extends __S {
    static readonly _capnp = { displayName: "Entry", id: "9d58857f4eaf2e0b", size: new __O(0, 2) };
    adoptKey(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownKey(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getKey()); }
    getKey(): capnp.Pointer { return __S.getPointer(0, this); }
    hasKey(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    setKey(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptValue(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownValue(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getValue()); }
    getValue(): capnp.Pointer { return __S.getPointer(1, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    setValue(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "Map_Entry_" + super.toString(); }
}
export class Map extends __S {
    static readonly Entry = Map_Entry;
    static readonly _capnp = { displayName: "Map", id: "d49ce2e3753dec00", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<Map_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<Map_Entry>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<Map_Entry>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<Map_Entry> { return __S.getList(0, Map._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<Map_Entry> { return __S.initList(0, Map._Entries, length, this); }
    setEntries(value: capnp.List<Map_Entry>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "Map_" + super.toString(); }
}
export class KV extends __S {
    static readonly _capnp = { displayName: "KV", id: "f81811af0443b7bd", size: new __O(0, 2) };
    getKey(): string { return __S.getText(0, this); }
    setKey(value: string): void { __S.setText(0, value, this); }
    getValue(): string { return __S.getText(1, this); }
    setValue(value: string): void { __S.setText(1, value, this); }
    toString(): string { return "KV_" + super.toString(); }
}
export class Config extends __S {
    static readonly _capnp = { displayName: "Config", id: "84e9e25074e7b66d", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<KV>;
    adoptEntries(value: capnp.Orphan<capnp.List<KV>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<KV>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<KV> { return __S.getList(0, Config._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<KV> { return __S.initList(0, Config._Entries, length, this); }
    setEntries(value: capnp.List<KV>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "Config_" + super.toString(); }
}
export class Stats extends __S {
    static readonly _capnp = { displayName: "Stats", id: "ef6314d713d0ab34", size: new __O(0, 2) };
    adoptTimers(value: capnp.Orphan<MapFloat64>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownTimers(): capnp.Orphan<MapFloat64> { return __S.disown(this.getTimers()); }
    getTimers(): MapFloat64 { return __S.getStruct(0, MapFloat64, this); }
    hasTimers(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initTimers(): MapFloat64 { return __S.initStructAt(0, MapFloat64, this); }
    setTimers(value: MapFloat64): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptCounters(value: capnp.Orphan<MapUInt64>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownCounters(): capnp.Orphan<MapUInt64> { return __S.disown(this.getCounters()); }
    getCounters(): MapUInt64 { return __S.getStruct(1, MapUInt64, this); }
    hasCounters(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initCounters(): MapUInt64 { return __S.initStructAt(1, MapUInt64, this); }
    setCounters(value: MapUInt64): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "Stats_" + super.toString(); }
}
export class Writer extends __S {
    static readonly _capnp = { displayName: "Writer", id: "fe68eabb8ab4dcfa", size: new __O(8, 3) };
    getCheckCoordDups(): boolean { return __S.getBit(0, this); }
    setCheckCoordDups(value: boolean): void { __S.setBit(0, value, this); }
    getCheckCoordOOB(): boolean { return __S.getBit(1, this); }
    setCheckCoordOOB(value: boolean): void { __S.setBit(1, value, this); }
    getDedupCoords(): boolean { return __S.getBit(2, this); }
    setDedupCoords(value: boolean): void { __S.setBit(2, value, this); }
    adoptSubarray(value: capnp.Orphan<DomainArray>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSubarray(): capnp.Orphan<DomainArray> { return __S.disown(this.getSubarray()); }
    getSubarray(): DomainArray { return __S.getStruct(0, DomainArray, this); }
    hasSubarray(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSubarray(): DomainArray { return __S.initStructAt(0, DomainArray, this); }
    setSubarray(value: DomainArray): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSubarrayRanges(value: capnp.Orphan<Subarray>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSubarrayRanges(): capnp.Orphan<Subarray> { return __S.disown(this.getSubarrayRanges()); }
    getSubarrayRanges(): Subarray { return __S.getStruct(1, Subarray, this); }
    hasSubarrayRanges(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSubarrayRanges(): Subarray { return __S.initStructAt(1, Subarray, this); }
    setSubarrayRanges(value: Subarray): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptStats(value: capnp.Orphan<Stats>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownStats(): capnp.Orphan<Stats> { return __S.disown(this.getStats()); }
    getStats(): Stats { return __S.getStruct(2, Stats, this); }
    hasStats(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initStats(): Stats { return __S.initStructAt(2, Stats, this); }
    setStats(value: Stats): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    toString(): string { return "Writer_" + super.toString(); }
}
export class QueryReader extends __S {
    static readonly _capnp = { displayName: "QueryReader", id: "97a817df79d1095d", size: new __O(0, 5) };
    getLayout(): string { return __S.getText(0, this); }
    setLayout(value: string): void { __S.setText(0, value, this); }
    adoptSubarray(value: capnp.Orphan<Subarray>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSubarray(): capnp.Orphan<Subarray> { return __S.disown(this.getSubarray()); }
    getSubarray(): Subarray { return __S.getStruct(1, Subarray, this); }
    hasSubarray(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSubarray(): Subarray { return __S.initStructAt(1, Subarray, this); }
    setSubarray(value: Subarray): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptReadState(value: capnp.Orphan<ReadState>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownReadState(): capnp.Orphan<ReadState> { return __S.disown(this.getReadState()); }
    getReadState(): ReadState { return __S.getStruct(2, ReadState, this); }
    hasReadState(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initReadState(): ReadState { return __S.initStructAt(2, ReadState, this); }
    setReadState(value: ReadState): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptCondition(value: capnp.Orphan<Condition>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownCondition(): capnp.Orphan<Condition> { return __S.disown(this.getCondition()); }
    getCondition(): Condition { return __S.getStruct(3, Condition, this); }
    hasCondition(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initCondition(): Condition { return __S.initStructAt(3, Condition, this); }
    setCondition(value: Condition): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptStats(value: capnp.Orphan<Stats>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownStats(): capnp.Orphan<Stats> { return __S.disown(this.getStats()); }
    getStats(): Stats { return __S.getStruct(4, Stats, this); }
    hasStats(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initStats(): Stats { return __S.initStructAt(4, Stats, this); }
    setStats(value: Stats): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    toString(): string { return "QueryReader_" + super.toString(); }
}
export class SubarrayRanges extends __S {
    static readonly _capnp = { displayName: "SubarrayRanges", id: "8587733f29e10a41", size: new __O(8, 4) };
    getType(): string { return __S.getText(0, this); }
    setType(value: string): void { __S.setText(0, value, this); }
    getHasDefaultRange(): boolean { return __S.getBit(0, this); }
    setHasDefaultRange(value: boolean): void { __S.setBit(0, value, this); }
    adoptBuffer(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownBuffer(): capnp.Orphan<capnp.Data> { return __S.disown(this.getBuffer()); }
    getBuffer(): capnp.Data { return __S.getData(1, this); }
    hasBuffer(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initBuffer(length: number): capnp.Data { return __S.initData(1, length, this); }
    setBuffer(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptBufferSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownBufferSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> { return __S.disown(this.getBufferSizes()); }
    getBufferSizes(): capnp.List<capnp.Uint64> { return __S.getList(2, capnp.Uint64List, this); }
    hasBufferSizes(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initBufferSizes(length: number): capnp.List<capnp.Uint64> { return __S.initList(2, capnp.Uint64List, length, this); }
    setBufferSizes(value: capnp.List<capnp.Uint64>): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptBufferStartSizes(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownBufferStartSizes(): capnp.Orphan<capnp.List<capnp.Uint64>> { return __S.disown(this.getBufferStartSizes()); }
    getBufferStartSizes(): capnp.List<capnp.Uint64> { return __S.getList(3, capnp.Uint64List, this); }
    hasBufferStartSizes(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initBufferStartSizes(length: number): capnp.List<capnp.Uint64> { return __S.initList(3, capnp.Uint64List, length, this); }
    setBufferStartSizes(value: capnp.List<capnp.Uint64>): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "SubarrayRanges_" + super.toString(); }
}
export class Subarray extends __S {
    static readonly _capnp = { displayName: "Subarray", id: "da36de34a7124afb", size: new __O(0, 3) };
    static _Ranges: capnp.ListCtor<SubarrayRanges>;
    getLayout(): string { return __S.getText(0, this); }
    setLayout(value: string): void { __S.setText(0, value, this); }
    adoptRanges(value: capnp.Orphan<capnp.List<SubarrayRanges>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownRanges(): capnp.Orphan<capnp.List<SubarrayRanges>> { return __S.disown(this.getRanges()); }
    getRanges(): capnp.List<SubarrayRanges> { return __S.getList(1, Subarray._Ranges, this); }
    hasRanges(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initRanges(length: number): capnp.List<SubarrayRanges> { return __S.initList(1, Subarray._Ranges, length, this); }
    setRanges(value: capnp.List<SubarrayRanges>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptStats(value: capnp.Orphan<Stats>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownStats(): capnp.Orphan<Stats> { return __S.disown(this.getStats()); }
    getStats(): Stats { return __S.getStruct(2, Stats, this); }
    hasStats(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initStats(): Stats { return __S.initStructAt(2, Stats, this); }
    setStats(value: Stats): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    toString(): string { return "Subarray_" + super.toString(); }
}
export class SubarrayPartitioner_PartitionInfo extends __S {
    static readonly _capnp = { displayName: "PartitionInfo", id: "c195bcd1baa34c68", size: new __O(24, 1) };
    adoptSubarray(value: capnp.Orphan<Subarray>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSubarray(): capnp.Orphan<Subarray> { return __S.disown(this.getSubarray()); }
    getSubarray(): Subarray { return __S.getStruct(0, Subarray, this); }
    hasSubarray(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSubarray(): Subarray { return __S.initStructAt(0, Subarray, this); }
    setSubarray(value: Subarray): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getStart(): capnp.Uint64 { return __S.getUint64(0, this); }
    setStart(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getEnd(): capnp.Uint64 { return __S.getUint64(8, this); }
    setEnd(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    getSplitMultiRange(): boolean { return __S.getBit(128, this); }
    setSplitMultiRange(value: boolean): void { __S.setBit(128, value, this); }
    toString(): string { return "SubarrayPartitioner_PartitionInfo_" + super.toString(); }
}
export class SubarrayPartitioner_State extends __S {
    static readonly _capnp = { displayName: "State", id: "cbd6edafbf7bb215", size: new __O(16, 2) };
    static _SingleRange: capnp.ListCtor<Subarray>;
    static _MultiRange: capnp.ListCtor<Subarray>;
    getStart(): capnp.Uint64 { return __S.getUint64(0, this); }
    setStart(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getEnd(): capnp.Uint64 { return __S.getUint64(8, this); }
    setEnd(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    adoptSingleRange(value: capnp.Orphan<capnp.List<Subarray>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSingleRange(): capnp.Orphan<capnp.List<Subarray>> { return __S.disown(this.getSingleRange()); }
    getSingleRange(): capnp.List<Subarray> { return __S.getList(0, SubarrayPartitioner_State._SingleRange, this); }
    hasSingleRange(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSingleRange(length: number): capnp.List<Subarray> { return __S.initList(0, SubarrayPartitioner_State._SingleRange, length, this); }
    setSingleRange(value: capnp.List<Subarray>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptMultiRange(value: capnp.Orphan<capnp.List<Subarray>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownMultiRange(): capnp.Orphan<capnp.List<Subarray>> { return __S.disown(this.getMultiRange()); }
    getMultiRange(): capnp.List<Subarray> { return __S.getList(1, SubarrayPartitioner_State._MultiRange, this); }
    hasMultiRange(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initMultiRange(length: number): capnp.List<Subarray> { return __S.initList(1, SubarrayPartitioner_State._MultiRange, length, this); }
    setMultiRange(value: capnp.List<Subarray>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "SubarrayPartitioner_State_" + super.toString(); }
}
export class SubarrayPartitioner extends __S {
    static readonly PartitionInfo = SubarrayPartitioner_PartitionInfo;
    static readonly State = SubarrayPartitioner_State;
    static readonly _capnp = { displayName: "SubarrayPartitioner", id: "98222aaeac2b06c0", size: new __O(24, 5) };
    static _Budget: capnp.ListCtor<AttributeBufferSize>;
    adoptSubarray(value: capnp.Orphan<Subarray>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSubarray(): capnp.Orphan<Subarray> { return __S.disown(this.getSubarray()); }
    getSubarray(): Subarray { return __S.getStruct(0, Subarray, this); }
    hasSubarray(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSubarray(): Subarray { return __S.initStructAt(0, Subarray, this); }
    setSubarray(value: Subarray): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptBudget(value: capnp.Orphan<capnp.List<AttributeBufferSize>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownBudget(): capnp.Orphan<capnp.List<AttributeBufferSize>> { return __S.disown(this.getBudget()); }
    getBudget(): capnp.List<AttributeBufferSize> { return __S.getList(1, SubarrayPartitioner._Budget, this); }
    hasBudget(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initBudget(length: number): capnp.List<AttributeBufferSize> { return __S.initList(1, SubarrayPartitioner._Budget, length, this); }
    setBudget(value: capnp.List<AttributeBufferSize>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptCurrent(value: capnp.Orphan<SubarrayPartitioner_PartitionInfo>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownCurrent(): capnp.Orphan<SubarrayPartitioner_PartitionInfo> { return __S.disown(this.getCurrent()); }
    getCurrent(): SubarrayPartitioner_PartitionInfo { return __S.getStruct(2, SubarrayPartitioner_PartitionInfo, this); }
    hasCurrent(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initCurrent(): SubarrayPartitioner_PartitionInfo { return __S.initStructAt(2, SubarrayPartitioner_PartitionInfo, this); }
    setCurrent(value: SubarrayPartitioner_PartitionInfo): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptState(value: capnp.Orphan<SubarrayPartitioner_State>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownState(): capnp.Orphan<SubarrayPartitioner_State> { return __S.disown(this.getState()); }
    getState(): SubarrayPartitioner_State { return __S.getStruct(3, SubarrayPartitioner_State, this); }
    hasState(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initState(): SubarrayPartitioner_State { return __S.initStructAt(3, SubarrayPartitioner_State, this); }
    setState(value: SubarrayPartitioner_State): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    getMemoryBudget(): capnp.Uint64 { return __S.getUint64(0, this); }
    setMemoryBudget(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getMemoryBudgetVar(): capnp.Uint64 { return __S.getUint64(8, this); }
    setMemoryBudgetVar(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    getMemoryBudgetValidity(): capnp.Uint64 { return __S.getUint64(16, this); }
    setMemoryBudgetValidity(value: capnp.Uint64): void { __S.setUint64(16, value, this); }
    adoptStats(value: capnp.Orphan<Stats>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownStats(): capnp.Orphan<Stats> { return __S.disown(this.getStats()); }
    getStats(): Stats { return __S.getStruct(4, Stats, this); }
    hasStats(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initStats(): Stats { return __S.initStructAt(4, Stats, this); }
    setStats(value: Stats): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    toString(): string { return "SubarrayPartitioner_" + super.toString(); }
}
export class ReadState extends __S {
    static readonly _capnp = { displayName: "ReadState", id: "910b5afbbc6a0745", size: new __O(8, 1) };
    getOverflowed(): boolean { return __S.getBit(0, this); }
    setOverflowed(value: boolean): void { __S.setBit(0, value, this); }
    getUnsplittable(): boolean { return __S.getBit(1, this); }
    setUnsplittable(value: boolean): void { __S.setBit(1, value, this); }
    getInitialized(): boolean { return __S.getBit(2, this); }
    setInitialized(value: boolean): void { __S.setBit(2, value, this); }
    adoptSubarrayPartitioner(value: capnp.Orphan<SubarrayPartitioner>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSubarrayPartitioner(): capnp.Orphan<SubarrayPartitioner> { return __S.disown(this.getSubarrayPartitioner()); }
    getSubarrayPartitioner(): SubarrayPartitioner { return __S.getStruct(0, SubarrayPartitioner, this); }
    hasSubarrayPartitioner(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSubarrayPartitioner(): SubarrayPartitioner { return __S.initStructAt(0, SubarrayPartitioner, this); }
    setSubarrayPartitioner(value: SubarrayPartitioner): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "ReadState_" + super.toString(); }
}
export class ConditionClause extends __S {
    static readonly _capnp = { displayName: "ConditionClause", id: "fa99a0f16eaa03a5", size: new __O(0, 3) };
    getFieldName(): string { return __S.getText(0, this); }
    setFieldName(value: string): void { __S.setText(0, value, this); }
    adoptValue(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownValue(): capnp.Orphan<capnp.Data> { return __S.disown(this.getValue()); }
    getValue(): capnp.Data { return __S.getData(1, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initValue(length: number): capnp.Data { return __S.initData(1, length, this); }
    setValue(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getOp(): string { return __S.getText(2, this); }
    setOp(value: string): void { __S.setText(2, value, this); }
    toString(): string { return "ConditionClause_" + super.toString(); }
}
export class Condition extends __S {
    static readonly _capnp = { displayName: "Condition", id: "fb156e2d8b8f4cf3", size: new __O(0, 2) };
    static _Clauses: capnp.ListCtor<ConditionClause>;
    adoptClauses(value: capnp.Orphan<capnp.List<ConditionClause>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownClauses(): capnp.Orphan<capnp.List<ConditionClause>> { return __S.disown(this.getClauses()); }
    getClauses(): capnp.List<ConditionClause> { return __S.getList(0, Condition._Clauses, this); }
    hasClauses(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initClauses(length: number): capnp.List<ConditionClause> { return __S.initList(0, Condition._Clauses, length, this); }
    setClauses(value: capnp.List<ConditionClause>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptClauseCombinationOps(value: capnp.Orphan<capnp.List<string>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownClauseCombinationOps(): capnp.Orphan<capnp.List<string>> { return __S.disown(this.getClauseCombinationOps()); }
    getClauseCombinationOps(): capnp.List<string> { return __S.getList(1, capnp.TextList, this); }
    hasClauseCombinationOps(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initClauseCombinationOps(length: number): capnp.List<string> { return __S.initList(1, capnp.TextList, length, this); }
    setClauseCombinationOps(value: capnp.List<string>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "Condition_" + super.toString(); }
}
export class DomainArray extends __S {
    static readonly _capnp = { displayName: "DomainArray", id: "bc387f87af7fdffb", size: new __O(0, 10) };
    adoptInt8(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownInt8(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt8()); }
    getInt8(): capnp.List<number> { return __S.getList(0, capnp.Int8List, this); }
    hasInt8(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initInt8(length: number): capnp.List<number> { return __S.initList(0, capnp.Int8List, length, this); }
    setInt8(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptUint8(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownUint8(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUint8()); }
    getUint8(): capnp.List<number> { return __S.getList(1, capnp.Uint8List, this); }
    hasUint8(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initUint8(length: number): capnp.List<number> { return __S.initList(1, capnp.Uint8List, length, this); }
    setUint8(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptInt16(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownInt16(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt16()); }
    getInt16(): capnp.List<number> { return __S.getList(2, capnp.Int16List, this); }
    hasInt16(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initInt16(length: number): capnp.List<number> { return __S.initList(2, capnp.Int16List, length, this); }
    setInt16(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptUint16(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownUint16(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUint16()); }
    getUint16(): capnp.List<number> { return __S.getList(3, capnp.Uint16List, this); }
    hasUint16(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initUint16(length: number): capnp.List<number> { return __S.initList(3, capnp.Uint16List, length, this); }
    setUint16(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptInt32(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownInt32(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getInt32()); }
    getInt32(): capnp.List<number> { return __S.getList(4, capnp.Int32List, this); }
    hasInt32(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initInt32(length: number): capnp.List<number> { return __S.initList(4, capnp.Int32List, length, this); }
    setInt32(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    adoptUint32(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownUint32(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getUint32()); }
    getUint32(): capnp.List<number> { return __S.getList(5, capnp.Uint32List, this); }
    hasUint32(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initUint32(length: number): capnp.List<number> { return __S.initList(5, capnp.Uint32List, length, this); }
    setUint32(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    adoptInt64(value: capnp.Orphan<capnp.List<capnp.Int64>>): void { __S.adopt(value, __S.getPointer(6, this)); }
    disownInt64(): capnp.Orphan<capnp.List<capnp.Int64>> { return __S.disown(this.getInt64()); }
    getInt64(): capnp.List<capnp.Int64> { return __S.getList(6, capnp.Int64List, this); }
    hasInt64(): boolean { return !__S.isNull(__S.getPointer(6, this)); }
    initInt64(length: number): capnp.List<capnp.Int64> { return __S.initList(6, capnp.Int64List, length, this); }
    setInt64(value: capnp.List<capnp.Int64>): void { __S.copyFrom(value, __S.getPointer(6, this)); }
    adoptUint64(value: capnp.Orphan<capnp.List<capnp.Uint64>>): void { __S.adopt(value, __S.getPointer(7, this)); }
    disownUint64(): capnp.Orphan<capnp.List<capnp.Uint64>> { return __S.disown(this.getUint64()); }
    getUint64(): capnp.List<capnp.Uint64> { return __S.getList(7, capnp.Uint64List, this); }
    hasUint64(): boolean { return !__S.isNull(__S.getPointer(7, this)); }
    initUint64(length: number): capnp.List<capnp.Uint64> { return __S.initList(7, capnp.Uint64List, length, this); }
    setUint64(value: capnp.List<capnp.Uint64>): void { __S.copyFrom(value, __S.getPointer(7, this)); }
    adoptFloat32(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(8, this)); }
    disownFloat32(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getFloat32()); }
    getFloat32(): capnp.List<number> { return __S.getList(8, capnp.Float32List, this); }
    hasFloat32(): boolean { return !__S.isNull(__S.getPointer(8, this)); }
    initFloat32(length: number): capnp.List<number> { return __S.initList(8, capnp.Float32List, length, this); }
    setFloat32(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(8, this)); }
    adoptFloat64(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(9, this)); }
    disownFloat64(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getFloat64()); }
    getFloat64(): capnp.List<number> { return __S.getList(9, capnp.Float64List, this); }
    hasFloat64(): boolean { return !__S.isNull(__S.getPointer(9, this)); }
    initFloat64(length: number): capnp.List<number> { return __S.initList(9, capnp.Float64List, length, this); }
    setFloat64(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(9, this)); }
    toString(): string { return "DomainArray_" + super.toString(); }
}
export class MapFloat64_Entry extends __S {
    static readonly _capnp = { displayName: "Entry", id: "bc6fa37d7f8e67b0", size: new __O(8, 1) };
    getKey(): string { return __S.getText(0, this); }
    setKey(value: string): void { __S.setText(0, value, this); }
    getValue(): number { return __S.getFloat64(0, this); }
    setValue(value: number): void { __S.setFloat64(0, value, this); }
    toString(): string { return "MapFloat64_Entry_" + super.toString(); }
}
export class MapFloat64 extends __S {
    static readonly Entry = MapFloat64_Entry;
    static readonly _capnp = { displayName: "MapFloat64", id: "a240366668f18d8e", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<MapFloat64_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<MapFloat64_Entry>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<MapFloat64_Entry>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<MapFloat64_Entry> { return __S.getList(0, MapFloat64._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<MapFloat64_Entry> { return __S.initList(0, MapFloat64._Entries, length, this); }
    setEntries(value: capnp.List<MapFloat64_Entry>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "MapFloat64_" + super.toString(); }
}
export class MapUInt64_Entry extends __S {
    static readonly _capnp = { displayName: "Entry", id: "977674438c18071e", size: new __O(8, 1) };
    getKey(): string { return __S.getText(0, this); }
    setKey(value: string): void { __S.setText(0, value, this); }
    getValue(): capnp.Uint64 { return __S.getUint64(0, this); }
    setValue(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    toString(): string { return "MapUInt64_Entry_" + super.toString(); }
}
export class MapUInt64 extends __S {
    static readonly Entry = MapUInt64_Entry;
    static readonly _capnp = { displayName: "MapUInt64", id: "de734faff53aa239", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<MapUInt64_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<MapUInt64_Entry>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<MapUInt64_Entry>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<MapUInt64_Entry> { return __S.getList(0, MapUInt64._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<MapUInt64_Entry> { return __S.initList(0, MapUInt64._Entries, length, this); }
    setEntries(value: capnp.List<MapUInt64_Entry>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "MapUInt64_" + super.toString(); }
}
export class AttributeBufferSize extends __S {
    static readonly _capnp = { displayName: "AttributeBufferSize", id: "e8c3366db226bb6a", size: new __O(24, 1) };
    getAttribute(): string { return __S.getText(0, this); }
    setAttribute(value: string): void { __S.setText(0, value, this); }
    getOffsetBytes(): capnp.Uint64 { return __S.getUint64(0, this); }
    setOffsetBytes(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getDataBytes(): capnp.Uint64 { return __S.getUint64(8, this); }
    setDataBytes(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    getValidityBytes(): capnp.Uint64 { return __S.getUint64(16, this); }
    setValidityBytes(value: capnp.Uint64): void { __S.setUint64(16, value, this); }
    toString(): string { return "AttributeBufferSize_" + super.toString(); }
}
export class ArrayMetadata_MetadataEntry extends __S {
    static readonly _capnp = { displayName: "MetadataEntry", id: "dc11d0ec5c20f3f9", size: new __O(8, 3) };
    getKey(): string { return __S.getText(0, this); }
    setKey(value: string): void { __S.setText(0, value, this); }
    getType(): string { return __S.getText(1, this); }
    setType(value: string): void { __S.setText(1, value, this); }
    getValueNum(): number { return __S.getUint32(0, this); }
    setValueNum(value: number): void { __S.setUint32(0, value, this); }
    adoptValue(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownValue(): capnp.Orphan<capnp.Data> { return __S.disown(this.getValue()); }
    getValue(): capnp.Data { return __S.getData(2, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initValue(length: number): capnp.Data { return __S.initData(2, length, this); }
    setValue(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    getDel(): boolean { return __S.getBit(32, this); }
    setDel(value: boolean): void { __S.setBit(32, value, this); }
    toString(): string { return "ArrayMetadata_MetadataEntry_" + super.toString(); }
}
export class ArrayMetadata extends __S {
    static readonly MetadataEntry = ArrayMetadata_MetadataEntry;
    static readonly _capnp = { displayName: "ArrayMetadata", id: "b34f96d2ab41185f", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<ArrayMetadata_MetadataEntry>;
    adoptEntries(value: capnp.Orphan<capnp.List<ArrayMetadata_MetadataEntry>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<ArrayMetadata_MetadataEntry>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<ArrayMetadata_MetadataEntry> { return __S.getList(0, ArrayMetadata._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<ArrayMetadata_MetadataEntry> { return __S.initList(0, ArrayMetadata._Entries, length, this); }
    setEntries(value: capnp.List<ArrayMetadata_MetadataEntry>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "ArrayMetadata_" + super.toString(); }
}
Query._AttributeBufferHeaders = capnp.CompositeList(AttributeBufferHeader);
NonEmptyDomainList._NonEmptyDomains = capnp.CompositeList(NonEmptyDomain);
Domain._Dimensions = capnp.CompositeList(Dimension);
ArraySchema._Attributes = capnp.CompositeList(Attribute);
FilterPipeline._Filters = capnp.CompositeList(Filter);
ArraySchemaMap._Entries = capnp.CompositeList(ArraySchemaMap_Entry);
Map._Entries = capnp.CompositeList(Map_Entry);
Config._Entries = capnp.CompositeList(KV);
Subarray._Ranges = capnp.CompositeList(SubarrayRanges);
SubarrayPartitioner_State._SingleRange = capnp.CompositeList(Subarray);
SubarrayPartitioner_State._MultiRange = capnp.CompositeList(Subarray);
SubarrayPartitioner._Budget = capnp.CompositeList(AttributeBufferSize);
Condition._Clauses = capnp.CompositeList(ConditionClause);
MapFloat64._Entries = capnp.CompositeList(MapFloat64_Entry);
MapUInt64._Entries = capnp.CompositeList(MapUInt64_Entry);
ArrayMetadata._Entries = capnp.CompositeList(ArrayMetadata_MetadataEntry);
