// This file has been automatically generated by capnp-es.
import * as $ from "capnp-es";
export const _capnpFileId = BigInt("0xb57d9224b587d87f");
export class DomainArray extends $.Struct {
  static readonly _capnp = {
    displayName: "DomainArray",
    id: "ce5904e6f9410cec",
    size: new $.ObjectSize(0, 10),
  };
  _adoptInt8(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownInt8(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.int8);
  }
  get int8(): $.List<number> {
    return $.utils.getList(0, $.Int8List, this);
  }
  _hasInt8(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initInt8(length: number): $.List<number> {
    return $.utils.initList(0, $.Int8List, length, this);
  }
  set int8(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptUint8(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownUint8(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.uint8);
  }
  get uint8(): $.List<number> {
    return $.utils.getList(1, $.Uint8List, this);
  }
  _hasUint8(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initUint8(length: number): $.List<number> {
    return $.utils.initList(1, $.Uint8List, length, this);
  }
  set uint8(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptInt16(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownInt16(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.int16);
  }
  get int16(): $.List<number> {
    return $.utils.getList(2, $.Int16List, this);
  }
  _hasInt16(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initInt16(length: number): $.List<number> {
    return $.utils.initList(2, $.Int16List, length, this);
  }
  set int16(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptUint16(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownUint16(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.uint16);
  }
  get uint16(): $.List<number> {
    return $.utils.getList(3, $.Uint16List, this);
  }
  _hasUint16(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initUint16(length: number): $.List<number> {
    return $.utils.initList(3, $.Uint16List, length, this);
  }
  set uint16(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptInt32(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownInt32(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.int32);
  }
  get int32(): $.List<number> {
    return $.utils.getList(4, $.Int32List, this);
  }
  _hasInt32(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initInt32(length: number): $.List<number> {
    return $.utils.initList(4, $.Int32List, length, this);
  }
  set int32(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptUint32(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownUint32(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.uint32);
  }
  get uint32(): $.List<number> {
    return $.utils.getList(5, $.Uint32List, this);
  }
  _hasUint32(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initUint32(length: number): $.List<number> {
    return $.utils.initList(5, $.Uint32List, length, this);
  }
  set uint32(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptInt64(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownInt64(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.int64);
  }
  get int64(): $.List<bigint> {
    return $.utils.getList(6, $.Int64List, this);
  }
  _hasInt64(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initInt64(length: number): $.List<bigint> {
    return $.utils.initList(6, $.Int64List, length, this);
  }
  set int64(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptUint64(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownUint64(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.uint64);
  }
  get uint64(): $.List<bigint> {
    return $.utils.getList(7, $.Uint64List, this);
  }
  _hasUint64(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initUint64(length: number): $.List<bigint> {
    return $.utils.initList(7, $.Uint64List, length, this);
  }
  set uint64(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  _adoptFloat32(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownFloat32(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.float32);
  }
  get float32(): $.List<number> {
    return $.utils.getList(8, $.Float32List, this);
  }
  _hasFloat32(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initFloat32(length: number): $.List<number> {
    return $.utils.initList(8, $.Float32List, length, this);
  }
  set float32(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  _adoptFloat64(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(9, this));
  }
  _disownFloat64(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.float64);
  }
  get float64(): $.List<number> {
    return $.utils.getList(9, $.Float64List, this);
  }
  _hasFloat64(): boolean {
    return !$.utils.isNull($.utils.getPointer(9, this));
  }
  _initFloat64(length: number): $.List<number> {
    return $.utils.initList(9, $.Float64List, length, this);
  }
  set float64(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(9, this));
  }
  toString(): string { return "DomainArray_" + super.toString(); }
}
export class KV extends $.Struct {
  static readonly _capnp = {
    displayName: "KV",
    id: "e3dadf2bf211bc97",
    size: new $.ObjectSize(0, 2),
  };
  get key(): string {
    return $.utils.getText(0, this);
  }
  set key(value: string) {
    $.utils.setText(0, value, this);
  }
  get value(): string {
    return $.utils.getText(1, this);
  }
  set value(value: string) {
    $.utils.setText(1, value, this);
  }
  toString(): string { return "KV_" + super.toString(); }
}
/**
* Represents a config object
*
*/
export class Config extends $.Struct {
  static readonly _capnp = {
    displayName: "Config",
    id: "b6c95b4b8111ad36",
    size: new $.ObjectSize(0, 1),
  };
  static _Entries: $.ListCtor<KV>;
  _adoptEntries(value: $.Orphan<$.List<KV>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEntries(): $.Orphan<$.List<KV>> {
    return $.utils.disown(this.entries);
  }
  /**
* list of key-value settings
*
*/
  get entries(): $.List<KV> {
    return $.utils.getList(0, Config._Entries, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEntries(length: number): $.List<KV> {
    return $.utils.initList(0, Config._Entries, length, this);
  }
  set entries(value: $.List<KV>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "Config_" + super.toString(); }
}
export class Array extends $.Struct {
  static readonly _capnp = {
    displayName: "Array",
    id: "a45730f57e0460b4",
    size: new $.ObjectSize(24, 8),
  };
  static _FragmentMetadataAll: $.ListCtor<FragmentMetadata>;
  /**
* ending timestamp array was opened
*
*/
  get endTimestamp(): bigint {
    return $.utils.getUint64(0, this);
  }
  set endTimestamp(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* Array opened for query type
*
*/
  get queryType(): string {
    return $.utils.getText(0, this);
  }
  set queryType(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* Array uri
*
*/
  get uri(): string {
    return $.utils.getText(1, this);
  }
  set uri(value: string) {
    $.utils.setText(1, value, this);
  }
  /**
* starting timestamp array was opened
*
*/
  get startTimestamp(): bigint {
    return $.utils.getUint64(8, this);
  }
  set startTimestamp(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  _adoptArraySchemaLatest(value: $.Orphan<ArraySchema>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownArraySchemaLatest(): $.Orphan<ArraySchema> {
    return $.utils.disown(this.arraySchemaLatest);
  }
  /**
* latest array schema
*
*/
  get arraySchemaLatest(): ArraySchema {
    return $.utils.getStruct(2, ArraySchema, this);
  }
  _hasArraySchemaLatest(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initArraySchemaLatest(): ArraySchema {
    return $.utils.initStructAt(2, ArraySchema, this);
  }
  set arraySchemaLatest(value: ArraySchema) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptArraySchemasAll(value: $.Orphan<Map>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownArraySchemasAll(): $.Orphan<Map> {
    return $.utils.disown(this.arraySchemasAll);
  }
  /**
* map of all Array Schemas
*
*/
  get arraySchemasAll(): Map {
    return $.utils.getStruct(3, Map, this);
  }
  _hasArraySchemasAll(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initArraySchemasAll(): Map {
    return $.utils.initStructAt(3, Map, this);
  }
  set arraySchemasAll(value: Map) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptNonEmptyDomain(value: $.Orphan<NonEmptyDomainList>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownNonEmptyDomain(): $.Orphan<NonEmptyDomainList> {
    return $.utils.disown(this.nonEmptyDomain);
  }
  /**
* non empty domain
*
*/
  get nonEmptyDomain(): NonEmptyDomainList {
    return $.utils.getStruct(4, NonEmptyDomainList, this);
  }
  _hasNonEmptyDomain(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initNonEmptyDomain(): NonEmptyDomainList {
    return $.utils.initStructAt(4, NonEmptyDomainList, this);
  }
  set nonEmptyDomain(value: NonEmptyDomainList) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptArrayMetadata(value: $.Orphan<ArrayMetadata>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownArrayMetadata(): $.Orphan<ArrayMetadata> {
    return $.utils.disown(this.arrayMetadata);
  }
  /**
* array metadata
*
*/
  get arrayMetadata(): ArrayMetadata {
    return $.utils.getStruct(5, ArrayMetadata, this);
  }
  _hasArrayMetadata(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initArrayMetadata(): ArrayMetadata {
    return $.utils.initStructAt(5, ArrayMetadata, this);
  }
  set arrayMetadata(value: ArrayMetadata) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptArrayDirectory(value: $.Orphan<ArrayDirectory>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownArrayDirectory(): $.Orphan<ArrayDirectory> {
    return $.utils.disown(this.arrayDirectory);
  }
  /**
* array directory (for reads)
*
*/
  get arrayDirectory(): ArrayDirectory {
    return $.utils.getStruct(6, ArrayDirectory, this);
  }
  _hasArrayDirectory(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initArrayDirectory(): ArrayDirectory {
    return $.utils.initStructAt(6, ArrayDirectory, this);
  }
  set arrayDirectory(value: ArrayDirectory) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptFragmentMetadataAll(value: $.Orphan<$.List<FragmentMetadata>>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownFragmentMetadataAll(): $.Orphan<$.List<FragmentMetadata>> {
    return $.utils.disown(this.fragmentMetadataAll);
  }
  /**
* metadata for all fragments (for reads)
*
*/
  get fragmentMetadataAll(): $.List<FragmentMetadata> {
    return $.utils.getList(7, Array._FragmentMetadataAll, this);
  }
  _hasFragmentMetadataAll(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initFragmentMetadataAll(length: number): $.List<FragmentMetadata> {
    return $.utils.initList(7, Array._FragmentMetadataAll, length, this);
  }
  set fragmentMetadataAll(value: $.List<FragmentMetadata>) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  /**
* The ending timestamp that the array was last opened at
*
*/
  get openedAtEndTimestamp(): bigint {
    return $.utils.getUint64(16, this);
  }
  set openedAtEndTimestamp(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  toString(): string { return "Array_" + super.toString(); }
}
export class ArrayOpen extends $.Struct {
  static readonly _capnp = {
    displayName: "ArrayOpen",
    id: "facceeafd4472c68",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  /**
* Query type to open the array for
*
*/
  get queryType(): string {
    return $.utils.getText(1, this);
  }
  set queryType(value: string) {
    $.utils.setText(1, value, this);
  }
  toString(): string { return "ArrayOpen_" + super.toString(); }
}
/**
* ArraySchema during creation or retrieval
*
*/
export class ArraySchema extends $.Struct {
  static readonly _capnp = {
    displayName: "ArraySchema",
    id: "d71de32f98e296fe",
    size: new $.ObjectSize(16, 16),
  };
  static _Attributes: $.ListCtor<Attribute>;
  static _DimensionLabels: $.ListCtor<DimensionLabel>;
  static _Enumerations: $.ListCtor<Enumeration>;
  static _EnumerationPathMap: $.ListCtor<KV>;
  /**
* Type of array
*
*/
  get arrayType(): string {
    return $.utils.getText(0, this);
  }
  set arrayType(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptAttributes(value: $.Orphan<$.List<Attribute>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownAttributes(): $.Orphan<$.List<Attribute>> {
    return $.utils.disown(this.attributes);
  }
  /**
* Attributes of array
*
*/
  get attributes(): $.List<Attribute> {
    return $.utils.getList(1, ArraySchema._Attributes, this);
  }
  _hasAttributes(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initAttributes(length: number): $.List<Attribute> {
    return $.utils.initList(1, ArraySchema._Attributes, length, this);
  }
  set attributes(value: $.List<Attribute>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  /**
* Capacity of array
*
*/
  get capacity(): bigint {
    return $.utils.getUint64(0, this);
  }
  set capacity(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* Order of cells
*
*/
  get cellOrder(): string {
    return $.utils.getText(2, this);
  }
  set cellOrder(value: string) {
    $.utils.setText(2, value, this);
  }
  _adoptCoordsFilterPipeline(value: $.Orphan<FilterPipeline>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownCoordsFilterPipeline(): $.Orphan<FilterPipeline> {
    return $.utils.disown(this.coordsFilterPipeline);
  }
  /**
* Type of compression for coordinates (enum)
*
*/
  get coordsFilterPipeline(): FilterPipeline {
    return $.utils.getStruct(3, FilterPipeline, this);
  }
  _hasCoordsFilterPipeline(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initCoordsFilterPipeline(): FilterPipeline {
    return $.utils.initStructAt(3, FilterPipeline, this);
  }
  set coordsFilterPipeline(value: FilterPipeline) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptDomain(value: $.Orphan<Domain>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownDomain(): $.Orphan<Domain> {
    return $.utils.disown(this.domain);
  }
  /**
* Domain of array
*
*/
  get domain(): Domain {
    return $.utils.getStruct(4, Domain, this);
  }
  _hasDomain(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initDomain(): Domain {
    return $.utils.initStructAt(4, Domain, this);
  }
  set domain(value: Domain) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptOffsetFilterPipeline(value: $.Orphan<FilterPipeline>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownOffsetFilterPipeline(): $.Orphan<FilterPipeline> {
    return $.utils.disown(this.offsetFilterPipeline);
  }
  /**
* Compression type of cell variable offsets (enum)
*
*/
  get offsetFilterPipeline(): FilterPipeline {
    return $.utils.getStruct(5, FilterPipeline, this);
  }
  _hasOffsetFilterPipeline(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initOffsetFilterPipeline(): FilterPipeline {
    return $.utils.initStructAt(5, FilterPipeline, this);
  }
  set offsetFilterPipeline(value: FilterPipeline) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  /**
* Tile order setting of array
*
*/
  get tileOrder(): string {
    return $.utils.getText(6, this);
  }
  set tileOrder(value: string) {
    $.utils.setText(6, value, this);
  }
  /**
* URI of schema
*
*/
  get uri(): string {
    return $.utils.getText(7, this);
  }
  set uri(value: string) {
    $.utils.setText(7, value, this);
  }
  _adoptVersion(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownVersion(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.version);
  }
  /**
* file format version
*
*/
  get version(): $.List<number> {
    return $.utils.getList(8, $.Int32List, this);
  }
  _hasVersion(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initVersion(length: number): $.List<number> {
    return $.utils.initList(8, $.Int32List, length, this);
  }
  set version(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  /**
* True if the array allows coordinate duplicates.
* Applicable only to sparse arrays.
*
*/
  get allowsDuplicates(): boolean {
    return $.utils.getBit(64, this);
  }
  set allowsDuplicates(value: boolean) {
    $.utils.setBit(64, value, this);
  }
  _adoptValidityFilterPipeline(value: $.Orphan<FilterPipeline>): void {
    $.utils.adopt(value, $.utils.getPointer(9, this));
  }
  _disownValidityFilterPipeline(): $.Orphan<FilterPipeline> {
    return $.utils.disown(this.validityFilterPipeline);
  }
  /**
* Type of compression for validity buffers (enum)
*
*/
  get validityFilterPipeline(): FilterPipeline {
    return $.utils.getStruct(9, FilterPipeline, this);
  }
  _hasValidityFilterPipeline(): boolean {
    return !$.utils.isNull($.utils.getPointer(9, this));
  }
  _initValidityFilterPipeline(): FilterPipeline {
    return $.utils.initStructAt(9, FilterPipeline, this);
  }
  set validityFilterPipeline(value: FilterPipeline) {
    $.utils.copyFrom(value, $.utils.getPointer(9, this));
  }
  /**
* name of array schema
*
*/
  get name(): string {
    return $.utils.getText(10, this);
  }
  set name(value: string) {
    $.utils.setText(10, value, this);
  }
  _adoptTimestampRange(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(11, this));
  }
  _disownTimestampRange(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.timestampRange);
  }
  /**
* Timestamp range of array schema
*
*/
  get timestampRange(): $.List<bigint> {
    return $.utils.getList(11, $.Uint64List, this);
  }
  _hasTimestampRange(): boolean {
    return !$.utils.isNull($.utils.getPointer(11, this));
  }
  _initTimestampRange(length: number): $.List<bigint> {
    return $.utils.initList(11, $.Uint64List, length, this);
  }
  set timestampRange(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(11, this));
  }
  _adoptDimensionLabels(value: $.Orphan<$.List<DimensionLabel>>): void {
    $.utils.adopt(value, $.utils.getPointer(12, this));
  }
  _disownDimensionLabels(): $.Orphan<$.List<DimensionLabel>> {
    return $.utils.disown(this.dimensionLabels);
  }
  /**
* Dimension labels of the array
*
*/
  get dimensionLabels(): $.List<DimensionLabel> {
    return $.utils.getList(12, ArraySchema._DimensionLabels, this);
  }
  _hasDimensionLabels(): boolean {
    return !$.utils.isNull($.utils.getPointer(12, this));
  }
  _initDimensionLabels(length: number): $.List<DimensionLabel> {
    return $.utils.initList(12, ArraySchema._DimensionLabels, length, this);
  }
  set dimensionLabels(value: $.List<DimensionLabel>) {
    $.utils.copyFrom(value, $.utils.getPointer(12, this));
  }
  _adoptEnumerations(value: $.Orphan<$.List<Enumeration>>): void {
    $.utils.adopt(value, $.utils.getPointer(13, this));
  }
  _disownEnumerations(): $.Orphan<$.List<Enumeration>> {
    return $.utils.disown(this.enumerations);
  }
  /**
* Enumerations of the array
*
*/
  get enumerations(): $.List<Enumeration> {
    return $.utils.getList(13, ArraySchema._Enumerations, this);
  }
  _hasEnumerations(): boolean {
    return !$.utils.isNull($.utils.getPointer(13, this));
  }
  _initEnumerations(length: number): $.List<Enumeration> {
    return $.utils.initList(13, ArraySchema._Enumerations, length, this);
  }
  set enumerations(value: $.List<Enumeration>) {
    $.utils.copyFrom(value, $.utils.getPointer(13, this));
  }
  _adoptEnumerationPathMap(value: $.Orphan<$.List<KV>>): void {
    $.utils.adopt(value, $.utils.getPointer(14, this));
  }
  _disownEnumerationPathMap(): $.Orphan<$.List<KV>> {
    return $.utils.disown(this.enumerationPathMap);
  }
  /**
* Enumeration name to path map
*
*/
  get enumerationPathMap(): $.List<KV> {
    return $.utils.getList(14, ArraySchema._EnumerationPathMap, this);
  }
  _hasEnumerationPathMap(): boolean {
    return !$.utils.isNull($.utils.getPointer(14, this));
  }
  _initEnumerationPathMap(length: number): $.List<KV> {
    return $.utils.initList(14, ArraySchema._EnumerationPathMap, length, this);
  }
  set enumerationPathMap(value: $.List<KV>) {
    $.utils.copyFrom(value, $.utils.getPointer(14, this));
  }
  _adoptCurrentDomain(value: $.Orphan<CurrentDomain>): void {
    $.utils.adopt(value, $.utils.getPointer(15, this));
  }
  _disownCurrentDomain(): $.Orphan<CurrentDomain> {
    return $.utils.disown(this.currentDomain);
  }
  /**
* The current domain set on the schema
*
*/
  get currentDomain(): CurrentDomain {
    return $.utils.getStruct(15, CurrentDomain, this);
  }
  _hasCurrentDomain(): boolean {
    return !$.utils.isNull($.utils.getPointer(15, this));
  }
  _initCurrentDomain(): CurrentDomain {
    return $.utils.initStructAt(15, CurrentDomain, this);
  }
  set currentDomain(value: CurrentDomain) {
    $.utils.copyFrom(value, $.utils.getPointer(15, this));
  }
  toString(): string { return "ArraySchema_" + super.toString(); }
}
export class ArrayCreateRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "ArrayCreateRequest",
    id: "d24744ef593dcfbe",
    size: new $.ObjectSize(0, 2),
  };
  /**
* Storage URI for the new array.
* This field will be empty if using default storage.
*
*/
  get uri(): string {
    return $.utils.getText(0, this);
  }
  set uri(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptSchema(value: $.Orphan<ArraySchema>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownSchema(): $.Orphan<ArraySchema> {
    return $.utils.disown(this.schema);
  }
  /**
* The array schema to create.
*
*/
  get schema(): ArraySchema {
    return $.utils.getStruct(1, ArraySchema, this);
  }
  _hasSchema(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initSchema(): ArraySchema {
    return $.utils.initStructAt(1, ArraySchema, this);
  }
  set schema(value: ArraySchema) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "ArrayCreateRequest_" + super.toString(); }
}
/**
* A label of a dimension
*
*/
export class DimensionLabel extends $.Struct {
  static readonly _capnp = {
    displayName: "DimensionLabel",
    id: "ceff8d62d10cd1de",
    size: new $.ObjectSize(16, 6),
  };
  /**
* Index of the dimension the label is attached to
*
*/
  get dimensionId(): number {
    return $.utils.getUint32(0, this);
  }
  set dimensionId(value: number) {
    $.utils.setUint32(0, value, this);
  }
  /**
* Name of the dimension label
*
*/
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* URI of the existing dimension label
*
*/
  get uri(): string {
    return $.utils.getText(1, this);
  }
  set uri(value: string) {
    $.utils.setText(1, value, this);
  }
  /**
* Name of the attribute that stores the label data
*
*/
  get attributeName(): string {
    return $.utils.getText(2, this);
  }
  set attributeName(value: string) {
    $.utils.setText(2, value, this);
  }
  /**
* Order of the dimension label
*
*/
  get order(): string {
    return $.utils.getText(3, this);
  }
  set order(value: string) {
    $.utils.setText(3, value, this);
  }
  /**
* Datatype of label data
*
*/
  get type(): string {
    return $.utils.getText(4, this);
  }
  set type(value: string) {
    $.utils.setText(4, value, this);
  }
  /**
* Number of cells per label value
*
*/
  get cellValNum(): number {
    return $.utils.getUint32(4, this);
  }
  set cellValNum(value: number) {
    $.utils.setUint32(4, value, this);
  }
  /**
* Is label stored in array's label directory or externally
*
*/
  get external(): boolean {
    return $.utils.getBit(64, this);
  }
  set external(value: boolean) {
    $.utils.setBit(64, value, this);
  }
  /**
* Is URI relative or absolute to array directory
*
*/
  get relative(): boolean {
    return $.utils.getBit(65, this);
  }
  set relative(value: boolean) {
    $.utils.setBit(65, value, this);
  }
  _adoptSchema(value: $.Orphan<ArraySchema>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownSchema(): $.Orphan<ArraySchema> {
    return $.utils.disown(this.schema);
  }
  /**
* Label schema
*
*/
  get schema(): ArraySchema {
    return $.utils.getStruct(5, ArraySchema, this);
  }
  _hasSchema(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initSchema(): ArraySchema {
    return $.utils.initStructAt(5, ArraySchema, this);
  }
  set schema(value: ArraySchema) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  toString(): string { return "DimensionLabel_" + super.toString(); }
}
/**
* Evolution of array schema
*
*/
export class ArraySchemaEvolution extends $.Struct {
  static readonly _capnp = {
    displayName: "ArraySchemaEvolution",
    id: "a1b81d67548230d4",
    size: new $.ObjectSize(0, 7),
  };
  static _AttributesToAdd: $.ListCtor<Attribute>;
  static _EnumerationsToAdd: $.ListCtor<Enumeration>;
  static _EnumerationsToExtend: $.ListCtor<Enumeration>;
  _adoptAttributesToDrop(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownAttributesToDrop(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.attributesToDrop);
  }
  /**
* Attribute names to be dropped
*
*/
  get attributesToDrop(): $.List<string> {
    return $.utils.getList(0, $.TextList, this);
  }
  _hasAttributesToDrop(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initAttributesToDrop(length: number): $.List<string> {
    return $.utils.initList(0, $.TextList, length, this);
  }
  set attributesToDrop(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptAttributesToAdd(value: $.Orphan<$.List<Attribute>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownAttributesToAdd(): $.Orphan<$.List<Attribute>> {
    return $.utils.disown(this.attributesToAdd);
  }
  /**
* Attributes to be added
*
*/
  get attributesToAdd(): $.List<Attribute> {
    return $.utils.getList(1, ArraySchemaEvolution._AttributesToAdd, this);
  }
  _hasAttributesToAdd(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initAttributesToAdd(length: number): $.List<Attribute> {
    return $.utils.initList(1, ArraySchemaEvolution._AttributesToAdd, length, this);
  }
  set attributesToAdd(value: $.List<Attribute>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptTimestampRange(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownTimestampRange(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.timestampRange);
  }
  /**
* Timestamp range of array schema
*
*/
  get timestampRange(): $.List<bigint> {
    return $.utils.getList(2, $.Uint64List, this);
  }
  _hasTimestampRange(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initTimestampRange(length: number): $.List<bigint> {
    return $.utils.initList(2, $.Uint64List, length, this);
  }
  set timestampRange(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptEnumerationsToAdd(value: $.Orphan<$.List<Enumeration>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownEnumerationsToAdd(): $.Orphan<$.List<Enumeration>> {
    return $.utils.disown(this.enumerationsToAdd);
  }
  /**
* Enumerations to be added
*
*/
  get enumerationsToAdd(): $.List<Enumeration> {
    return $.utils.getList(3, ArraySchemaEvolution._EnumerationsToAdd, this);
  }
  _hasEnumerationsToAdd(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initEnumerationsToAdd(length: number): $.List<Enumeration> {
    return $.utils.initList(3, ArraySchemaEvolution._EnumerationsToAdd, length, this);
  }
  set enumerationsToAdd(value: $.List<Enumeration>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptEnumerationsToDrop(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownEnumerationsToDrop(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.enumerationsToDrop);
  }
  /**
* Enumeration names to be dropped
*
*/
  get enumerationsToDrop(): $.List<string> {
    return $.utils.getList(4, $.TextList, this);
  }
  _hasEnumerationsToDrop(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initEnumerationsToDrop(length: number): $.List<string> {
    return $.utils.initList(4, $.TextList, length, this);
  }
  set enumerationsToDrop(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptEnumerationsToExtend(value: $.Orphan<$.List<Enumeration>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownEnumerationsToExtend(): $.Orphan<$.List<Enumeration>> {
    return $.utils.disown(this.enumerationsToExtend);
  }
  /**
* Enumerations to be extended.
*
*/
  get enumerationsToExtend(): $.List<Enumeration> {
    return $.utils.getList(5, ArraySchemaEvolution._EnumerationsToExtend, this);
  }
  _hasEnumerationsToExtend(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initEnumerationsToExtend(length: number): $.List<Enumeration> {
    return $.utils.initList(5, ArraySchemaEvolution._EnumerationsToExtend, length, this);
  }
  set enumerationsToExtend(value: $.List<Enumeration>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptCurrentDomainToExpand(value: $.Orphan<CurrentDomain>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownCurrentDomainToExpand(): $.Orphan<CurrentDomain> {
    return $.utils.disown(this.currentDomainToExpand);
  }
  /**
* A CurrentDomain that we want to expand to.
*
*/
  get currentDomainToExpand(): CurrentDomain {
    return $.utils.getStruct(6, CurrentDomain, this);
  }
  _hasCurrentDomainToExpand(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initCurrentDomainToExpand(): CurrentDomain {
    return $.utils.initStructAt(6, CurrentDomain, this);
  }
  set currentDomainToExpand(value: CurrentDomain) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  toString(): string { return "ArraySchemaEvolution_" + super.toString(); }
}
/**
* Attribute of array
*
*/
export class Attribute extends $.Struct {
  static readonly _capnp = {
    displayName: "Attribute",
    id: "92ad78f56de3d76a",
    size: new $.ObjectSize(8, 6),
  };
  /**
* Attribute number of values per cell
*
*/
  get cellValNum(): number {
    return $.utils.getUint32(0, this);
  }
  set cellValNum(value: number) {
    $.utils.setUint32(0, value, this);
  }
  /**
* Attribute name
*
*/
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* TileDB attribute datatype
*
*/
  get type(): string {
    return $.utils.getText(1, this);
  }
  set type(value: string) {
    $.utils.setText(1, value, this);
  }
  _adoptFilterPipeline(value: $.Orphan<FilterPipeline>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownFilterPipeline(): $.Orphan<FilterPipeline> {
    return $.utils.disown(this.filterPipeline);
  }
  /**
* TileDB FilterPipeline for Attribute
*
*/
  get filterPipeline(): FilterPipeline {
    return $.utils.getStruct(2, FilterPipeline, this);
  }
  _hasFilterPipeline(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initFilterPipeline(): FilterPipeline {
    return $.utils.initStructAt(2, FilterPipeline, this);
  }
  set filterPipeline(value: FilterPipeline) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptFillValue(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownFillValue(): $.Orphan<$.Data> {
    return $.utils.disown(this.fillValue);
  }
  /**
* Default fill value
*
*/
  get fillValue(): $.Data {
    return $.utils.getData(3, this);
  }
  _hasFillValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initFillValue(length: number): $.Data {
    return $.utils.initData(3, length, this);
  }
  set fillValue(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  /**
* Is attribute nullable
*
*/
  get nullable(): boolean {
    return $.utils.getBit(32, this);
  }
  set nullable(value: boolean) {
    $.utils.setBit(32, value, this);
  }
  /**
* Default validity fill value for nullable attributes
*
*/
  get fillValueValidity(): boolean {
    return $.utils.getBit(33, this);
  }
  set fillValueValidity(value: boolean) {
    $.utils.setBit(33, value, this);
  }
  /**
* The prescribed order of the data stored in the attribute
*
*/
  get order(): string {
    return $.utils.getText(4, this);
  }
  set order(value: string) {
    $.utils.setText(4, value, this);
  }
  /**
* Name of the enumeration for this attribute, if it has one
*
*/
  get enumerationName(): string {
    return $.utils.getText(5, this);
  }
  set enumerationName(value: string) {
    $.utils.setText(5, value, this);
  }
  toString(): string { return "Attribute_" + super.toString(); }
}
/**
* Enumeration of values for use by Attributes
*
*/
export class Enumeration extends $.Struct {
  static readonly _capnp = {
    displayName: "Enumeration",
    id: "d00b2f19cc21b9b4",
    size: new $.ObjectSize(8, 5),
  };
  /**
* Enumeration name
*
*/
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* Enumeration path name
*
*/
  get pathName(): string {
    return $.utils.getText(1, this);
  }
  set pathName(value: string) {
    $.utils.setText(1, value, this);
  }
  /**
* Type of the Enumeration values
*
*/
  get type(): string {
    return $.utils.getText(2, this);
  }
  set type(value: string) {
    $.utils.setText(2, value, this);
  }
  /**
* Enumeration number of values per cell
*
*/
  get cellValNum(): number {
    return $.utils.getUint32(0, this);
  }
  set cellValNum(value: number) {
    $.utils.setUint32(0, value, this);
  }
  /**
* Whether the enumeration is considered orderable
*
*/
  get ordered(): boolean {
    return $.utils.getBit(32, this);
  }
  set ordered(value: boolean) {
    $.utils.setBit(32, value, this);
  }
  _adoptData(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownData(): $.Orphan<$.Data> {
    return $.utils.disown(this.data);
  }
  /**
* The contents of the enumeration values
*
*/
  get data(): $.Data {
    return $.utils.getData(3, this);
  }
  _hasData(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initData(length: number): $.Data {
    return $.utils.initData(3, length, this);
  }
  set data(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptOffsets(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownOffsets(): $.Orphan<$.Data> {
    return $.utils.disown(this.offsets);
  }
  /**
* The contents of the enumeration offsets buffer
*
*/
  get offsets(): $.Data {
    return $.utils.getData(4, this);
  }
  _hasOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initOffsets(length: number): $.Data {
    return $.utils.initData(4, length, this);
  }
  set offsets(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  toString(): string { return "Enumeration_" + super.toString(); }
}
/**
* Represents an attribute buffer header information
*
*/
export class AttributeBufferHeader extends $.Struct {
  static readonly _capnp = {
    displayName: "AttributeBufferHeader",
    id: "d20a578112fa92a2",
    size: new $.ObjectSize(48, 1),
  };
  /**
* Attribute name
*
*/
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* Number of bytes in the fixed-length attribute data buffer
*
*/
  get fixedLenBufferSizeInBytes(): bigint {
    return $.utils.getUint64(0, this);
  }
  set fixedLenBufferSizeInBytes(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* Number of bytes in the var-length attribute data buffer
*
*/
  get varLenBufferSizeInBytes(): bigint {
    return $.utils.getUint64(8, this);
  }
  set varLenBufferSizeInBytes(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
* Number of bytes in the validity data buffer
*
*/
  get validityLenBufferSizeInBytes(): bigint {
    return $.utils.getUint64(16, this);
  }
  set validityLenBufferSizeInBytes(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  /**
* Original user set number of bytes in the fixed-length attribute data buffer
*
*/
  get originalFixedLenBufferSizeInBytes(): bigint {
    return $.utils.getUint64(24, this);
  }
  set originalFixedLenBufferSizeInBytes(value: bigint) {
    $.utils.setUint64(24, value, this);
  }
  /**
* Original user set number of bytes in the var-length attribute data buffer
*
*/
  get originalVarLenBufferSizeInBytes(): bigint {
    return $.utils.getUint64(32, this);
  }
  set originalVarLenBufferSizeInBytes(value: bigint) {
    $.utils.setUint64(32, value, this);
  }
  /**
* Original user set number of bytes in the validity data buffer
*
*/
  get originalValidityLenBufferSizeInBytes(): bigint {
    return $.utils.getUint64(40, this);
  }
  set originalValidityLenBufferSizeInBytes(value: bigint) {
    $.utils.setUint64(40, value, this);
  }
  toString(): string { return "AttributeBufferHeader_" + super.toString(); }
}
export const Dimension_TileExtent_Which = {
  INT8: 0,
  UINT8: 1,
  INT16: 2,
  UINT16: 3,
  INT32: 4,
  UINT32: 5,
  INT64: 6,
  UINT64: 7,
  FLOAT32: 8,
  FLOAT64: 9
} as const;
export type Dimension_TileExtent_Which = (typeof Dimension_TileExtent_Which)[keyof typeof Dimension_TileExtent_Which];
/**
* Extent of tile
*
*/
export class Dimension_TileExtent extends $.Struct {
  static readonly INT8 = Dimension_TileExtent_Which.INT8;
  static readonly UINT8 = Dimension_TileExtent_Which.UINT8;
  static readonly INT16 = Dimension_TileExtent_Which.INT16;
  static readonly UINT16 = Dimension_TileExtent_Which.UINT16;
  static readonly INT32 = Dimension_TileExtent_Which.INT32;
  static readonly UINT32 = Dimension_TileExtent_Which.UINT32;
  static readonly INT64 = Dimension_TileExtent_Which.INT64;
  static readonly UINT64 = Dimension_TileExtent_Which.UINT64;
  static readonly FLOAT32 = Dimension_TileExtent_Which.FLOAT32;
  static readonly FLOAT64 = Dimension_TileExtent_Which.FLOAT64;
  static readonly _capnp = {
    displayName: "tileExtent",
    id: "a2a652536db09fa0",
    size: new $.ObjectSize(16, 4),
  };
  get int8(): number {
    $.utils.testWhich("int8", $.utils.getUint16(2, this), 0, this);
    return $.utils.getInt8(1, this);
  }
  get _isInt8(): boolean {
    return $.utils.getUint16(2, this) === 0;
  }
  set int8(value: number) {
    $.utils.setUint16(2, 0, this);
    $.utils.setInt8(1, value, this);
  }
  get uint8(): number {
    $.utils.testWhich("uint8", $.utils.getUint16(2, this), 1, this);
    return $.utils.getUint8(1, this);
  }
  get _isUint8(): boolean {
    return $.utils.getUint16(2, this) === 1;
  }
  set uint8(value: number) {
    $.utils.setUint16(2, 1, this);
    $.utils.setUint8(1, value, this);
  }
  get int16(): number {
    $.utils.testWhich("int16", $.utils.getUint16(2, this), 2, this);
    return $.utils.getInt16(4, this);
  }
  get _isInt16(): boolean {
    return $.utils.getUint16(2, this) === 2;
  }
  set int16(value: number) {
    $.utils.setUint16(2, 2, this);
    $.utils.setInt16(4, value, this);
  }
  get uint16(): number {
    $.utils.testWhich("uint16", $.utils.getUint16(2, this), 3, this);
    return $.utils.getUint16(4, this);
  }
  get _isUint16(): boolean {
    return $.utils.getUint16(2, this) === 3;
  }
  set uint16(value: number) {
    $.utils.setUint16(2, 3, this);
    $.utils.setUint16(4, value, this);
  }
  get int32(): number {
    $.utils.testWhich("int32", $.utils.getUint16(2, this), 4, this);
    return $.utils.getInt32(4, this);
  }
  get _isInt32(): boolean {
    return $.utils.getUint16(2, this) === 4;
  }
  set int32(value: number) {
    $.utils.setUint16(2, 4, this);
    $.utils.setInt32(4, value, this);
  }
  get uint32(): number {
    $.utils.testWhich("uint32", $.utils.getUint16(2, this), 5, this);
    return $.utils.getUint32(4, this);
  }
  get _isUint32(): boolean {
    return $.utils.getUint16(2, this) === 5;
  }
  set uint32(value: number) {
    $.utils.setUint16(2, 5, this);
    $.utils.setUint32(4, value, this);
  }
  get int64(): bigint {
    $.utils.testWhich("int64", $.utils.getUint16(2, this), 6, this);
    return $.utils.getInt64(8, this);
  }
  get _isInt64(): boolean {
    return $.utils.getUint16(2, this) === 6;
  }
  set int64(value: bigint) {
    $.utils.setUint16(2, 6, this);
    $.utils.setInt64(8, value, this);
  }
  get uint64(): bigint {
    $.utils.testWhich("uint64", $.utils.getUint16(2, this), 7, this);
    return $.utils.getUint64(8, this);
  }
  get _isUint64(): boolean {
    return $.utils.getUint16(2, this) === 7;
  }
  set uint64(value: bigint) {
    $.utils.setUint16(2, 7, this);
    $.utils.setUint64(8, value, this);
  }
  get float32(): number {
    $.utils.testWhich("float32", $.utils.getUint16(2, this), 8, this);
    return $.utils.getFloat32(4, this);
  }
  get _isFloat32(): boolean {
    return $.utils.getUint16(2, this) === 8;
  }
  set float32(value: number) {
    $.utils.setUint16(2, 8, this);
    $.utils.setFloat32(4, value, this);
  }
  get float64(): number {
    $.utils.testWhich("float64", $.utils.getUint16(2, this), 9, this);
    return $.utils.getFloat64(8, this);
  }
  get _isFloat64(): boolean {
    return $.utils.getUint16(2, this) === 9;
  }
  set float64(value: number) {
    $.utils.setUint16(2, 9, this);
    $.utils.setFloat64(8, value, this);
  }
  toString(): string { return "Dimension_TileExtent_" + super.toString(); }
  which(): Dimension_TileExtent_Which {
    return $.utils.getUint16(2, this) as Dimension_TileExtent_Which;
  }
}
/**
* Dimension of array
*
*/
export class Dimension extends $.Struct {
  static readonly _capnp = {
    displayName: "Dimension",
    id: "95e26a84d32d8223",
    size: new $.ObjectSize(16, 4),
  };
  /**
* Dimension name
*
*/
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* Is tile extent null
*
*/
  get nullTileExtent(): boolean {
    return $.utils.getBit(0, this);
  }
  set nullTileExtent(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  /**
* Datatype for Dimension
*
*/
  get type(): string {
    return $.utils.getText(1, this);
  }
  set type(value: string) {
    $.utils.setText(1, value, this);
  }
  /**
* Extent of tile
*
*/
  get tileExtent(): Dimension_TileExtent {
    return $.utils.getAs(Dimension_TileExtent, this);
  }
  _initTileExtent(): Dimension_TileExtent {
    return $.utils.getAs(Dimension_TileExtent, this);
  }
  _adoptDomain(value: $.Orphan<DomainArray>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownDomain(): $.Orphan<DomainArray> {
    return $.utils.disown(this.domain);
  }
  /**
* extent of domain
*
*/
  get domain(): DomainArray {
    return $.utils.getStruct(2, DomainArray, this);
  }
  _hasDomain(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initDomain(): DomainArray {
    return $.utils.initStructAt(2, DomainArray, this);
  }
  set domain(value: DomainArray) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptFilterPipeline(value: $.Orphan<FilterPipeline>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownFilterPipeline(): $.Orphan<FilterPipeline> {
    return $.utils.disown(this.filterPipeline);
  }
  /**
* TileDB FilterPipeline for Dimension
*
*/
  get filterPipeline(): FilterPipeline {
    return $.utils.getStruct(3, FilterPipeline, this);
  }
  _hasFilterPipeline(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initFilterPipeline(): FilterPipeline {
    return $.utils.initStructAt(3, FilterPipeline, this);
  }
  set filterPipeline(value: FilterPipeline) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  toString(): string { return "Dimension_" + super.toString(); }
}
/**
* Domain of array
*
*/
export class Domain extends $.Struct {
  static readonly _capnp = {
    displayName: "Domain",
    id: "de030f447664754c",
    size: new $.ObjectSize(0, 4),
  };
  static _Dimensions: $.ListCtor<Dimension>;
  /**
* Tile Order
*
*/
  get cellOrder(): string {
    return $.utils.getText(0, this);
  }
  set cellOrder(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptDimensions(value: $.Orphan<$.List<Dimension>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownDimensions(): $.Orphan<$.List<Dimension>> {
    return $.utils.disown(this.dimensions);
  }
  /**
* Array of dimensions
*
*/
  get dimensions(): $.List<Dimension> {
    return $.utils.getList(1, Domain._Dimensions, this);
  }
  _hasDimensions(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initDimensions(length: number): $.List<Dimension> {
    return $.utils.initList(1, Domain._Dimensions, length, this);
  }
  set dimensions(value: $.List<Dimension>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  /**
* Tile Order
*
*/
  get tileOrder(): string {
    return $.utils.getText(2, this);
  }
  set tileOrder(value: string) {
    $.utils.setText(2, value, this);
  }
  /**
* Datatype of domain
*
*/
  get type(): string {
    return $.utils.getText(3, this);
  }
  set type(value: string) {
    $.utils.setText(3, value, this);
  }
  toString(): string { return "Domain_" + super.toString(); }
}
export class Error extends $.Struct {
  static readonly _capnp = {
    displayName: "Error",
    id: "fa787661cd3563a4",
    size: new $.ObjectSize(8, 1),
  };
  get code(): bigint {
    return $.utils.getInt64(0, this);
  }
  set code(value: bigint) {
    $.utils.setInt64(0, value, this);
  }
  get message(): string {
    return $.utils.getText(0, this);
  }
  set message(value: string) {
    $.utils.setText(0, value, this);
  }
  toString(): string { return "Error_" + super.toString(); }
}
export class FloatScaleConfig extends $.Struct {
  static readonly _capnp = {
    displayName: "FloatScaleConfig",
    id: "fda1cb9663a55b70",
    size: new $.ObjectSize(24, 0),
  };
  get scale(): number {
    return $.utils.getFloat64(0, this);
  }
  set scale(value: number) {
    $.utils.setFloat64(0, value, this);
  }
  get offset(): number {
    return $.utils.getFloat64(8, this);
  }
  set offset(value: number) {
    $.utils.setFloat64(8, value, this);
  }
  get byteWidth(): bigint {
    return $.utils.getUint64(16, this);
  }
  set byteWidth(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  toString(): string { return "FloatScaleConfig_" + super.toString(); }
}
export class WebpConfig extends $.Struct {
  static readonly _capnp = {
    displayName: "WebpConfig",
    id: "fd5825d8c6e74d78",
    size: new $.ObjectSize(16, 0),
  };
  /**
* WebP lossless quality; Valid range from 0.0f-1.0f
*
*/
  get quality(): number {
    return $.utils.getFloat32(0, this);
  }
  set quality(value: number) {
    $.utils.setFloat32(0, value, this);
  }
  /**
* WebP colorspace format.
*
*/
  get format(): number {
    return $.utils.getUint8(4, this);
  }
  set format(value: number) {
    $.utils.setUint8(4, value, this);
  }
  /**
* True if compression is lossless, false if lossy.
*
*/
  get lossless(): boolean {
    return $.utils.getBit(40, this);
  }
  set lossless(value: boolean) {
    $.utils.setBit(40, value, this);
  }
  /**
* Tile extent along X axis.
*
*/
  get extentX(): number {
    return $.utils.getUint16(6, this);
  }
  set extentX(value: number) {
    $.utils.setUint16(6, value, this);
  }
  /**
* Tile extent along Y axis.
*
*/
  get extentY(): number {
    return $.utils.getUint16(8, this);
  }
  set extentY(value: number) {
    $.utils.setUint16(8, value, this);
  }
  toString(): string { return "WebpConfig_" + super.toString(); }
}
export const Filter_Data_Which = {
  TEXT: 0,
  BYTES: 1,
  INT8: 2,
  UINT8: 3,
  INT16: 4,
  UINT16: 5,
  INT32: 6,
  UINT32: 7,
  INT64: 8,
  UINT64: 9,
  FLOAT32: 10,
  FLOAT64: 11
} as const;
export type Filter_Data_Which = (typeof Filter_Data_Which)[keyof typeof Filter_Data_Which];
/**
* filter data
*
*/
export class Filter_Data extends $.Struct {
  static readonly TEXT = Filter_Data_Which.TEXT;
  static readonly BYTES = Filter_Data_Which.BYTES;
  static readonly INT8 = Filter_Data_Which.INT8;
  static readonly UINT8 = Filter_Data_Which.UINT8;
  static readonly INT16 = Filter_Data_Which.INT16;
  static readonly UINT16 = Filter_Data_Which.UINT16;
  static readonly INT32 = Filter_Data_Which.INT32;
  static readonly UINT32 = Filter_Data_Which.UINT32;
  static readonly INT64 = Filter_Data_Which.INT64;
  static readonly UINT64 = Filter_Data_Which.UINT64;
  static readonly FLOAT32 = Filter_Data_Which.FLOAT32;
  static readonly FLOAT64 = Filter_Data_Which.FLOAT64;
  static readonly _capnp = {
    displayName: "data",
    id: "9ceaf832b3ab897f",
    size: new $.ObjectSize(16, 4),
  };
  get text(): string {
    $.utils.testWhich("text", $.utils.getUint16(0, this), 0, this);
    return $.utils.getText(1, this);
  }
  get _isText(): boolean {
    return $.utils.getUint16(0, this) === 0;
  }
  set text(value: string) {
    $.utils.setUint16(0, 0, this);
    $.utils.setText(1, value, this);
  }
  _adoptBytes(value: $.Orphan<$.Data>): void {
    $.utils.setUint16(0, 1, this);
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownBytes(): $.Orphan<$.Data> {
    return $.utils.disown(this.bytes);
  }
  get bytes(): $.Data {
    $.utils.testWhich("bytes", $.utils.getUint16(0, this), 1, this);
    return $.utils.getData(1, this);
  }
  _hasBytes(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initBytes(length: number): $.Data {
    $.utils.setUint16(0, 1, this);
    return $.utils.initData(1, length, this);
  }
  get _isBytes(): boolean {
    return $.utils.getUint16(0, this) === 1;
  }
  set bytes(value: $.Data) {
    $.utils.setUint16(0, 1, this);
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  get int8(): number {
    $.utils.testWhich("int8", $.utils.getUint16(0, this), 2, this);
    return $.utils.getInt8(2, this);
  }
  get _isInt8(): boolean {
    return $.utils.getUint16(0, this) === 2;
  }
  set int8(value: number) {
    $.utils.setUint16(0, 2, this);
    $.utils.setInt8(2, value, this);
  }
  get uint8(): number {
    $.utils.testWhich("uint8", $.utils.getUint16(0, this), 3, this);
    return $.utils.getUint8(2, this);
  }
  get _isUint8(): boolean {
    return $.utils.getUint16(0, this) === 3;
  }
  set uint8(value: number) {
    $.utils.setUint16(0, 3, this);
    $.utils.setUint8(2, value, this);
  }
  get int16(): number {
    $.utils.testWhich("int16", $.utils.getUint16(0, this), 4, this);
    return $.utils.getInt16(2, this);
  }
  get _isInt16(): boolean {
    return $.utils.getUint16(0, this) === 4;
  }
  set int16(value: number) {
    $.utils.setUint16(0, 4, this);
    $.utils.setInt16(2, value, this);
  }
  get uint16(): number {
    $.utils.testWhich("uint16", $.utils.getUint16(0, this), 5, this);
    return $.utils.getUint16(2, this);
  }
  get _isUint16(): boolean {
    return $.utils.getUint16(0, this) === 5;
  }
  set uint16(value: number) {
    $.utils.setUint16(0, 5, this);
    $.utils.setUint16(2, value, this);
  }
  get int32(): number {
    $.utils.testWhich("int32", $.utils.getUint16(0, this), 6, this);
    return $.utils.getInt32(4, this);
  }
  get _isInt32(): boolean {
    return $.utils.getUint16(0, this) === 6;
  }
  set int32(value: number) {
    $.utils.setUint16(0, 6, this);
    $.utils.setInt32(4, value, this);
  }
  get uint32(): number {
    $.utils.testWhich("uint32", $.utils.getUint16(0, this), 7, this);
    return $.utils.getUint32(4, this);
  }
  get _isUint32(): boolean {
    return $.utils.getUint16(0, this) === 7;
  }
  set uint32(value: number) {
    $.utils.setUint16(0, 7, this);
    $.utils.setUint32(4, value, this);
  }
  get int64(): bigint {
    $.utils.testWhich("int64", $.utils.getUint16(0, this), 8, this);
    return $.utils.getInt64(8, this);
  }
  get _isInt64(): boolean {
    return $.utils.getUint16(0, this) === 8;
  }
  set int64(value: bigint) {
    $.utils.setUint16(0, 8, this);
    $.utils.setInt64(8, value, this);
  }
  get uint64(): bigint {
    $.utils.testWhich("uint64", $.utils.getUint16(0, this), 9, this);
    return $.utils.getUint64(8, this);
  }
  get _isUint64(): boolean {
    return $.utils.getUint16(0, this) === 9;
  }
  set uint64(value: bigint) {
    $.utils.setUint16(0, 9, this);
    $.utils.setUint64(8, value, this);
  }
  get float32(): number {
    $.utils.testWhich("float32", $.utils.getUint16(0, this), 10, this);
    return $.utils.getFloat32(4, this);
  }
  get _isFloat32(): boolean {
    return $.utils.getUint16(0, this) === 10;
  }
  set float32(value: number) {
    $.utils.setUint16(0, 10, this);
    $.utils.setFloat32(4, value, this);
  }
  get float64(): number {
    $.utils.testWhich("float64", $.utils.getUint16(0, this), 11, this);
    return $.utils.getFloat64(8, this);
  }
  get _isFloat64(): boolean {
    return $.utils.getUint16(0, this) === 11;
  }
  set float64(value: number) {
    $.utils.setUint16(0, 11, this);
    $.utils.setFloat64(8, value, this);
  }
  toString(): string { return "Filter_Data_" + super.toString(); }
  which(): Filter_Data_Which {
    return $.utils.getUint16(0, this) as Filter_Data_Which;
  }
}
export class Filter extends $.Struct {
  static readonly _capnp = {
    displayName: "Filter",
    id: "e7175047415b3f97",
    size: new $.ObjectSize(16, 4),
  };
  /**
* filter type
*
*/
  get type(): string {
    return $.utils.getText(0, this);
  }
  set type(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* filter data
*
*/
  get data(): Filter_Data {
    return $.utils.getAs(Filter_Data, this);
  }
  _initData(): Filter_Data {
    return $.utils.getAs(Filter_Data, this);
  }
  _adoptFloatScaleConfig(value: $.Orphan<FloatScaleConfig>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownFloatScaleConfig(): $.Orphan<FloatScaleConfig> {
    return $.utils.disown(this.floatScaleConfig);
  }
  get floatScaleConfig(): FloatScaleConfig {
    return $.utils.getStruct(2, FloatScaleConfig, this);
  }
  _hasFloatScaleConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initFloatScaleConfig(): FloatScaleConfig {
    return $.utils.initStructAt(2, FloatScaleConfig, this);
  }
  set floatScaleConfig(value: FloatScaleConfig) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptWebpConfig(value: $.Orphan<WebpConfig>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownWebpConfig(): $.Orphan<WebpConfig> {
    return $.utils.disown(this.webpConfig);
  }
  get webpConfig(): WebpConfig {
    return $.utils.getStruct(3, WebpConfig, this);
  }
  _hasWebpConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initWebpConfig(): WebpConfig {
    return $.utils.initStructAt(3, WebpConfig, this);
  }
  set webpConfig(value: WebpConfig) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  toString(): string { return "Filter_" + super.toString(); }
}
export class FilterPipeline extends $.Struct {
  static readonly _capnp = {
    displayName: "FilterPipeline",
    id: "bc4583f733eac4f5",
    size: new $.ObjectSize(0, 1),
  };
  static _Filters: $.ListCtor<Filter>;
  _adoptFilters(value: $.Orphan<$.List<Filter>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownFilters(): $.Orphan<$.List<Filter>> {
    return $.utils.disown(this.filters);
  }
  get filters(): $.List<Filter> {
    return $.utils.getList(0, FilterPipeline._Filters, this);
  }
  _hasFilters(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initFilters(length: number): $.List<Filter> {
    return $.utils.initList(0, FilterPipeline._Filters, length, this);
  }
  set filters(value: $.List<Filter>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "FilterPipeline_" + super.toString(); }
}
export class Map_Entry extends $.Struct {
  static readonly _capnp = {
    displayName: "Entry",
    id: "db5514c8aaf6faea",
    size: new $.ObjectSize(0, 2),
  };
  _adoptKey(value: $.Orphan<$.Pointer>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownKey(): $.Orphan<$.Pointer> {
    return $.utils.disown(this.key);
  }
  get key(): $.Pointer {
    return $.utils.getPointer(0, this);
  }
  _hasKey(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  set key(value: $.Pointer) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptValue(value: $.Orphan<$.Pointer>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownValue(): $.Orphan<$.Pointer> {
    return $.utils.disown(this.value);
  }
  get value(): $.Pointer {
    return $.utils.getPointer(1, this);
  }
  _hasValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  set value(value: $.Pointer) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "Map_Entry_" + super.toString(); }
}
export class Map extends $.Struct {
  static readonly Entry = Map_Entry;
  static readonly _capnp = {
    displayName: "Map",
    id: "f179c194ae71718c",
    size: new $.ObjectSize(0, 1),
  };
  static _Entries: $.ListCtor<Map_Entry>;
  _adoptEntries(value: $.Orphan<$.List<Map_Entry>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEntries(): $.Orphan<$.List<Map_Entry>> {
    return $.utils.disown(this.entries);
  }
  get entries(): $.List<Map_Entry> {
    return $.utils.getList(0, Map._Entries, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEntries(length: number): $.List<Map_Entry> {
    return $.utils.initList(0, Map._Entries, length, this);
  }
  set entries(value: $.List<Map_Entry>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "Map_" + super.toString(); }
}
export class MapEnumeration_Entry extends $.Struct {
  static readonly _capnp = {
    displayName: "Entry",
    id: "ff915a194348206a",
    size: new $.ObjectSize(0, 2),
  };
  static _Value: $.ListCtor<Enumeration>;
  get key(): string {
    return $.utils.getText(0, this);
  }
  set key(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptValue(value: $.Orphan<$.List<Enumeration>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownValue(): $.Orphan<$.List<Enumeration>> {
    return $.utils.disown(this.value);
  }
  get value(): $.List<Enumeration> {
    return $.utils.getList(1, MapEnumeration_Entry._Value, this);
  }
  _hasValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initValue(length: number): $.List<Enumeration> {
    return $.utils.initList(1, MapEnumeration_Entry._Value, length, this);
  }
  set value(value: $.List<Enumeration>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "MapEnumeration_Entry_" + super.toString(); }
}
export class MapEnumeration extends $.Struct {
  static readonly Entry = MapEnumeration_Entry;
  static readonly _capnp = {
    displayName: "MapEnumeration",
    id: "a9d01efb4b5d8599",
    size: new $.ObjectSize(0, 1),
  };
  static _Entries: $.ListCtor<MapEnumeration_Entry>;
  _adoptEntries(value: $.Orphan<$.List<MapEnumeration_Entry>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEntries(): $.Orphan<$.List<MapEnumeration_Entry>> {
    return $.utils.disown(this.entries);
  }
  get entries(): $.List<MapEnumeration_Entry> {
    return $.utils.getList(0, MapEnumeration._Entries, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEntries(length: number): $.List<MapEnumeration_Entry> {
    return $.utils.initList(0, MapEnumeration._Entries, length, this);
  }
  set entries(value: $.List<MapEnumeration_Entry>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "MapEnumeration_" + super.toString(); }
}
export class MapUInt32_Entry extends $.Struct {
  static readonly _capnp = {
    displayName: "Entry",
    id: "884e0a5f2521a5c6",
    size: new $.ObjectSize(8, 1),
  };
  get key(): string {
    return $.utils.getText(0, this);
  }
  set key(value: string) {
    $.utils.setText(0, value, this);
  }
  get value(): number {
    return $.utils.getUint32(0, this);
  }
  set value(value: number) {
    $.utils.setUint32(0, value, this);
  }
  toString(): string { return "MapUInt32_Entry_" + super.toString(); }
}
export class MapUInt32 extends $.Struct {
  static readonly Entry = MapUInt32_Entry;
  static readonly _capnp = {
    displayName: "MapUInt32",
    id: "c6b5bb09d4611252",
    size: new $.ObjectSize(0, 1),
  };
  static _Entries: $.ListCtor<MapUInt32_Entry>;
  _adoptEntries(value: $.Orphan<$.List<MapUInt32_Entry>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEntries(): $.Orphan<$.List<MapUInt32_Entry>> {
    return $.utils.disown(this.entries);
  }
  get entries(): $.List<MapUInt32_Entry> {
    return $.utils.getList(0, MapUInt32._Entries, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEntries(length: number): $.List<MapUInt32_Entry> {
    return $.utils.initList(0, MapUInt32._Entries, length, this);
  }
  set entries(value: $.List<MapUInt32_Entry>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "MapUInt32_" + super.toString(); }
}
export class MapInt64_Entry extends $.Struct {
  static readonly _capnp = {
    displayName: "Entry",
    id: "a9caccb4333a2baf",
    size: new $.ObjectSize(8, 1),
  };
  get key(): string {
    return $.utils.getText(0, this);
  }
  set key(value: string) {
    $.utils.setText(0, value, this);
  }
  get value(): bigint {
    return $.utils.getInt64(0, this);
  }
  set value(value: bigint) {
    $.utils.setInt64(0, value, this);
  }
  toString(): string { return "MapInt64_Entry_" + super.toString(); }
}
export class MapInt64 extends $.Struct {
  static readonly Entry = MapInt64_Entry;
  static readonly _capnp = {
    displayName: "MapInt64",
    id: "a83707d3ba24dd32",
    size: new $.ObjectSize(0, 1),
  };
  static _Entries: $.ListCtor<MapInt64_Entry>;
  _adoptEntries(value: $.Orphan<$.List<MapInt64_Entry>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEntries(): $.Orphan<$.List<MapInt64_Entry>> {
    return $.utils.disown(this.entries);
  }
  get entries(): $.List<MapInt64_Entry> {
    return $.utils.getList(0, MapInt64._Entries, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEntries(length: number): $.List<MapInt64_Entry> {
    return $.utils.initList(0, MapInt64._Entries, length, this);
  }
  set entries(value: $.List<MapInt64_Entry>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "MapInt64_" + super.toString(); }
}
export class MapUInt64_Entry extends $.Struct {
  static readonly _capnp = {
    displayName: "Entry",
    id: "82d7452da7cd249a",
    size: new $.ObjectSize(8, 1),
  };
  get key(): string {
    return $.utils.getText(0, this);
  }
  set key(value: string) {
    $.utils.setText(0, value, this);
  }
  get value(): bigint {
    return $.utils.getUint64(0, this);
  }
  set value(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  toString(): string { return "MapUInt64_Entry_" + super.toString(); }
}
export class MapUInt64 extends $.Struct {
  static readonly Entry = MapUInt64_Entry;
  static readonly _capnp = {
    displayName: "MapUInt64",
    id: "d3c5983c670e0f42",
    size: new $.ObjectSize(0, 1),
  };
  static _Entries: $.ListCtor<MapUInt64_Entry>;
  _adoptEntries(value: $.Orphan<$.List<MapUInt64_Entry>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEntries(): $.Orphan<$.List<MapUInt64_Entry>> {
    return $.utils.disown(this.entries);
  }
  get entries(): $.List<MapUInt64_Entry> {
    return $.utils.getList(0, MapUInt64._Entries, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEntries(length: number): $.List<MapUInt64_Entry> {
    return $.utils.initList(0, MapUInt64._Entries, length, this);
  }
  set entries(value: $.List<MapUInt64_Entry>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "MapUInt64_" + super.toString(); }
}
export class MapFloat64_Entry extends $.Struct {
  static readonly _capnp = {
    displayName: "Entry",
    id: "bb80cdbc3f312934",
    size: new $.ObjectSize(8, 1),
  };
  get key(): string {
    return $.utils.getText(0, this);
  }
  set key(value: string) {
    $.utils.setText(0, value, this);
  }
  get value(): number {
    return $.utils.getFloat64(0, this);
  }
  set value(value: number) {
    $.utils.setFloat64(0, value, this);
  }
  toString(): string { return "MapFloat64_Entry_" + super.toString(); }
}
export class MapFloat64 extends $.Struct {
  static readonly Entry = MapFloat64_Entry;
  static readonly _capnp = {
    displayName: "MapFloat64",
    id: "9354174d952207d2",
    size: new $.ObjectSize(0, 1),
  };
  static _Entries: $.ListCtor<MapFloat64_Entry>;
  _adoptEntries(value: $.Orphan<$.List<MapFloat64_Entry>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEntries(): $.Orphan<$.List<MapFloat64_Entry>> {
    return $.utils.disown(this.entries);
  }
  get entries(): $.List<MapFloat64_Entry> {
    return $.utils.getList(0, MapFloat64._Entries, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEntries(length: number): $.List<MapFloat64_Entry> {
    return $.utils.initList(0, MapFloat64._Entries, length, this);
  }
  set entries(value: $.List<MapFloat64_Entry>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "MapFloat64_" + super.toString(); }
}
/**
* Stats struct
*
*/
export class Stats extends $.Struct {
  static readonly _capnp = {
    displayName: "Stats",
    id: "c7e036a11506a1a4",
    size: new $.ObjectSize(0, 2),
  };
  _adoptTimers(value: $.Orphan<MapFloat64>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownTimers(): $.Orphan<MapFloat64> {
    return $.utils.disown(this.timers);
  }
  /**
* timer
*
*/
  get timers(): MapFloat64 {
    return $.utils.getStruct(0, MapFloat64, this);
  }
  _hasTimers(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initTimers(): MapFloat64 {
    return $.utils.initStructAt(0, MapFloat64, this);
  }
  set timers(value: MapFloat64) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptCounters(value: $.Orphan<MapUInt64>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownCounters(): $.Orphan<MapUInt64> {
    return $.utils.disown(this.counters);
  }
  /**
* counters
*
*/
  get counters(): MapUInt64 {
    return $.utils.getStruct(1, MapUInt64, this);
  }
  _hasCounters(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initCounters(): MapUInt64 {
    return $.utils.initStructAt(1, MapUInt64, this);
  }
  set counters(value: MapUInt64) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "Stats_" + super.toString(); }
}
export class UnorderedWriterState extends $.Struct {
  static readonly _capnp = {
    displayName: "UnorderedWriterState",
    id: "8bf6c1d37e748294",
    size: new $.ObjectSize(8, 3),
  };
  /**
* Coordinate pass boolean for partial attribute write
*
*/
  get isCoordsPass(): boolean {
    return $.utils.getBit(0, this);
  }
  set isCoordsPass(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  _adoptCellPos(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownCellPos(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.cellPos);
  }
  /**
* Cell positions for partial attribute writes
*
*/
  get cellPos(): $.List<bigint> {
    return $.utils.getList(0, $.Uint64List, this);
  }
  _hasCellPos(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initCellPos(length: number): $.List<bigint> {
    return $.utils.initList(0, $.Uint64List, length, this);
  }
  set cellPos(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptCoordDups(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownCoordDups(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.coordDups);
  }
  /**
* Coordinate duplicates for partial attribute writes
*
*/
  get coordDups(): $.List<bigint> {
    return $.utils.getList(1, $.Uint64List, this);
  }
  _hasCoordDups(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initCoordDups(length: number): $.List<bigint> {
    return $.utils.initList(1, $.Uint64List, length, this);
  }
  set coordDups(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptFragMeta(value: $.Orphan<FragmentMetadata>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownFragMeta(): $.Orphan<FragmentMetadata> {
    return $.utils.disown(this.fragMeta);
  }
  /**
* Fragment metadata for partial attribute writes
*
*/
  get fragMeta(): FragmentMetadata {
    return $.utils.getStruct(2, FragmentMetadata, this);
  }
  _hasFragMeta(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initFragMeta(): FragmentMetadata {
    return $.utils.initStructAt(2, FragmentMetadata, this);
  }
  set fragMeta(value: FragmentMetadata) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  toString(): string { return "UnorderedWriterState_" + super.toString(); }
}
/**
* Write struct
*
*/
export class Writer extends $.Struct {
  static readonly _capnp = {
    displayName: "Writer",
    id: "8ba60147a0e6735e",
    size: new $.ObjectSize(8, 5),
  };
  get checkCoordDups(): boolean {
    return $.utils.getBit(0, this);
  }
  set checkCoordDups(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  get checkCoordOOB(): boolean {
    return $.utils.getBit(1, this);
  }
  set checkCoordOOB(value: boolean) {
    $.utils.setBit(1, value, this);
  }
  get dedupCoords(): boolean {
    return $.utils.getBit(2, this);
  }
  set dedupCoords(value: boolean) {
    $.utils.setBit(2, value, this);
  }
  _adoptSubarray(value: $.Orphan<DomainArray>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownSubarray(): $.Orphan<DomainArray> {
    return $.utils.disown(this.subarray);
  }
  /**
* Old-style (single-range) subarray for dense writes
*
*/
  get subarray(): DomainArray {
    return $.utils.getStruct(0, DomainArray, this);
  }
  _hasSubarray(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initSubarray(): DomainArray {
    return $.utils.initStructAt(0, DomainArray, this);
  }
  set subarray(value: DomainArray) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptSubarrayRanges(value: $.Orphan<Subarray>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownSubarrayRanges(): $.Orphan<Subarray> {
    return $.utils.disown(this.subarrayRanges);
  }
  /**
* The query subarray/ranges object, new style range object
*
*/
  get subarrayRanges(): Subarray {
    return $.utils.getStruct(1, Subarray, this);
  }
  _hasSubarrayRanges(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initSubarrayRanges(): Subarray {
    return $.utils.initStructAt(1, Subarray, this);
  }
  set subarrayRanges(value: Subarray) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptStats(value: $.Orphan<Stats>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownStats(): $.Orphan<Stats> {
    return $.utils.disown(this.stats);
  }
  /**
* Stats object
*
*/
  get stats(): Stats {
    return $.utils.getStruct(2, Stats, this);
  }
  _hasStats(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initStats(): Stats {
    return $.utils.initStructAt(2, Stats, this);
  }
  set stats(value: Stats) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptGlobalWriteStateV1(value: $.Orphan<GlobalWriteState>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownGlobalWriteStateV1(): $.Orphan<GlobalWriteState> {
    return $.utils.disown(this.globalWriteStateV1);
  }
  /**
* All the state necessary for global writes to work in TileDB Cloud
*
*/
  get globalWriteStateV1(): GlobalWriteState {
    return $.utils.getStruct(3, GlobalWriteState, this);
  }
  _hasGlobalWriteStateV1(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initGlobalWriteStateV1(): GlobalWriteState {
    return $.utils.initStructAt(3, GlobalWriteState, this);
  }
  set globalWriteStateV1(value: GlobalWriteState) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptUnorderedWriterState(value: $.Orphan<UnorderedWriterState>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownUnorderedWriterState(): $.Orphan<UnorderedWriterState> {
    return $.utils.disown(this.unorderedWriterState);
  }
  /**
* Unordered writer state
*
*/
  get unorderedWriterState(): UnorderedWriterState {
    return $.utils.getStruct(4, UnorderedWriterState, this);
  }
  _hasUnorderedWriterState(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initUnorderedWriterState(): UnorderedWriterState {
    return $.utils.initStructAt(4, UnorderedWriterState, this);
  }
  set unorderedWriterState(value: UnorderedWriterState) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  toString(): string { return "Writer_" + super.toString(); }
}
/**
* A set of 1D ranges for a subarray
*
*/
export class SubarrayRanges extends $.Struct {
  static readonly _capnp = {
    displayName: "SubarrayRanges",
    id: "86cfc12d74ed4aa0",
    size: new $.ObjectSize(8, 4),
  };
  /**
* Datatype of the ranges
*
*/
  get type(): string {
    return $.utils.getText(0, this);
  }
  set type(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* True if the range is the default range
*
*/
  get hasDefaultRange(): boolean {
    return $.utils.getBit(0, this);
  }
  set hasDefaultRange(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  _adoptBuffer(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownBuffer(): $.Orphan<$.Data> {
    return $.utils.disown(this.buffer);
  }
  /**
* The bytes of the ranges
*
*/
  get buffer(): $.Data {
    return $.utils.getData(1, this);
  }
  _hasBuffer(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initBuffer(length: number): $.Data {
    return $.utils.initData(1, length, this);
  }
  set buffer(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptBufferSizes(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownBufferSizes(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.bufferSizes);
  }
  /**
* The list of sizes per range
*
*/
  get bufferSizes(): $.List<bigint> {
    return $.utils.getList(2, $.Uint64List, this);
  }
  _hasBufferSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initBufferSizes(length: number): $.List<bigint> {
    return $.utils.initList(2, $.Uint64List, length, this);
  }
  set bufferSizes(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptBufferStartSizes(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownBufferStartSizes(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.bufferStartSizes);
  }
  /**
* The list of start sizes per range
*
*/
  get bufferStartSizes(): $.List<bigint> {
    return $.utils.getList(3, $.Uint64List, this);
  }
  _hasBufferStartSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initBufferStartSizes(length: number): $.List<bigint> {
    return $.utils.initList(3, $.Uint64List, length, this);
  }
  set bufferStartSizes(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  toString(): string { return "SubarrayRanges_" + super.toString(); }
}
/**
* A set of label 1D ranges for a subarray
*
*/
export class LabelSubarrayRanges extends $.Struct {
  static readonly _capnp = {
    displayName: "LabelSubarrayRanges",
    id: "f7aa276767b422e7",
    size: new $.ObjectSize(8, 2),
  };
  /**
* Index of the dimension the label is attached to
*
*/
  get dimensionId(): number {
    return $.utils.getUint32(0, this);
  }
  set dimensionId(value: number) {
    $.utils.setUint32(0, value, this);
  }
  /**
* Name of the dimension label
*
*/
  get name(): string {
    return $.utils.getText(0, this);
  }
  set name(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptRanges(value: $.Orphan<SubarrayRanges>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownRanges(): $.Orphan<SubarrayRanges> {
    return $.utils.disown(this.ranges);
  }
  /**
* A set of 1D ranges for a subarray
*
*/
  get ranges(): SubarrayRanges {
    return $.utils.getStruct(1, SubarrayRanges, this);
  }
  _hasRanges(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initRanges(): SubarrayRanges {
    return $.utils.initStructAt(1, SubarrayRanges, this);
  }
  set ranges(value: SubarrayRanges) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "LabelSubarrayRanges_" + super.toString(); }
}
/**
* A Subarray
*
*/
export class Subarray extends $.Struct {
  static readonly _capnp = {
    displayName: "Subarray",
    id: "dba20dec138adac9",
    size: new $.ObjectSize(8, 6),
    defaultCoalesceRanges: $.getBitMask(true, 0)
  };
  static _Ranges: $.ListCtor<SubarrayRanges>;
  static _LabelRanges: $.ListCtor<LabelSubarrayRanges>;
  /**
* The layout of the subarray
*
*/
  get layout(): string {
    return $.utils.getText(0, this);
  }
  set layout(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptRanges(value: $.Orphan<$.List<SubarrayRanges>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownRanges(): $.Orphan<$.List<SubarrayRanges>> {
    return $.utils.disown(this.ranges);
  }
  /**
* List of 1D ranges, one per dimension
*
*/
  get ranges(): $.List<SubarrayRanges> {
    return $.utils.getList(1, Subarray._Ranges, this);
  }
  _hasRanges(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initRanges(length: number): $.List<SubarrayRanges> {
    return $.utils.initList(1, Subarray._Ranges, length, this);
  }
  set ranges(value: $.List<SubarrayRanges>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptStats(value: $.Orphan<Stats>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownStats(): $.Orphan<Stats> {
    return $.utils.disown(this.stats);
  }
  /**
* Stats object
*
*/
  get stats(): Stats {
    return $.utils.getStruct(2, Stats, this);
  }
  _hasStats(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initStats(): Stats {
    return $.utils.initStructAt(2, Stats, this);
  }
  set stats(value: Stats) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptRelevantFragments(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownRelevantFragments(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.relevantFragments);
  }
  /**
* Relevant fragments
*
*/
  get relevantFragments(): $.List<number> {
    return $.utils.getList(3, $.Uint32List, this);
  }
  _hasRelevantFragments(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initRelevantFragments(length: number): $.List<number> {
    return $.utils.initList(3, $.Uint32List, length, this);
  }
  set relevantFragments(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptLabelRanges(value: $.Orphan<$.List<LabelSubarrayRanges>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownLabelRanges(): $.Orphan<$.List<LabelSubarrayRanges>> {
    return $.utils.disown(this.labelRanges);
  }
  /**
* List of 1D ranges for dimensions that have labels
*
*/
  get labelRanges(): $.List<LabelSubarrayRanges> {
    return $.utils.getList(4, Subarray._LabelRanges, this);
  }
  _hasLabelRanges(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initLabelRanges(length: number): $.List<LabelSubarrayRanges> {
    return $.utils.initList(4, Subarray._LabelRanges, length, this);
  }
  set labelRanges(value: $.List<LabelSubarrayRanges>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptAttributeRanges(value: $.Orphan<Map>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownAttributeRanges(): $.Orphan<Map> {
    return $.utils.disown(this.attributeRanges);
  }
  /**
* List of 1D ranges for each attribute
*
*/
  get attributeRanges(): Map {
    return $.utils.getStruct(5, Map, this);
  }
  _hasAttributeRanges(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initAttributeRanges(): Map {
    return $.utils.initStructAt(5, Map, this);
  }
  set attributeRanges(value: Map) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  /**
* True if Subarray should coalesce overlapping ranges.
*
*/
  get coalesceRanges(): boolean {
    return $.utils.getBit(0, this, Subarray._capnp.defaultCoalesceRanges);
  }
  set coalesceRanges(value: boolean) {
    $.utils.setBit(0, value, this, Subarray._capnp.defaultCoalesceRanges);
  }
  toString(): string { return "Subarray_" + super.toString(); }
}
export class SubarrayPartitioner_PartitionInfo extends $.Struct {
  static readonly _capnp = {
    displayName: "PartitionInfo",
    id: "f86b7bf97823250f",
    size: new $.ObjectSize(24, 1),
  };
  _adoptSubarray(value: $.Orphan<Subarray>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownSubarray(): $.Orphan<Subarray> {
    return $.utils.disown(this.subarray);
  }
  get subarray(): Subarray {
    return $.utils.getStruct(0, Subarray, this);
  }
  _hasSubarray(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initSubarray(): Subarray {
    return $.utils.initStructAt(0, Subarray, this);
  }
  set subarray(value: Subarray) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  get start(): bigint {
    return $.utils.getUint64(0, this);
  }
  set start(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  get end(): bigint {
    return $.utils.getUint64(8, this);
  }
  set end(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  get splitMultiRange(): boolean {
    return $.utils.getBit(128, this);
  }
  set splitMultiRange(value: boolean) {
    $.utils.setBit(128, value, this);
  }
  toString(): string { return "SubarrayPartitioner_PartitionInfo_" + super.toString(); }
}
export class SubarrayPartitioner_State extends $.Struct {
  static readonly _capnp = {
    displayName: "State",
    id: "fdd9e47288724221",
    size: new $.ObjectSize(16, 2),
  };
  static _SingleRange: $.ListCtor<Subarray>;
  static _MultiRange: $.ListCtor<Subarray>;
  get start(): bigint {
    return $.utils.getUint64(0, this);
  }
  set start(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  get end(): bigint {
    return $.utils.getUint64(8, this);
  }
  set end(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  _adoptSingleRange(value: $.Orphan<$.List<Subarray>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownSingleRange(): $.Orphan<$.List<Subarray>> {
    return $.utils.disown(this.singleRange);
  }
  get singleRange(): $.List<Subarray> {
    return $.utils.getList(0, SubarrayPartitioner_State._SingleRange, this);
  }
  _hasSingleRange(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initSingleRange(length: number): $.List<Subarray> {
    return $.utils.initList(0, SubarrayPartitioner_State._SingleRange, length, this);
  }
  set singleRange(value: $.List<Subarray>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptMultiRange(value: $.Orphan<$.List<Subarray>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownMultiRange(): $.Orphan<$.List<Subarray>> {
    return $.utils.disown(this.multiRange);
  }
  get multiRange(): $.List<Subarray> {
    return $.utils.getList(1, SubarrayPartitioner_State._MultiRange, this);
  }
  _hasMultiRange(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initMultiRange(length: number): $.List<Subarray> {
    return $.utils.initList(1, SubarrayPartitioner_State._MultiRange, length, this);
  }
  set multiRange(value: $.List<Subarray>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "SubarrayPartitioner_State_" + super.toString(); }
}
/**
* The subarray partitioner
*
*/
export class SubarrayPartitioner extends $.Struct {
  static readonly PartitionInfo = SubarrayPartitioner_PartitionInfo;
  static readonly State = SubarrayPartitioner_State;
  static readonly _capnp = {
    displayName: "SubarrayPartitioner",
    id: "ff14003c70494585",
    size: new $.ObjectSize(24, 5),
  };
  static _Budget: $.ListCtor<AttributeBufferSize>;
  _adoptSubarray(value: $.Orphan<Subarray>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownSubarray(): $.Orphan<Subarray> {
    return $.utils.disown(this.subarray);
  }
  /**
* The subarray the partitioner will iterate on to produce partitions.
*
*/
  get subarray(): Subarray {
    return $.utils.getStruct(0, Subarray, this);
  }
  _hasSubarray(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initSubarray(): Subarray {
    return $.utils.initStructAt(0, Subarray, this);
  }
  set subarray(value: Subarray) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptBudget(value: $.Orphan<$.List<AttributeBufferSize>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownBudget(): $.Orphan<$.List<AttributeBufferSize>> {
    return $.utils.disown(this.budget);
  }
  /**
* Result size budget (in bytes) for all attributes.
*
*/
  get budget(): $.List<AttributeBufferSize> {
    return $.utils.getList(1, SubarrayPartitioner._Budget, this);
  }
  _hasBudget(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initBudget(length: number): $.List<AttributeBufferSize> {
    return $.utils.initList(1, SubarrayPartitioner._Budget, length, this);
  }
  set budget(value: $.List<AttributeBufferSize>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptCurrent(value: $.Orphan<SubarrayPartitioner_PartitionInfo>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownCurrent(): $.Orphan<SubarrayPartitioner_PartitionInfo> {
    return $.utils.disown(this.current);
  }
  /**
* The current partition info
*
*/
  get current(): SubarrayPartitioner_PartitionInfo {
    return $.utils.getStruct(2, SubarrayPartitioner_PartitionInfo, this);
  }
  _hasCurrent(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initCurrent(): SubarrayPartitioner_PartitionInfo {
    return $.utils.initStructAt(2, SubarrayPartitioner_PartitionInfo, this);
  }
  set current(value: SubarrayPartitioner_PartitionInfo) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptState(value: $.Orphan<SubarrayPartitioner_State>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownState(): $.Orphan<SubarrayPartitioner_State> {
    return $.utils.disown(this.state);
  }
  /**
* The state information for the remaining partitions to be produced
*
*/
  get state(): SubarrayPartitioner_State {
    return $.utils.getStruct(3, SubarrayPartitioner_State, this);
  }
  _hasState(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initState(): SubarrayPartitioner_State {
    return $.utils.initStructAt(3, SubarrayPartitioner_State, this);
  }
  set state(value: SubarrayPartitioner_State) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  /**
* The memory budget for the fixed-sized attributes and the offsets of the var-sized attributes
*
*/
  get memoryBudget(): bigint {
    return $.utils.getUint64(0, this);
  }
  set memoryBudget(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* The memory budget for the var-sized attributes
*
*/
  get memoryBudgetVar(): bigint {
    return $.utils.getUint64(8, this);
  }
  set memoryBudgetVar(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
* The memory budget for the validity buffers
*
*/
  get memoryBudgetValidity(): bigint {
    return $.utils.getUint64(16, this);
  }
  set memoryBudgetValidity(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  _adoptStats(value: $.Orphan<Stats>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownStats(): $.Orphan<Stats> {
    return $.utils.disown(this.stats);
  }
  /**
* Stats object
*
*/
  get stats(): Stats {
    return $.utils.getStruct(4, Stats, this);
  }
  _hasStats(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initStats(): Stats {
    return $.utils.initStructAt(4, Stats, this);
  }
  set stats(value: Stats) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  toString(): string { return "SubarrayPartitioner_" + super.toString(); }
}
export class ReadState extends $.Struct {
  static readonly _capnp = {
    displayName: "ReadState",
    id: "cbe1e7c13508aa2c",
    size: new $.ObjectSize(8, 1),
  };
  /**
* `True` if the query produced results that could not fit in some buffer.
*
*/
  get overflowed(): boolean {
    return $.utils.getBit(0, this);
  }
  set overflowed(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  /**
* True if the current subarray partition is unsplittable.
*
*/
  get unsplittable(): boolean {
    return $.utils.getBit(1, this);
  }
  set unsplittable(value: boolean) {
    $.utils.setBit(1, value, this);
  }
  /**
* True if the reader has been initialized
*
*/
  get initialized(): boolean {
    return $.utils.getBit(2, this);
  }
  set initialized(value: boolean) {
    $.utils.setBit(2, value, this);
  }
  _adoptSubarrayPartitioner(value: $.Orphan<SubarrayPartitioner>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownSubarrayPartitioner(): $.Orphan<SubarrayPartitioner> {
    return $.utils.disown(this.subarrayPartitioner);
  }
  /**
* The subarray partitioner
*
*/
  get subarrayPartitioner(): SubarrayPartitioner {
    return $.utils.getStruct(0, SubarrayPartitioner, this);
  }
  _hasSubarrayPartitioner(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initSubarrayPartitioner(): SubarrayPartitioner {
    return $.utils.initStructAt(0, SubarrayPartitioner, this);
  }
  set subarrayPartitioner(value: SubarrayPartitioner) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "ReadState_" + super.toString(); }
}
/**
* A clause within a condition
*
*/
export class ConditionClause extends $.Struct {
  static readonly _capnp = {
    displayName: "ConditionClause",
    id: "dac6a7f675c57409",
    size: new $.ObjectSize(8, 3),
  };
  /**
* The name of the field this clause applies to
*
*/
  get fieldName(): string {
    return $.utils.getText(0, this);
  }
  set fieldName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptValue(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownValue(): $.Orphan<$.Data> {
    return $.utils.disown(this.value);
  }
  /**
* The comparison value
*
*/
  get value(): $.Data {
    return $.utils.getData(1, this);
  }
  _hasValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initValue(length: number): $.Data {
    return $.utils.initData(1, length, this);
  }
  set value(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  /**
* The comparison operation
*
*/
  get op(): string {
    return $.utils.getText(2, this);
  }
  set op(value: string) {
    $.utils.setText(2, value, this);
  }
  /**
* Whether or not to use the associated attribute's Enumeration
*
*/
  get useEnumeration(): boolean {
    return $.utils.getBit(0, this);
  }
  set useEnumeration(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  toString(): string { return "ConditionClause_" + super.toString(); }
}
/**
* A representation of the AST representing a query condition
*
*/
export class ASTNode extends $.Struct {
  static readonly _capnp = {
    displayName: "ASTNode",
    id: "afc739d5c01e6496",
    size: new $.ObjectSize(8, 6),
  };
  static _Children: $.ListCtor<ASTNode>;
  /**
* True if node is an expression/compound node
*
*/
  get isExpression(): boolean {
    return $.utils.getBit(0, this);
  }
  set isExpression(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  /**
* The name of the field this clause applies to
*
*/
  get fieldName(): string {
    return $.utils.getText(0, this);
  }
  set fieldName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptValue(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownValue(): $.Orphan<$.Data> {
    return $.utils.disown(this.value);
  }
  /**
* The comparison value or set membership data
*
*/
  get value(): $.Data {
    return $.utils.getData(1, this);
  }
  _hasValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initValue(length: number): $.Data {
    return $.utils.initData(1, length, this);
  }
  set value(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  /**
* The comparison operation
*
*/
  get op(): string {
    return $.utils.getText(2, this);
  }
  set op(value: string) {
    $.utils.setText(2, value, this);
  }
  _adoptChildren(value: $.Orphan<$.List<ASTNode>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownChildren(): $.Orphan<$.List<ASTNode>> {
    return $.utils.disown(this.children);
  }
  /**
* A list of children
*
*/
  get children(): $.List<ASTNode> {
    return $.utils.getList(3, ASTNode._Children, this);
  }
  _hasChildren(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initChildren(length: number): $.List<ASTNode> {
    return $.utils.initList(3, ASTNode._Children, length, this);
  }
  set children(value: $.List<ASTNode>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  /**
* The combination logical operator
*
*/
  get combinationOp(): string {
    return $.utils.getText(4, this);
  }
  set combinationOp(value: string) {
    $.utils.setText(4, value, this);
  }
  /**
* Whether or not to use the associated attribute's Enumeration
*
*/
  get useEnumeration(): boolean {
    return $.utils.getBit(1, this);
  }
  set useEnumeration(value: boolean) {
    $.utils.setBit(1, value, this);
  }
  _adoptOffsets(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownOffsets(): $.Orphan<$.Data> {
    return $.utils.disown(this.offsets);
  }
  /**
* The offsets for set membership data
*
*/
  get offsets(): $.Data {
    return $.utils.getData(5, this);
  }
  _hasOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initOffsets(length: number): $.Data {
    return $.utils.initData(5, length, this);
  }
  set offsets(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  toString(): string { return "ASTNode_" + super.toString(); }
}
/**
* The query condition
*
*/
export class Condition extends $.Struct {
  static readonly _capnp = {
    displayName: "Condition",
    id: "eaf57cb9871fc06f",
    size: new $.ObjectSize(0, 3),
  };
  static _Clauses: $.ListCtor<ConditionClause>;
  _adoptClauses(value: $.Orphan<$.List<ConditionClause>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownClauses(): $.Orphan<$.List<ConditionClause>> {
    return $.utils.disown(this.clauses);
  }
  /**
* All clauses in this condition
*
*/
  get clauses(): $.List<ConditionClause> {
    return $.utils.getList(0, Condition._Clauses, this);
  }
  _hasClauses(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initClauses(length: number): $.List<ConditionClause> {
    return $.utils.initList(0, Condition._Clauses, length, this);
  }
  set clauses(value: $.List<ConditionClause>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptClauseCombinationOps(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownClauseCombinationOps(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.clauseCombinationOps);
  }
  /**
* The operation that combines each condition
*
*/
  get clauseCombinationOps(): $.List<string> {
    return $.utils.getList(1, $.TextList, this);
  }
  _hasClauseCombinationOps(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initClauseCombinationOps(length: number): $.List<string> {
    return $.utils.initList(1, $.TextList, length, this);
  }
  set clauseCombinationOps(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptTree(value: $.Orphan<ASTNode>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownTree(): $.Orphan<ASTNode> {
    return $.utils.disown(this.tree);
  }
  /**
* The AST representing this condition
*
*/
  get tree(): ASTNode {
    return $.utils.getStruct(2, ASTNode, this);
  }
  _hasTree(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initTree(): ASTNode {
    return $.utils.initStructAt(2, ASTNode, this);
  }
  set tree(value: ASTNode) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  toString(): string { return "Condition_" + super.toString(); }
}
/**
* Read struct (can't be called reader due to class name conflict)
*
*/
export class QueryReader extends $.Struct {
  static readonly _capnp = {
    displayName: "QueryReader",
    id: "e19754f813ccf79c",
    size: new $.ObjectSize(8, 5),
  };
  /**
* The layout of the cells in the result of the subarray
*
*/
  get layout(): string {
    return $.utils.getText(0, this);
  }
  set layout(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptSubarray(value: $.Orphan<Subarray>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownSubarray(): $.Orphan<Subarray> {
    return $.utils.disown(this.subarray);
  }
  /**
* The query subarray.
*
*/
  get subarray(): Subarray {
    return $.utils.getStruct(1, Subarray, this);
  }
  _hasSubarray(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initSubarray(): Subarray {
    return $.utils.initStructAt(1, Subarray, this);
  }
  set subarray(value: Subarray) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptReadState(value: $.Orphan<ReadState>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownReadState(): $.Orphan<ReadState> {
    return $.utils.disown(this.readState);
  }
  /**
* Read state of reader
*
*/
  get readState(): ReadState {
    return $.utils.getStruct(2, ReadState, this);
  }
  _hasReadState(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initReadState(): ReadState {
    return $.utils.initStructAt(2, ReadState, this);
  }
  set readState(value: ReadState) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptCondition(value: $.Orphan<Condition>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownCondition(): $.Orphan<Condition> {
    return $.utils.disown(this.condition);
  }
  /**
* The query condition
*
*/
  get condition(): Condition {
    return $.utils.getStruct(3, Condition, this);
  }
  _hasCondition(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initCondition(): Condition {
    return $.utils.initStructAt(3, Condition, this);
  }
  set condition(value: Condition) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptStats(value: $.Orphan<Stats>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownStats(): $.Orphan<Stats> {
    return $.utils.disown(this.stats);
  }
  /**
* Stats object
*
*/
  get stats(): Stats {
    return $.utils.getStruct(4, Stats, this);
  }
  _hasStats(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initStats(): Stats {
    return $.utils.initStructAt(4, Stats, this);
  }
  set stats(value: Stats) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  /**
* True if dim label query is using increasing order, false if decreasing order.
*
*/
  get dimLabelIncreasing(): boolean {
    return $.utils.getBit(0, this);
  }
  set dimLabelIncreasing(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  toString(): string { return "QueryReader_" + super.toString(); }
}
/**
* Delete struct
*
*/
export class Delete extends $.Struct {
  static readonly _capnp = {
    displayName: "Delete",
    id: "d74f5fed155d316c",
    size: new $.ObjectSize(0, 2),
  };
  _adoptCondition(value: $.Orphan<Condition>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownCondition(): $.Orphan<Condition> {
    return $.utils.disown(this.condition);
  }
  /**
* The delete condition
*
*/
  get condition(): Condition {
    return $.utils.getStruct(0, Condition, this);
  }
  _hasCondition(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initCondition(): Condition {
    return $.utils.initStructAt(0, Condition, this);
  }
  set condition(value: Condition) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptStats(value: $.Orphan<Stats>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownStats(): $.Orphan<Stats> {
    return $.utils.disown(this.stats);
  }
  /**
* Stats object
*
*/
  get stats(): Stats {
    return $.utils.getStruct(1, Stats, this);
  }
  _hasStats(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initStats(): Stats {
    return $.utils.initStructAt(1, Stats, this);
  }
  set stats(value: Stats) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "Delete_" + super.toString(); }
}
/**
* Result cell slab
*
*/
export class ResultCellSlab extends $.Struct {
  static readonly _capnp = {
    displayName: "ResultCellSlab",
    id: "def87cead82188e7",
    size: new $.ObjectSize(32, 0),
  };
  /**
* Fragment index
*
*/
  get fragIdx(): number {
    return $.utils.getUint32(0, this);
  }
  set fragIdx(value: number) {
    $.utils.setUint32(0, value, this);
  }
  /**
* Tile index
*
*/
  get tileIdx(): bigint {
    return $.utils.getUint64(8, this);
  }
  set tileIdx(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
* Start of the cell slab
*
*/
  get start(): bigint {
    return $.utils.getUint64(16, this);
  }
  set start(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  /**
* Length of the cell slab
*
*/
  get length(): bigint {
    return $.utils.getUint64(24, this);
  }
  set length(value: bigint) {
    $.utils.setUint64(24, value, this);
  }
  toString(): string { return "ResultCellSlab_" + super.toString(); }
}
/**
* Tile/cell index for a fragment
*
*/
export class FragmentIndex extends $.Struct {
  static readonly _capnp = {
    displayName: "FragmentIndex",
    id: "c1a2d010de779de5",
    size: new $.ObjectSize(16, 0),
  };
  /**
* Tile index
*
*/
  get tileIdx(): bigint {
    return $.utils.getUint64(0, this);
  }
  set tileIdx(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* Cell index
*
*/
  get cellIdx(): bigint {
    return $.utils.getUint64(8, this);
  }
  set cellIdx(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  toString(): string { return "FragmentIndex_" + super.toString(); }
}
export class ReadStateIndex extends $.Struct {
  static readonly _capnp = {
    displayName: "ReadStateIndex",
    id: "c86c77b5f6a2bf0f",
    size: new $.ObjectSize(8, 2),
  };
  static _ResultCellSlab: $.ListCtor<ResultCellSlab>;
  static _FragTileIdx: $.ListCtor<FragmentIndex>;
  _adoptResultCellSlab(value: $.Orphan<$.List<ResultCellSlab>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownResultCellSlab(): $.Orphan<$.List<ResultCellSlab>> {
    return $.utils.disown(this.resultCellSlab);
  }
  /**
* Result cell slab.
*
*/
  get resultCellSlab(): $.List<ResultCellSlab> {
    return $.utils.getList(0, ReadStateIndex._ResultCellSlab, this);
  }
  _hasResultCellSlab(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initResultCellSlab(length: number): $.List<ResultCellSlab> {
    return $.utils.initList(0, ReadStateIndex._ResultCellSlab, length, this);
  }
  set resultCellSlab(value: $.List<ResultCellSlab>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptFragTileIdx(value: $.Orphan<$.List<FragmentIndex>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownFragTileIdx(): $.Orphan<$.List<FragmentIndex>> {
    return $.utils.disown(this.fragTileIdx);
  }
  /**
* Tile/cell index for each fragments.
*
*/
  get fragTileIdx(): $.List<FragmentIndex> {
    return $.utils.getList(1, ReadStateIndex._FragTileIdx, this);
  }
  _hasFragTileIdx(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initFragTileIdx(length: number): $.List<FragmentIndex> {
    return $.utils.initList(1, ReadStateIndex._FragTileIdx, length, this);
  }
  set fragTileIdx(value: $.List<FragmentIndex>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  /**
* Is the reader done adding result tiles.
*
*/
  get doneAddingResultTiles(): boolean {
    return $.utils.getBit(0, this);
  }
  set doneAddingResultTiles(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  toString(): string { return "ReadStateIndex_" + super.toString(); }
}
/**
* Reader struct for indexed readers.
*
*/
export class ReaderIndex extends $.Struct {
  static readonly _capnp = {
    displayName: "ReaderIndex",
    id: "9b9a5fc7713a8692",
    size: new $.ObjectSize(0, 5),
  };
  /**
* The layout of the cells in the result of the subarray
*
*/
  get layout(): string {
    return $.utils.getText(0, this);
  }
  set layout(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptSubarray(value: $.Orphan<Subarray>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownSubarray(): $.Orphan<Subarray> {
    return $.utils.disown(this.subarray);
  }
  /**
* The query subarray.
*
*/
  get subarray(): Subarray {
    return $.utils.getStruct(1, Subarray, this);
  }
  _hasSubarray(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initSubarray(): Subarray {
    return $.utils.initStructAt(1, Subarray, this);
  }
  set subarray(value: Subarray) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptReadState(value: $.Orphan<ReadStateIndex>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownReadState(): $.Orphan<ReadStateIndex> {
    return $.utils.disown(this.readState);
  }
  /**
* Read state of reader
*
*/
  get readState(): ReadStateIndex {
    return $.utils.getStruct(2, ReadStateIndex, this);
  }
  _hasReadState(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initReadState(): ReadStateIndex {
    return $.utils.initStructAt(2, ReadStateIndex, this);
  }
  set readState(value: ReadStateIndex) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptCondition(value: $.Orphan<Condition>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownCondition(): $.Orphan<Condition> {
    return $.utils.disown(this.condition);
  }
  /**
* The query condition
*
*/
  get condition(): Condition {
    return $.utils.getStruct(3, Condition, this);
  }
  _hasCondition(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initCondition(): Condition {
    return $.utils.initStructAt(3, Condition, this);
  }
  set condition(value: Condition) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptStats(value: $.Orphan<Stats>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownStats(): $.Orphan<Stats> {
    return $.utils.disown(this.stats);
  }
  /**
* Stats object
*
*/
  get stats(): Stats {
    return $.utils.getStruct(4, Stats, this);
  }
  _hasStats(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initStats(): Stats {
    return $.utils.initStructAt(4, Stats, this);
  }
  set stats(value: Stats) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  toString(): string { return "ReaderIndex_" + super.toString(); }
}
export class Query extends $.Struct {
  static readonly _capnp = {
    displayName: "Query",
    id: "96ba49d0f8b23ccc",
    size: new $.ObjectSize(32, 17),
  };
  static _AttributeBufferHeaders: $.ListCtor<AttributeBufferHeader>;
  static _WrittenFragmentInfo: $.ListCtor<WrittenFragmentInfo>;
  static _Channels: $.ListCtor<QueryChannel>;
  _adoptAttributeBufferHeaders(value: $.Orphan<$.List<AttributeBufferHeader>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownAttributeBufferHeaders(): $.Orphan<$.List<AttributeBufferHeader>> {
    return $.utils.disown(this.attributeBufferHeaders);
  }
  /**
* list of attribute buffer headers
*
*/
  get attributeBufferHeaders(): $.List<AttributeBufferHeader> {
    return $.utils.getList(0, Query._AttributeBufferHeaders, this);
  }
  _hasAttributeBufferHeaders(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initAttributeBufferHeaders(length: number): $.List<AttributeBufferHeader> {
    return $.utils.initList(0, Query._AttributeBufferHeaders, length, this);
  }
  set attributeBufferHeaders(value: $.List<AttributeBufferHeader>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  /**
* query write layout
*
*/
  get layout(): string {
    return $.utils.getText(1, this);
  }
  set layout(value: string) {
    $.utils.setText(1, value, this);
  }
  /**
* query status
*
*/
  get status(): string {
    return $.utils.getText(2, this);
  }
  set status(value: string) {
    $.utils.setText(2, value, this);
  }
  /**
* Type of query
*
*/
  get type(): string {
    return $.utils.getText(3, this);
  }
  set type(value: string) {
    $.utils.setText(3, value, this);
  }
  _adoptWriter(value: $.Orphan<Writer>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownWriter(): $.Orphan<Writer> {
    return $.utils.disown(this.writer);
  }
  /**
* writer contains data needed for continuation of global write order queries
*
*/
  get writer(): Writer {
    return $.utils.getStruct(4, Writer, this);
  }
  _hasWriter(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initWriter(): Writer {
    return $.utils.initStructAt(4, Writer, this);
  }
  set writer(value: Writer) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptReader(value: $.Orphan<QueryReader>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownReader(): $.Orphan<QueryReader> {
    return $.utils.disown(this.reader);
  }
  /**
* reader contains data needed for continuation of incomplete reads
*
*/
  get reader(): QueryReader {
    return $.utils.getStruct(5, QueryReader, this);
  }
  _hasReader(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initReader(): QueryReader {
    return $.utils.initStructAt(5, QueryReader, this);
  }
  set reader(value: QueryReader) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptArray(value: $.Orphan<Array>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownArray(): $.Orphan<Array> {
    return $.utils.disown(this.array);
  }
  /**
* Represents an open array
*
*/
  get array(): Array {
    return $.utils.getStruct(6, Array, this);
  }
  _hasArray(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initArray(): Array {
    return $.utils.initStructAt(6, Array, this);
  }
  set array(value: Array) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  /**
* Total number of bytes in fixed size attribute buffers
*
*/
  get totalFixedLengthBufferBytes(): bigint {
    return $.utils.getUint64(0, this);
  }
  set totalFixedLengthBufferBytes(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* Total number of bytes in variable size attribute buffers
*
*/
  get totalVarLenBufferBytes(): bigint {
    return $.utils.getUint64(8, this);
  }
  set totalVarLenBufferBytes(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
* Total number of bytes in validity buffers
*
*/
  get totalValidityBufferBytes(): bigint {
    return $.utils.getUint64(16, this);
  }
  set totalValidityBufferBytes(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  /**
* This field is not longer used, it is replaced by the config
*
*/
  get varOffsetsMode(): string {
    return $.utils.getText(7, this);
  }
  set varOffsetsMode(value: string) {
    $.utils.setText(7, value, this);
  }
  /**
* This field is not longer used, it is replaced by the config
*
*/
  get varOffsetsAddExtraElement(): boolean {
    return $.utils.getBit(192, this);
  }
  set varOffsetsAddExtraElement(value: boolean) {
    $.utils.setBit(192, value, this);
  }
  /**
* This field is not longer used, it is replaced by the config
*
*/
  get varOffsetsBitsize(): number {
    return $.utils.getInt32(28, this);
  }
  set varOffsetsBitsize(value: number) {
    $.utils.setInt32(28, value, this);
  }
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config set on query
*
*/
  get config(): Config {
    return $.utils.getStruct(8, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(8, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  _adoptStats(value: $.Orphan<Stats>): void {
    $.utils.adopt(value, $.utils.getPointer(9, this));
  }
  _disownStats(): $.Orphan<Stats> {
    return $.utils.disown(this.stats);
  }
  /**
* Stats object
*
*/
  get stats(): Stats {
    return $.utils.getStruct(9, Stats, this);
  }
  _hasStats(): boolean {
    return !$.utils.isNull($.utils.getPointer(9, this));
  }
  _initStats(): Stats {
    return $.utils.initStructAt(9, Stats, this);
  }
  set stats(value: Stats) {
    $.utils.copyFrom(value, $.utils.getPointer(9, this));
  }
  _adoptReaderIndex(value: $.Orphan<ReaderIndex>): void {
    $.utils.adopt(value, $.utils.getPointer(10, this));
  }
  _disownReaderIndex(): $.Orphan<ReaderIndex> {
    return $.utils.disown(this.readerIndex);
  }
  /**
* readerIndex contains data needed for continuation of incomplete sparse reads with index readers
*
*/
  get readerIndex(): ReaderIndex {
    return $.utils.getStruct(10, ReaderIndex, this);
  }
  _hasReaderIndex(): boolean {
    return !$.utils.isNull($.utils.getPointer(10, this));
  }
  _initReaderIndex(): ReaderIndex {
    return $.utils.initStructAt(10, ReaderIndex, this);
  }
  set readerIndex(value: ReaderIndex) {
    $.utils.copyFrom(value, $.utils.getPointer(10, this));
  }
  _adoptDenseReader(value: $.Orphan<QueryReader>): void {
    $.utils.adopt(value, $.utils.getPointer(11, this));
  }
  _disownDenseReader(): $.Orphan<QueryReader> {
    return $.utils.disown(this.denseReader);
  }
  /**
* denseReader contains data needed for continuation of incomplete dense reads with dense reader
*
*/
  get denseReader(): QueryReader {
    return $.utils.getStruct(11, QueryReader, this);
  }
  _hasDenseReader(): boolean {
    return !$.utils.isNull($.utils.getPointer(11, this));
  }
  _initDenseReader(): QueryReader {
    return $.utils.initStructAt(11, QueryReader, this);
  }
  set denseReader(value: QueryReader) {
    $.utils.copyFrom(value, $.utils.getPointer(11, this));
  }
  _adoptDelete(value: $.Orphan<Delete>): void {
    $.utils.adopt(value, $.utils.getPointer(12, this));
  }
  _disownDelete(): $.Orphan<Delete> {
    return $.utils.disown(this.delete);
  }
  /**
* delete contains QueryCondition representing deletion expression
*
*/
  get delete(): Delete {
    return $.utils.getStruct(12, Delete, this);
  }
  _hasDelete(): boolean {
    return !$.utils.isNull($.utils.getPointer(12, this));
  }
  _initDelete(): Delete {
    return $.utils.initStructAt(12, Delete, this);
  }
  set delete(value: Delete) {
    $.utils.copyFrom(value, $.utils.getPointer(12, this));
  }
  _adoptWrittenFragmentInfo(value: $.Orphan<$.List<WrittenFragmentInfo>>): void {
    $.utils.adopt(value, $.utils.getPointer(13, this));
  }
  _disownWrittenFragmentInfo(): $.Orphan<$.List<WrittenFragmentInfo>> {
    return $.utils.disown(this.writtenFragmentInfo);
  }
  /**
* Needed in global order writes when WrittenFragmentInfo gets updated
* during finalize, but doesn't end up back on the client Query object
*
*/
  get writtenFragmentInfo(): $.List<WrittenFragmentInfo> {
    return $.utils.getList(13, Query._WrittenFragmentInfo, this);
  }
  _hasWrittenFragmentInfo(): boolean {
    return !$.utils.isNull($.utils.getPointer(13, this));
  }
  _initWrittenFragmentInfo(length: number): $.List<WrittenFragmentInfo> {
    return $.utils.initList(13, Query._WrittenFragmentInfo, length, this);
  }
  set writtenFragmentInfo(value: $.List<WrittenFragmentInfo>) {
    $.utils.copyFrom(value, $.utils.getPointer(13, this));
  }
  _adoptWrittenBuffers(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(14, this));
  }
  _disownWrittenBuffers(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.writtenBuffers);
  }
  /**
* written buffers for partial attribute writes
*
*/
  get writtenBuffers(): $.List<string> {
    return $.utils.getList(14, $.TextList, this);
  }
  _hasWrittenBuffers(): boolean {
    return !$.utils.isNull($.utils.getPointer(14, this));
  }
  _initWrittenBuffers(length: number): $.List<string> {
    return $.utils.initList(14, $.TextList, length, this);
  }
  set writtenBuffers(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(14, this));
  }
  _adoptOrderedDimLabelReader(value: $.Orphan<QueryReader>): void {
    $.utils.adopt(value, $.utils.getPointer(15, this));
  }
  _disownOrderedDimLabelReader(): $.Orphan<QueryReader> {
    return $.utils.disown(this.orderedDimLabelReader);
  }
  /**
* orderedDimLabelReader contains data needed for dense dimension label reads.
*
*/
  get orderedDimLabelReader(): QueryReader {
    return $.utils.getStruct(15, QueryReader, this);
  }
  _hasOrderedDimLabelReader(): boolean {
    return !$.utils.isNull($.utils.getPointer(15, this));
  }
  _initOrderedDimLabelReader(): QueryReader {
    return $.utils.initStructAt(15, QueryReader, this);
  }
  set orderedDimLabelReader(value: QueryReader) {
    $.utils.copyFrom(value, $.utils.getPointer(15, this));
  }
  _adoptChannels(value: $.Orphan<$.List<QueryChannel>>): void {
    $.utils.adopt(value, $.utils.getPointer(16, this));
  }
  _disownChannels(): $.Orphan<$.List<QueryChannel>> {
    return $.utils.disown(this.channels);
  }
  /**
* channels contains the list of channels (streams of data) within a read
* query. It always contains at least one element, the default channel.
*
*/
  get channels(): $.List<QueryChannel> {
    return $.utils.getList(16, Query._Channels, this);
  }
  _hasChannels(): boolean {
    return !$.utils.isNull($.utils.getPointer(16, this));
  }
  _initChannels(length: number): $.List<QueryChannel> {
    return $.utils.initList(16, Query._Channels, length, this);
  }
  set channels(value: $.List<QueryChannel>) {
    $.utils.copyFrom(value, $.utils.getPointer(16, this));
  }
  toString(): string { return "Query_" + super.toString(); }
}
/**
* object representing a non-empty domain
*
*/
export class NonEmptyDomain extends $.Struct {
  static readonly _capnp = {
    displayName: "NonEmptyDomain",
    id: "9df6f2a42c4e5f0b",
    size: new $.ObjectSize(8, 2),
  };
  _adoptNonEmptyDomain(value: $.Orphan<DomainArray>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownNonEmptyDomain(): $.Orphan<DomainArray> {
    return $.utils.disown(this.nonEmptyDomain);
  }
  /**
* Non-empty domain of array
*
*/
  get nonEmptyDomain(): DomainArray {
    return $.utils.getStruct(0, DomainArray, this);
  }
  _hasNonEmptyDomain(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initNonEmptyDomain(): DomainArray {
    return $.utils.initStructAt(0, DomainArray, this);
  }
  set nonEmptyDomain(value: DomainArray) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  /**
* Is non-empty domain really empty?
*
*/
  get isEmpty(): boolean {
    return $.utils.getBit(0, this);
  }
  set isEmpty(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  _adoptSizes(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownSizes(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.sizes);
  }
  /**
* Number of elements in DomainArray for var length
*
*/
  get sizes(): $.List<bigint> {
    return $.utils.getList(1, $.Uint64List, this);
  }
  _hasSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initSizes(length: number): $.List<bigint> {
    return $.utils.initList(1, $.Uint64List, length, this);
  }
  set sizes(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "NonEmptyDomain_" + super.toString(); }
}
/**
* object representing non-empty domain for heterogeneous or string dimensions
*
*/
export class NonEmptyDomainList extends $.Struct {
  static readonly _capnp = {
    displayName: "NonEmptyDomainList",
    id: "a18264549448ece3",
    size: new $.ObjectSize(0, 1),
  };
  static _NonEmptyDomains: $.ListCtor<NonEmptyDomain>;
  _adoptNonEmptyDomains(value: $.Orphan<$.List<NonEmptyDomain>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownNonEmptyDomains(): $.Orphan<$.List<NonEmptyDomain>> {
    return $.utils.disown(this.nonEmptyDomains);
  }
  get nonEmptyDomains(): $.List<NonEmptyDomain> {
    return $.utils.getList(0, NonEmptyDomainList._NonEmptyDomains, this);
  }
  _hasNonEmptyDomains(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initNonEmptyDomains(length: number): $.List<NonEmptyDomain> {
    return $.utils.initList(0, NonEmptyDomainList._NonEmptyDomains, length, this);
  }
  set nonEmptyDomains(value: $.List<NonEmptyDomain>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "NonEmptyDomainList_" + super.toString(); }
}
/**
* object representing a buffer size of an attribute
*
*/
export class AttributeBufferSize extends $.Struct {
  static readonly _capnp = {
    displayName: "AttributeBufferSize",
    id: "9be1921b07e6cd2d",
    size: new $.ObjectSize(24, 1),
  };
  /**
* name of attribute
*
*/
  get attribute(): string {
    return $.utils.getText(0, this);
  }
  set attribute(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* size (in bytes) of offset buffer
*
*/
  get offsetBytes(): bigint {
    return $.utils.getUint64(0, this);
  }
  set offsetBytes(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* size (in bytes) of data buffer
*
*/
  get dataBytes(): bigint {
    return $.utils.getUint64(8, this);
  }
  set dataBytes(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
* size (in bytes) of data buffer
*
*/
  get validityBytes(): bigint {
    return $.utils.getUint64(16, this);
  }
  set validityBytes(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  toString(): string { return "AttributeBufferSize_" + super.toString(); }
}
export class ArrayMetadata_MetadataEntry extends $.Struct {
  static readonly _capnp = {
    displayName: "MetadataEntry",
    id: "926fe1c3b12ed651",
    size: new $.ObjectSize(8, 3),
  };
  get key(): string {
    return $.utils.getText(0, this);
  }
  set key(value: string) {
    $.utils.setText(0, value, this);
  }
  get type(): string {
    return $.utils.getText(1, this);
  }
  set type(value: string) {
    $.utils.setText(1, value, this);
  }
  get valueNum(): number {
    return $.utils.getUint32(0, this);
  }
  set valueNum(value: number) {
    $.utils.setUint32(0, value, this);
  }
  _adoptValue(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownValue(): $.Orphan<$.Data> {
    return $.utils.disown(this.value);
  }
  get value(): $.Data {
    return $.utils.getData(2, this);
  }
  _hasValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initValue(length: number): $.Data {
    return $.utils.initData(2, length, this);
  }
  set value(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  get del(): boolean {
    return $.utils.getBit(32, this);
  }
  set del(value: boolean) {
    $.utils.setBit(32, value, this);
  }
  toString(): string { return "ArrayMetadata_MetadataEntry_" + super.toString(); }
}
/**
* object representing array metadata
*
*/
export class ArrayMetadata extends $.Struct {
  static readonly MetadataEntry = ArrayMetadata_MetadataEntry;
  static readonly _capnp = {
    displayName: "ArrayMetadata",
    id: "9737dcafdfce31bb",
    size: new $.ObjectSize(0, 1),
  };
  static _Entries: $.ListCtor<ArrayMetadata_MetadataEntry>;
  _adoptEntries(value: $.Orphan<$.List<ArrayMetadata_MetadataEntry>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEntries(): $.Orphan<$.List<ArrayMetadata_MetadataEntry>> {
    return $.utils.disown(this.entries);
  }
  /**
* list of metadata values
*
*/
  get entries(): $.List<ArrayMetadata_MetadataEntry> {
    return $.utils.getList(0, ArrayMetadata._Entries, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEntries(length: number): $.List<ArrayMetadata_MetadataEntry> {
    return $.utils.initList(0, ArrayMetadata._Entries, length, this);
  }
  set entries(value: $.List<ArrayMetadata_MetadataEntry>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "ArrayMetadata_" + super.toString(); }
}
export class ArrayDirectory_TimestampedURI extends $.Struct {
  static readonly _capnp = {
    displayName: "TimestampedURI",
    id: "d9d27c082dec9e26",
    size: new $.ObjectSize(16, 1),
  };
  get uri(): string {
    return $.utils.getText(0, this);
  }
  set uri(value: string) {
    $.utils.setText(0, value, this);
  }
  get timestampStart(): bigint {
    return $.utils.getUint64(0, this);
  }
  set timestampStart(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  get timestampEnd(): bigint {
    return $.utils.getUint64(8, this);
  }
  set timestampEnd(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  toString(): string { return "ArrayDirectory_TimestampedURI_" + super.toString(); }
}
export class ArrayDirectory_DeleteAndUpdateTileLocation extends $.Struct {
  static readonly _capnp = {
    displayName: "DeleteAndUpdateTileLocation",
    id: "9eb745af522d087c",
    size: new $.ObjectSize(8, 2),
  };
  get uri(): string {
    return $.utils.getText(0, this);
  }
  set uri(value: string) {
    $.utils.setText(0, value, this);
  }
  get conditionMarker(): string {
    return $.utils.getText(1, this);
  }
  set conditionMarker(value: string) {
    $.utils.setText(1, value, this);
  }
  get offset(): bigint {
    return $.utils.getUint64(0, this);
  }
  set offset(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  toString(): string { return "ArrayDirectory_DeleteAndUpdateTileLocation_" + super.toString(); }
}
/**
* object representing an array directory
*
*/
export class ArrayDirectory extends $.Struct {
  static readonly TimestampedURI = ArrayDirectory_TimestampedURI;
  static readonly DeleteAndUpdateTileLocation = ArrayDirectory_DeleteAndUpdateTileLocation;
  static readonly _capnp = {
    displayName: "ArrayDirectory",
    id: "9317f20ce509d918",
    size: new $.ObjectSize(16, 12),
  };
  static _ArrayMetaUris: $.ListCtor<ArrayDirectory_TimestampedURI>;
  static _DeleteAndUpdateTileLocation: $.ListCtor<ArrayDirectory_DeleteAndUpdateTileLocation>;
  _adoptUnfilteredFragmentUris(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownUnfilteredFragmentUris(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.unfilteredFragmentUris);
  }
  /**
* fragment URIs
*
*/
  get unfilteredFragmentUris(): $.List<string> {
    return $.utils.getList(0, $.TextList, this);
  }
  _hasUnfilteredFragmentUris(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initUnfilteredFragmentUris(length: number): $.List<string> {
    return $.utils.initList(0, $.TextList, length, this);
  }
  set unfilteredFragmentUris(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptConsolidatedCommitUris(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownConsolidatedCommitUris(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.consolidatedCommitUris);
  }
  /**
* consolidated commit URI set
*
*/
  get consolidatedCommitUris(): $.List<string> {
    return $.utils.getList(1, $.TextList, this);
  }
  _hasConsolidatedCommitUris(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initConsolidatedCommitUris(length: number): $.List<string> {
    return $.utils.initList(1, $.TextList, length, this);
  }
  set consolidatedCommitUris(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptArraySchemaUris(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownArraySchemaUris(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.arraySchemaUris);
  }
  /**
* URIs of all the array schema files
*
*/
  get arraySchemaUris(): $.List<string> {
    return $.utils.getList(2, $.TextList, this);
  }
  _hasArraySchemaUris(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initArraySchemaUris(length: number): $.List<string> {
    return $.utils.initList(2, $.TextList, length, this);
  }
  set arraySchemaUris(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  /**
* latest array schema URI.
*
*/
  get latestArraySchemaUri(): string {
    return $.utils.getText(3, this);
  }
  set latestArraySchemaUri(value: string) {
    $.utils.setText(3, value, this);
  }
  _adoptArrayMetaUrisToVacuum(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownArrayMetaUrisToVacuum(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.arrayMetaUrisToVacuum);
  }
  /**
* the array metadata files to vacuum
*
*/
  get arrayMetaUrisToVacuum(): $.List<string> {
    return $.utils.getList(4, $.TextList, this);
  }
  _hasArrayMetaUrisToVacuum(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initArrayMetaUrisToVacuum(length: number): $.List<string> {
    return $.utils.initList(4, $.TextList, length, this);
  }
  set arrayMetaUrisToVacuum(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptArrayMetaVacUrisToVacuum(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownArrayMetaVacUrisToVacuum(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.arrayMetaVacUrisToVacuum);
  }
  /**
* the array metadata vac files to vacuum
*
*/
  get arrayMetaVacUrisToVacuum(): $.List<string> {
    return $.utils.getList(5, $.TextList, this);
  }
  _hasArrayMetaVacUrisToVacuum(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initArrayMetaVacUrisToVacuum(length: number): $.List<string> {
    return $.utils.initList(5, $.TextList, length, this);
  }
  set arrayMetaVacUrisToVacuum(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptCommitUrisToConsolidate(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownCommitUrisToConsolidate(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.commitUrisToConsolidate);
  }
  /**
* the commit files to consolidate
*
*/
  get commitUrisToConsolidate(): $.List<string> {
    return $.utils.getList(6, $.TextList, this);
  }
  _hasCommitUrisToConsolidate(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initCommitUrisToConsolidate(length: number): $.List<string> {
    return $.utils.initList(6, $.TextList, length, this);
  }
  set commitUrisToConsolidate(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptCommitUrisToVacuum(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownCommitUrisToVacuum(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.commitUrisToVacuum);
  }
  /**
* the commit files to vacuum
*
*/
  get commitUrisToVacuum(): $.List<string> {
    return $.utils.getList(7, $.TextList, this);
  }
  _hasCommitUrisToVacuum(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initCommitUrisToVacuum(length: number): $.List<string> {
    return $.utils.initList(7, $.TextList, length, this);
  }
  set commitUrisToVacuum(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  _adoptConsolidatedCommitUrisToVacuum(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownConsolidatedCommitUrisToVacuum(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.consolidatedCommitUrisToVacuum);
  }
  /**
* the consolidated commit files to vacuum
*
*/
  get consolidatedCommitUrisToVacuum(): $.List<string> {
    return $.utils.getList(8, $.TextList, this);
  }
  _hasConsolidatedCommitUrisToVacuum(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initConsolidatedCommitUrisToVacuum(length: number): $.List<string> {
    return $.utils.initList(8, $.TextList, length, this);
  }
  set consolidatedCommitUrisToVacuum(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  _adoptArrayMetaUris(value: $.Orphan<$.List<ArrayDirectory_TimestampedURI>>): void {
    $.utils.adopt(value, $.utils.getPointer(9, this));
  }
  _disownArrayMetaUris(): $.Orphan<$.List<ArrayDirectory_TimestampedURI>> {
    return $.utils.disown(this.arrayMetaUris);
  }
  /**
* the timestamped filtered array metadata URIs, after removing
* the ones that need to be vacuumed and those that do not fall within
* [timestamp_start, timestamp_end]
*
*/
  get arrayMetaUris(): $.List<ArrayDirectory_TimestampedURI> {
    return $.utils.getList(9, ArrayDirectory._ArrayMetaUris, this);
  }
  _hasArrayMetaUris(): boolean {
    return !$.utils.isNull($.utils.getPointer(9, this));
  }
  _initArrayMetaUris(length: number): $.List<ArrayDirectory_TimestampedURI> {
    return $.utils.initList(9, ArrayDirectory._ArrayMetaUris, length, this);
  }
  set arrayMetaUris(value: $.List<ArrayDirectory_TimestampedURI>) {
    $.utils.copyFrom(value, $.utils.getPointer(9, this));
  }
  _adoptFragmentMetaUris(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(10, this));
  }
  _disownFragmentMetaUris(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.fragmentMetaUris);
  }
  /**
* the URIs of the consolidated fragment metadata files
*
*/
  get fragmentMetaUris(): $.List<string> {
    return $.utils.getList(10, $.TextList, this);
  }
  _hasFragmentMetaUris(): boolean {
    return !$.utils.isNull($.utils.getPointer(10, this));
  }
  _initFragmentMetaUris(length: number): $.List<string> {
    return $.utils.initList(10, $.TextList, length, this);
  }
  set fragmentMetaUris(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(10, this));
  }
  _adoptDeleteAndUpdateTileLocation(value: $.Orphan<$.List<ArrayDirectory_DeleteAndUpdateTileLocation>>): void {
    $.utils.adopt(value, $.utils.getPointer(11, this));
  }
  _disownDeleteAndUpdateTileLocation(): $.Orphan<$.List<ArrayDirectory_DeleteAndUpdateTileLocation>> {
    return $.utils.disown(this.deleteAndUpdateTileLocation);
  }
  /**
* the location of delete tiles
*
*/
  get deleteAndUpdateTileLocation(): $.List<ArrayDirectory_DeleteAndUpdateTileLocation> {
    return $.utils.getList(11, ArrayDirectory._DeleteAndUpdateTileLocation, this);
  }
  _hasDeleteAndUpdateTileLocation(): boolean {
    return !$.utils.isNull($.utils.getPointer(11, this));
  }
  _initDeleteAndUpdateTileLocation(length: number): $.List<ArrayDirectory_DeleteAndUpdateTileLocation> {
    return $.utils.initList(11, ArrayDirectory._DeleteAndUpdateTileLocation, length, this);
  }
  set deleteAndUpdateTileLocation(value: $.List<ArrayDirectory_DeleteAndUpdateTileLocation>) {
    $.utils.copyFrom(value, $.utils.getPointer(11, this));
  }
  /**
* Only the files created after timestamp_start are listed
*
*/
  get timestampStart(): bigint {
    return $.utils.getUint64(0, this);
  }
  set timestampStart(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* Only the files created before timestamp_end are listed
*
*/
  get timestampEnd(): bigint {
    return $.utils.getUint64(8, this);
  }
  set timestampEnd(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  toString(): string { return "ArrayDirectory_" + super.toString(); }
}
/**
* Result size
*
*/
export class EstimatedResultSize_ResultSize extends $.Struct {
  static readonly _capnp = {
    displayName: "ResultSize",
    id: "92c8467685565269",
    size: new $.ObjectSize(24, 0),
  };
  get sizeFixed(): number {
    return $.utils.getFloat64(0, this);
  }
  set sizeFixed(value: number) {
    $.utils.setFloat64(0, value, this);
  }
  get sizeVar(): number {
    return $.utils.getFloat64(8, this);
  }
  set sizeVar(value: number) {
    $.utils.setFloat64(8, value, this);
  }
  get sizeValidity(): number {
    return $.utils.getFloat64(16, this);
  }
  set sizeValidity(value: number) {
    $.utils.setFloat64(16, value, this);
  }
  toString(): string { return "EstimatedResultSize_ResultSize_" + super.toString(); }
}
/**
* Memory Size
*
*/
export class EstimatedResultSize_MemorySize extends $.Struct {
  static readonly _capnp = {
    displayName: "MemorySize",
    id: "bda7916926591c22",
    size: new $.ObjectSize(24, 0),
  };
  get sizeFixed(): bigint {
    return $.utils.getUint64(0, this);
  }
  set sizeFixed(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  get sizeVar(): bigint {
    return $.utils.getUint64(8, this);
  }
  set sizeVar(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  get sizeValidity(): bigint {
    return $.utils.getUint64(16, this);
  }
  set sizeValidity(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  toString(): string { return "EstimatedResultSize_MemorySize_" + super.toString(); }
}
/**
* object representing estimated
*
*/
export class EstimatedResultSize extends $.Struct {
  static readonly ResultSize = EstimatedResultSize_ResultSize;
  static readonly MemorySize = EstimatedResultSize_MemorySize;
  static readonly _capnp = {
    displayName: "EstimatedResultSize",
    id: "8cd4e323f1feea3b",
    size: new $.ObjectSize(0, 2),
  };
  _adoptResultSizes(value: $.Orphan<Map>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownResultSizes(): $.Orphan<Map> {
    return $.utils.disown(this.resultSizes);
  }
  get resultSizes(): Map {
    return $.utils.getStruct(0, Map, this);
  }
  _hasResultSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initResultSizes(): Map {
    return $.utils.initStructAt(0, Map, this);
  }
  set resultSizes(value: Map) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptMemorySizes(value: $.Orphan<Map>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownMemorySizes(): $.Orphan<Map> {
    return $.utils.disown(this.memorySizes);
  }
  get memorySizes(): Map {
    return $.utils.getStruct(1, Map, this);
  }
  _hasMemorySizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initMemorySizes(): Map {
    return $.utils.initStructAt(1, Map, this);
  }
  set memorySizes(value: Map) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "EstimatedResultSize_" + super.toString(); }
}
export class FragmentInfoRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "FragmentInfoRequest",
    id: "c95970eb9310dc9c",
    size: new $.ObjectSize(0, 1),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "FragmentInfoRequest_" + super.toString(); }
}
export class SingleFragmentInfo extends $.Struct {
  static readonly _capnp = {
    displayName: "SingleFragmentInfo",
    id: "d42e7b38b33e3d29",
    size: new $.ObjectSize(8, 2),
  };
  /**
* array schema name
*
*/
  get arraySchemaName(): string {
    return $.utils.getText(0, this);
  }
  set arraySchemaName(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptMeta(value: $.Orphan<FragmentMetadata>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownMeta(): $.Orphan<FragmentMetadata> {
    return $.utils.disown(this.meta);
  }
  /**
* fragment metadata
*
*/
  get meta(): FragmentMetadata {
    return $.utils.getStruct(1, FragmentMetadata, this);
  }
  _hasMeta(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initMeta(): FragmentMetadata {
    return $.utils.initStructAt(1, FragmentMetadata, this);
  }
  set meta(value: FragmentMetadata) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  /**
* the size of the entire fragment directory
*
*/
  get fragmentSize(): bigint {
    return $.utils.getUint64(0, this);
  }
  set fragmentSize(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  toString(): string { return "SingleFragmentInfo_" + super.toString(); }
}
export class FragmentInfo extends $.Struct {
  static readonly _capnp = {
    displayName: "FragmentInfo",
    id: "a000530ab1d17816",
    size: new $.ObjectSize(0, 4),
  };
  static _FragmentInfo: $.ListCtor<SingleFragmentInfo>;
  _adoptArraySchemaLatest(value: $.Orphan<ArraySchema>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownArraySchemaLatest(): $.Orphan<ArraySchema> {
    return $.utils.disown(this.arraySchemaLatest);
  }
  /**
* latest array schema
*
*/
  get arraySchemaLatest(): ArraySchema {
    return $.utils.getStruct(0, ArraySchema, this);
  }
  _hasArraySchemaLatest(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initArraySchemaLatest(): ArraySchema {
    return $.utils.initStructAt(0, ArraySchema, this);
  }
  set arraySchemaLatest(value: ArraySchema) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptArraySchemasAll(value: $.Orphan<Map>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownArraySchemasAll(): $.Orphan<Map> {
    return $.utils.disown(this.arraySchemasAll);
  }
  /**
* map of all array schemas
*
*/
  get arraySchemasAll(): Map {
    return $.utils.getStruct(1, Map, this);
  }
  _hasArraySchemasAll(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initArraySchemasAll(): Map {
    return $.utils.initStructAt(1, Map, this);
  }
  set arraySchemasAll(value: Map) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptFragmentInfo(value: $.Orphan<$.List<SingleFragmentInfo>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownFragmentInfo(): $.Orphan<$.List<SingleFragmentInfo>> {
    return $.utils.disown(this.fragmentInfo);
  }
  /**
* information about fragments in the array
*
*/
  get fragmentInfo(): $.List<SingleFragmentInfo> {
    return $.utils.getList(2, FragmentInfo._FragmentInfo, this);
  }
  _hasFragmentInfo(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initFragmentInfo(length: number): $.List<SingleFragmentInfo> {
    return $.utils.initList(2, FragmentInfo._FragmentInfo, length, this);
  }
  set fragmentInfo(value: $.List<SingleFragmentInfo>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptToVacuum(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownToVacuum(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.toVacuum);
  }
  /**
* the URIs of the fragments to vacuum
*
*/
  get toVacuum(): $.List<string> {
    return $.utils.getList(3, $.TextList, this);
  }
  _hasToVacuum(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initToVacuum(length: number): $.List<string> {
    return $.utils.initList(3, $.TextList, length, this);
  }
  set toVacuum(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  toString(): string { return "FragmentInfo_" + super.toString(); }
}
export class GroupMetadata extends $.Struct {
  static readonly _capnp = {
    displayName: "GroupMetadata",
    id: "838188de0fd57580",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptMetadata(value: $.Orphan<ArrayMetadata>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownMetadata(): $.Orphan<ArrayMetadata> {
    return $.utils.disown(this.metadata);
  }
  /**
* metadata attached to group
*
*/
  get metadata(): ArrayMetadata {
    return $.utils.getStruct(1, ArrayMetadata, this);
  }
  _hasMetadata(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initMetadata(): ArrayMetadata {
    return $.utils.initStructAt(1, ArrayMetadata, this);
  }
  set metadata(value: ArrayMetadata) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "GroupMetadata_" + super.toString(); }
}
export class GroupMember extends $.Struct {
  static readonly _capnp = {
    displayName: "GroupMember",
    id: "c41bcc7e8cc58f18",
    size: new $.ObjectSize(8, 3),
  };
  /**
* URI of group Member
*
*/
  get uri(): string {
    return $.utils.getText(0, this);
  }
  set uri(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* type of Member, group or array
*
*/
  get type(): string {
    return $.utils.getText(1, this);
  }
  set type(value: string) {
    $.utils.setText(1, value, this);
  }
  /**
* is member URI relative to group
*
*/
  get relative(): boolean {
    return $.utils.getBit(0, this);
  }
  set relative(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  /**
* name of member, optional
*
*/
  get name(): string {
    return $.utils.getText(2, this);
  }
  set name(value: string) {
    $.utils.setText(2, value, this);
  }
  toString(): string { return "GroupMember_" + super.toString(); }
}
export class Group_GroupDetails extends $.Struct {
  static readonly _capnp = {
    displayName: "GroupDetails",
    id: "a2ea10c715b475c1",
    size: new $.ObjectSize(0, 2),
  };
  static _Members: $.ListCtor<GroupMember>;
  _adoptMembers(value: $.Orphan<$.List<GroupMember>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownMembers(): $.Orphan<$.List<GroupMember>> {
    return $.utils.disown(this.members);
  }
  /**
* list of Members in group
*
*/
  get members(): $.List<GroupMember> {
    return $.utils.getList(0, Group_GroupDetails._Members, this);
  }
  _hasMembers(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initMembers(length: number): $.List<GroupMember> {
    return $.utils.initList(0, Group_GroupDetails._Members, length, this);
  }
  set members(value: $.List<GroupMember>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptMetadata(value: $.Orphan<ArrayMetadata>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownMetadata(): $.Orphan<ArrayMetadata> {
    return $.utils.disown(this.metadata);
  }
  /**
* metadata attached to group
*
*/
  get metadata(): ArrayMetadata {
    return $.utils.getStruct(1, ArrayMetadata, this);
  }
  _hasMetadata(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initMetadata(): ArrayMetadata {
    return $.utils.initStructAt(1, ArrayMetadata, this);
  }
  set metadata(value: ArrayMetadata) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "Group_GroupDetails_" + super.toString(); }
}
/**
* Group
*
*/
export class Group extends $.Struct {
  static readonly GroupDetails = Group_GroupDetails;
  static readonly _capnp = {
    displayName: "Group",
    id: "dcdd20e1b79e915a",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptGroup(value: $.Orphan<Group_GroupDetails>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownGroup(): $.Orphan<Group_GroupDetails> {
    return $.utils.disown(this.group);
  }
  get group(): Group_GroupDetails {
    return $.utils.getStruct(1, Group_GroupDetails, this);
  }
  _hasGroup(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initGroup(): Group_GroupDetails {
    return $.utils.initStructAt(1, Group_GroupDetails, this);
  }
  set group(value: Group_GroupDetails) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "Group_" + super.toString(); }
}
export class GroupUpdate_GroupUpdateDetails extends $.Struct {
  static readonly _capnp = {
    displayName: "GroupUpdateDetails",
    id: "83b01e46759bde40",
    size: new $.ObjectSize(0, 2),
  };
  static _MembersToAdd: $.ListCtor<GroupMember>;
  _adoptMembersToRemove(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownMembersToRemove(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.membersToRemove);
  }
  /**
* members to remove
*
*/
  get membersToRemove(): $.List<string> {
    return $.utils.getList(0, $.TextList, this);
  }
  _hasMembersToRemove(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initMembersToRemove(length: number): $.List<string> {
    return $.utils.initList(0, $.TextList, length, this);
  }
  set membersToRemove(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptMembersToAdd(value: $.Orphan<$.List<GroupMember>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownMembersToAdd(): $.Orphan<$.List<GroupMember>> {
    return $.utils.disown(this.membersToAdd);
  }
  /**
* members to add
*
*/
  get membersToAdd(): $.List<GroupMember> {
    return $.utils.getList(1, GroupUpdate_GroupUpdateDetails._MembersToAdd, this);
  }
  _hasMembersToAdd(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initMembersToAdd(length: number): $.List<GroupMember> {
    return $.utils.initList(1, GroupUpdate_GroupUpdateDetails._MembersToAdd, length, this);
  }
  set membersToAdd(value: $.List<GroupMember>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "GroupUpdate_GroupUpdateDetails_" + super.toString(); }
}
export class GroupUpdate extends $.Struct {
  static readonly GroupUpdateDetails = GroupUpdate_GroupUpdateDetails;
  static readonly _capnp = {
    displayName: "GroupUpdate",
    id: "c4e54a63294eddb7",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptGroupUpdate(value: $.Orphan<GroupUpdate_GroupUpdateDetails>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownGroupUpdate(): $.Orphan<GroupUpdate_GroupUpdateDetails> {
    return $.utils.disown(this.groupUpdate);
  }
  /**
* group update details
*
*/
  get groupUpdate(): GroupUpdate_GroupUpdateDetails {
    return $.utils.getStruct(1, GroupUpdate_GroupUpdateDetails, this);
  }
  _hasGroupUpdate(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initGroupUpdate(): GroupUpdate_GroupUpdateDetails {
    return $.utils.initStructAt(1, GroupUpdate_GroupUpdateDetails, this);
  }
  set groupUpdate(value: GroupUpdate_GroupUpdateDetails) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "GroupUpdate_" + super.toString(); }
}
/**
* details of a group
*
*/
export class GroupCreate_GroupCreateDetails extends $.Struct {
  static readonly _capnp = {
    displayName: "GroupCreateDetails",
    id: "d5fd459ad75e86a9",
    size: new $.ObjectSize(0, 1),
  };
  /**
* URI where group should be created
*
*/
  get uri(): string {
    return $.utils.getText(0, this);
  }
  set uri(value: string) {
    $.utils.setText(0, value, this);
  }
  toString(): string { return "GroupCreate_GroupCreateDetails_" + super.toString(); }
}
/**
* Create group details
*
*/
export class GroupCreate extends $.Struct {
  static readonly GroupCreateDetails = GroupCreate_GroupCreateDetails;
  static readonly _capnp = {
    displayName: "GroupCreate",
    id: "fb7f36ad4d8ffe84",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptGroupDetails(value: $.Orphan<GroupCreate_GroupCreateDetails>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownGroupDetails(): $.Orphan<GroupCreate_GroupCreateDetails> {
    return $.utils.disown(this.groupDetails);
  }
  get groupDetails(): GroupCreate_GroupCreateDetails {
    return $.utils.getStruct(1, GroupCreate_GroupCreateDetails, this);
  }
  _hasGroupDetails(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initGroupDetails(): GroupCreate_GroupCreateDetails {
    return $.utils.initStructAt(1, GroupCreate_GroupCreateDetails, this);
  }
  set groupDetails(value: GroupCreate_GroupCreateDetails) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "GroupCreate_" + super.toString(); }
}
export class GlobalWriteState extends $.Struct {
  static readonly _capnp = {
    displayName: "GlobalWriteState",
    id: "c0c730b5390f4427",
    size: new $.ObjectSize(8, 4),
  };
  _adoptCellsWritten(value: $.Orphan<MapUInt64>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownCellsWritten(): $.Orphan<MapUInt64> {
    return $.utils.disown(this.cellsWritten);
  }
  /**
* number of cells written for each attribute/dimension
*
*/
  get cellsWritten(): MapUInt64 {
    return $.utils.getStruct(0, MapUInt64, this);
  }
  _hasCellsWritten(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initCellsWritten(): MapUInt64 {
    return $.utils.initStructAt(0, MapUInt64, this);
  }
  set cellsWritten(value: MapUInt64) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptFragMeta(value: $.Orphan<FragmentMetadata>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownFragMeta(): $.Orphan<FragmentMetadata> {
    return $.utils.disown(this.fragMeta);
  }
  /**
* metadata of the global write fragment
*
*/
  get fragMeta(): FragmentMetadata {
    return $.utils.getStruct(1, FragmentMetadata, this);
  }
  _hasFragMeta(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initFragMeta(): FragmentMetadata {
    return $.utils.initStructAt(1, FragmentMetadata, this);
  }
  set fragMeta(value: FragmentMetadata) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptLastCellCoords(value: $.Orphan<SingleCoord>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownLastCellCoords(): $.Orphan<SingleCoord> {
    return $.utils.disown(this.lastCellCoords);
  }
  /**
* the last cell written;
*
*/
  get lastCellCoords(): SingleCoord {
    return $.utils.getStruct(2, SingleCoord, this);
  }
  _hasLastCellCoords(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initLastCellCoords(): SingleCoord {
    return $.utils.initStructAt(2, SingleCoord, this);
  }
  set lastCellCoords(value: SingleCoord) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  /**
* last hilbert value written
*
*/
  get lastHilbertValue(): bigint {
    return $.utils.getUint64(0, this);
  }
  set lastHilbertValue(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  _adoptMultiPartUploadStates(value: $.Orphan<Map>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownMultiPartUploadStates(): $.Orphan<Map> {
    return $.utils.disown(this.multiPartUploadStates);
  }
  /**
* A mapping of URIs to multipart upload states
* Each file involved in a remote global order write (attr files,
* offsets files, etc) is partially written as a multipart upload part
* with each partial global order write operation (submit,
* submit_and_finalize). This mapping makes the multipart upload info
* available between partile global order write operations on the cloud side.
*
*/
  get multiPartUploadStates(): Map {
    return $.utils.getStruct(3, Map, this);
  }
  _hasMultiPartUploadStates(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initMultiPartUploadStates(): Map {
    return $.utils.initStructAt(3, Map, this);
  }
  set multiPartUploadStates(value: Map) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  toString(): string { return "GlobalWriteState_" + super.toString(); }
}
export class SingleCoord extends $.Struct {
  static readonly _capnp = {
    displayName: "SingleCoord",
    id: "d8bd3c0dec37b773",
    size: new $.ObjectSize(0, 3),
  };
  static _Coords: $.ListCtor<$.List<number>>;
  _adoptCoords(value: $.Orphan<$.List<$.List<number>>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownCoords(): $.Orphan<$.List<$.List<number>>> {
    return $.utils.disown(this.coords);
  }
  /**
* coordinate data per dimension
*
*/
  get coords(): $.List<$.List<number>> {
    return $.utils.getList(0, SingleCoord._Coords, this);
  }
  _hasCoords(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initCoords(length: number): $.List<$.List<number>> {
    return $.utils.initList(0, SingleCoord._Coords, length, this);
  }
  set coords(value: $.List<$.List<number>>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptSizes(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownSizes(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.sizes);
  }
  /**
* sizes of data per dimension
*
*/
  get sizes(): $.List<bigint> {
    return $.utils.getList(1, $.Uint64List, this);
  }
  _hasSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initSizes(length: number): $.List<bigint> {
    return $.utils.initList(1, $.Uint64List, length, this);
  }
  set sizes(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptSingleOffset(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownSingleOffset(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.singleOffset);
  }
  /**
* offsets buffer for a var sized  attribute
*
*/
  get singleOffset(): $.List<bigint> {
    return $.utils.getList(2, $.Uint64List, this);
  }
  _hasSingleOffset(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initSingleOffset(length: number): $.List<bigint> {
    return $.utils.initList(2, $.Uint64List, length, this);
  }
  set singleOffset(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  toString(): string { return "SingleCoord_" + super.toString(); }
}
export class FragmentMetadata_GenericTileOffsets extends $.Struct {
  static readonly _capnp = {
    displayName: "GenericTileOffsets",
    id: "89aa8f4e88036b9e",
    size: new $.ObjectSize(24, 8),
  };
  /**
* RTree serialized as a blob
*
*/
  get rtree(): bigint {
    return $.utils.getUint64(0, this);
  }
  set rtree(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  _adoptTileOffsets(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownTileOffsets(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.tileOffsets);
  }
  /**
* tile offsets
*
*/
  get tileOffsets(): $.List<bigint> {
    return $.utils.getList(0, $.Uint64List, this);
  }
  _hasTileOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initTileOffsets(length: number): $.List<bigint> {
    return $.utils.initList(0, $.Uint64List, length, this);
  }
  set tileOffsets(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptTileVarOffsets(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTileVarOffsets(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.tileVarOffsets);
  }
  /**
* variable tile offsets
*
*/
  get tileVarOffsets(): $.List<bigint> {
    return $.utils.getList(1, $.Uint64List, this);
  }
  _hasTileVarOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTileVarOffsets(length: number): $.List<bigint> {
    return $.utils.initList(1, $.Uint64List, length, this);
  }
  set tileVarOffsets(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptTileVarSizes(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownTileVarSizes(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.tileVarSizes);
  }
  /**
* sizes of the uncompressed variable tiles offsets
*
*/
  get tileVarSizes(): $.List<bigint> {
    return $.utils.getList(2, $.Uint64List, this);
  }
  _hasTileVarSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initTileVarSizes(length: number): $.List<bigint> {
    return $.utils.initList(2, $.Uint64List, length, this);
  }
  set tileVarSizes(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptTileValidityOffsets(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownTileValidityOffsets(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.tileValidityOffsets);
  }
  /**
* tile validity offsets
*
*/
  get tileValidityOffsets(): $.List<bigint> {
    return $.utils.getList(3, $.Uint64List, this);
  }
  _hasTileValidityOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initTileValidityOffsets(length: number): $.List<bigint> {
    return $.utils.initList(3, $.Uint64List, length, this);
  }
  set tileValidityOffsets(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptTileMinOffsets(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTileMinOffsets(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.tileMinOffsets);
  }
  /**
* min tile offsets
*
*/
  get tileMinOffsets(): $.List<bigint> {
    return $.utils.getList(4, $.Uint64List, this);
  }
  _hasTileMinOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTileMinOffsets(length: number): $.List<bigint> {
    return $.utils.initList(4, $.Uint64List, length, this);
  }
  set tileMinOffsets(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptTileMaxOffsets(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownTileMaxOffsets(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.tileMaxOffsets);
  }
  /**
* max tile offsets
*
*/
  get tileMaxOffsets(): $.List<bigint> {
    return $.utils.getList(5, $.Uint64List, this);
  }
  _hasTileMaxOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initTileMaxOffsets(length: number): $.List<bigint> {
    return $.utils.initList(5, $.Uint64List, length, this);
  }
  set tileMaxOffsets(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptTileSumOffsets(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownTileSumOffsets(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.tileSumOffsets);
  }
  /**
* tile sum offsets
*
*/
  get tileSumOffsets(): $.List<bigint> {
    return $.utils.getList(6, $.Uint64List, this);
  }
  _hasTileSumOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initTileSumOffsets(length: number): $.List<bigint> {
    return $.utils.initList(6, $.Uint64List, length, this);
  }
  set tileSumOffsets(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptTileNullCountOffsets(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownTileNullCountOffsets(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.tileNullCountOffsets);
  }
  /**
* null count offsets
*
*/
  get tileNullCountOffsets(): $.List<bigint> {
    return $.utils.getList(7, $.Uint64List, this);
  }
  _hasTileNullCountOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initTileNullCountOffsets(length: number): $.List<bigint> {
    return $.utils.initList(7, $.Uint64List, length, this);
  }
  set tileNullCountOffsets(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  /**
* fragment min/max/sum/nullcount offsets
*
*/
  get fragmentMinMaxSumNullCountOffset(): bigint {
    return $.utils.getUint64(8, this);
  }
  set fragmentMinMaxSumNullCountOffset(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
* processed conditions offsets
*
*/
  get processedConditionsOffsets(): bigint {
    return $.utils.getUint64(16, this);
  }
  set processedConditionsOffsets(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  toString(): string { return "FragmentMetadata_GenericTileOffsets_" + super.toString(); }
}
export class FragmentMetadata extends $.Struct {
  static readonly GenericTileOffsets = FragmentMetadata_GenericTileOffsets;
  static readonly _capnp = {
    displayName: "FragmentMetadata",
    id: "cde352fc27e7ca61",
    size: new $.ObjectSize(32, 23),
  };
  static _TileOffsets: $.ListCtor<$.List<bigint>>;
  static _TileVarOffsets: $.ListCtor<$.List<bigint>>;
  static _TileVarSizes: $.ListCtor<$.List<bigint>>;
  static _TileValidityOffsets: $.ListCtor<$.List<bigint>>;
  static _TileMinBuffer: $.ListCtor<$.List<number>>;
  static _TileMinVarBuffer: $.ListCtor<$.List<number>>;
  static _TileMaxBuffer: $.ListCtor<$.List<number>>;
  static _TileMaxVarBuffer: $.ListCtor<$.List<number>>;
  static _TileSums: $.ListCtor<$.List<number>>;
  static _TileNullCounts: $.ListCtor<$.List<bigint>>;
  static _FragmentMins: $.ListCtor<$.List<number>>;
  static _FragmentMaxs: $.ListCtor<$.List<number>>;
  _adoptFileSizes(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownFileSizes(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.fileSizes);
  }
  /**
* The size of each attribute file
*
*/
  get fileSizes(): $.List<bigint> {
    return $.utils.getList(0, $.Uint64List, this);
  }
  _hasFileSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initFileSizes(length: number): $.List<bigint> {
    return $.utils.initList(0, $.Uint64List, length, this);
  }
  set fileSizes(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptFileVarSizes(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownFileVarSizes(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.fileVarSizes);
  }
  /**
* The size of each var attribute file
*
*/
  get fileVarSizes(): $.List<bigint> {
    return $.utils.getList(1, $.Uint64List, this);
  }
  _hasFileVarSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initFileVarSizes(length: number): $.List<bigint> {
    return $.utils.initList(1, $.Uint64List, length, this);
  }
  set fileVarSizes(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptFileValiditySizes(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownFileValiditySizes(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.fileValiditySizes);
  }
  /**
* The size of each validity attribute file
*
*/
  get fileValiditySizes(): $.List<bigint> {
    return $.utils.getList(2, $.Uint64List, this);
  }
  _hasFileValiditySizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initFileValiditySizes(length: number): $.List<bigint> {
    return $.utils.initList(2, $.Uint64List, length, this);
  }
  set fileValiditySizes(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  /**
* The uri of the fragment this metadata belongs to
*
*/
  get fragmentUri(): string {
    return $.utils.getText(3, this);
  }
  set fragmentUri(value: string) {
    $.utils.setText(3, value, this);
  }
  /**
* True if the fragment has timestamps
*
*/
  get hasTimestamps(): boolean {
    return $.utils.getBit(0, this);
  }
  set hasTimestamps(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  /**
* True if the fragment has delete metadata
*
*/
  get hasDeleteMeta(): boolean {
    return $.utils.getBit(1, this);
  }
  set hasDeleteMeta(value: boolean) {
    $.utils.setBit(1, value, this);
  }
  /**
* The number of sparse tiles
*
*/
  get sparseTileNum(): bigint {
    return $.utils.getUint64(8, this);
  }
  set sparseTileNum(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
* Used to track the tile index base between global order writes
*
*/
  get tileIndexBase(): bigint {
    return $.utils.getUint64(16, this);
  }
  set tileIndexBase(value: bigint) {
    $.utils.setUint64(16, value, this);
  }
  _adoptTileOffsets(value: $.Orphan<$.List<$.List<bigint>>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownTileOffsets(): $.Orphan<$.List<$.List<bigint>>> {
    return $.utils.disown(this.tileOffsets);
  }
  /**
* Tile offsets in their attribute files
*
*/
  get tileOffsets(): $.List<$.List<bigint>> {
    return $.utils.getList(4, FragmentMetadata._TileOffsets, this);
  }
  _hasTileOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initTileOffsets(length: number): $.List<$.List<bigint>> {
    return $.utils.initList(4, FragmentMetadata._TileOffsets, length, this);
  }
  set tileOffsets(value: $.List<$.List<bigint>>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptTileVarOffsets(value: $.Orphan<$.List<$.List<bigint>>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownTileVarOffsets(): $.Orphan<$.List<$.List<bigint>>> {
    return $.utils.disown(this.tileVarOffsets);
  }
  /**
* Variable tile offsets in their attribute files
*
*/
  get tileVarOffsets(): $.List<$.List<bigint>> {
    return $.utils.getList(5, FragmentMetadata._TileVarOffsets, this);
  }
  _hasTileVarOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initTileVarOffsets(length: number): $.List<$.List<bigint>> {
    return $.utils.initList(5, FragmentMetadata._TileVarOffsets, length, this);
  }
  set tileVarOffsets(value: $.List<$.List<bigint>>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptTileVarSizes(value: $.Orphan<$.List<$.List<bigint>>>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownTileVarSizes(): $.Orphan<$.List<$.List<bigint>>> {
    return $.utils.disown(this.tileVarSizes);
  }
  /**
* The sizes of the uncompressed variable tiles
*
*/
  get tileVarSizes(): $.List<$.List<bigint>> {
    return $.utils.getList(6, FragmentMetadata._TileVarSizes, this);
  }
  _hasTileVarSizes(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initTileVarSizes(length: number): $.List<$.List<bigint>> {
    return $.utils.initList(6, FragmentMetadata._TileVarSizes, length, this);
  }
  set tileVarSizes(value: $.List<$.List<bigint>>) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptTileValidityOffsets(value: $.Orphan<$.List<$.List<bigint>>>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownTileValidityOffsets(): $.Orphan<$.List<$.List<bigint>>> {
    return $.utils.disown(this.tileValidityOffsets);
  }
  /**
* Validity tile offests in their attribute files
*
*/
  get tileValidityOffsets(): $.List<$.List<bigint>> {
    return $.utils.getList(7, FragmentMetadata._TileValidityOffsets, this);
  }
  _hasTileValidityOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initTileValidityOffsets(length: number): $.List<$.List<bigint>> {
    return $.utils.initList(7, FragmentMetadata._TileValidityOffsets, length, this);
  }
  set tileValidityOffsets(value: $.List<$.List<bigint>>) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  _adoptTileMinBuffer(value: $.Orphan<$.List<$.List<number>>>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownTileMinBuffer(): $.Orphan<$.List<$.List<number>>> {
    return $.utils.disown(this.tileMinBuffer);
  }
  /**
* tile min buffers
*
*/
  get tileMinBuffer(): $.List<$.List<number>> {
    return $.utils.getList(8, FragmentMetadata._TileMinBuffer, this);
  }
  _hasTileMinBuffer(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initTileMinBuffer(length: number): $.List<$.List<number>> {
    return $.utils.initList(8, FragmentMetadata._TileMinBuffer, length, this);
  }
  set tileMinBuffer(value: $.List<$.List<number>>) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  _adoptTileMinVarBuffer(value: $.Orphan<$.List<$.List<number>>>): void {
    $.utils.adopt(value, $.utils.getPointer(9, this));
  }
  _disownTileMinVarBuffer(): $.Orphan<$.List<$.List<number>>> {
    return $.utils.disown(this.tileMinVarBuffer);
  }
  /**
* tile min buffers for var length data
*
*/
  get tileMinVarBuffer(): $.List<$.List<number>> {
    return $.utils.getList(9, FragmentMetadata._TileMinVarBuffer, this);
  }
  _hasTileMinVarBuffer(): boolean {
    return !$.utils.isNull($.utils.getPointer(9, this));
  }
  _initTileMinVarBuffer(length: number): $.List<$.List<number>> {
    return $.utils.initList(9, FragmentMetadata._TileMinVarBuffer, length, this);
  }
  set tileMinVarBuffer(value: $.List<$.List<number>>) {
    $.utils.copyFrom(value, $.utils.getPointer(9, this));
  }
  _adoptTileMaxBuffer(value: $.Orphan<$.List<$.List<number>>>): void {
    $.utils.adopt(value, $.utils.getPointer(10, this));
  }
  _disownTileMaxBuffer(): $.Orphan<$.List<$.List<number>>> {
    return $.utils.disown(this.tileMaxBuffer);
  }
  /**
* tile max buffers
*
*/
  get tileMaxBuffer(): $.List<$.List<number>> {
    return $.utils.getList(10, FragmentMetadata._TileMaxBuffer, this);
  }
  _hasTileMaxBuffer(): boolean {
    return !$.utils.isNull($.utils.getPointer(10, this));
  }
  _initTileMaxBuffer(length: number): $.List<$.List<number>> {
    return $.utils.initList(10, FragmentMetadata._TileMaxBuffer, length, this);
  }
  set tileMaxBuffer(value: $.List<$.List<number>>) {
    $.utils.copyFrom(value, $.utils.getPointer(10, this));
  }
  _adoptTileMaxVarBuffer(value: $.Orphan<$.List<$.List<number>>>): void {
    $.utils.adopt(value, $.utils.getPointer(11, this));
  }
  _disownTileMaxVarBuffer(): $.Orphan<$.List<$.List<number>>> {
    return $.utils.disown(this.tileMaxVarBuffer);
  }
  /**
* tile max buffers for var length data
*
*/
  get tileMaxVarBuffer(): $.List<$.List<number>> {
    return $.utils.getList(11, FragmentMetadata._TileMaxVarBuffer, this);
  }
  _hasTileMaxVarBuffer(): boolean {
    return !$.utils.isNull($.utils.getPointer(11, this));
  }
  _initTileMaxVarBuffer(length: number): $.List<$.List<number>> {
    return $.utils.initList(11, FragmentMetadata._TileMaxVarBuffer, length, this);
  }
  set tileMaxVarBuffer(value: $.List<$.List<number>>) {
    $.utils.copyFrom(value, $.utils.getPointer(11, this));
  }
  _adoptTileSums(value: $.Orphan<$.List<$.List<number>>>): void {
    $.utils.adopt(value, $.utils.getPointer(12, this));
  }
  _disownTileSums(): $.Orphan<$.List<$.List<number>>> {
    return $.utils.disown(this.tileSums);
  }
  /**
* tile sum values
*
*/
  get tileSums(): $.List<$.List<number>> {
    return $.utils.getList(12, FragmentMetadata._TileSums, this);
  }
  _hasTileSums(): boolean {
    return !$.utils.isNull($.utils.getPointer(12, this));
  }
  _initTileSums(length: number): $.List<$.List<number>> {
    return $.utils.initList(12, FragmentMetadata._TileSums, length, this);
  }
  set tileSums(value: $.List<$.List<number>>) {
    $.utils.copyFrom(value, $.utils.getPointer(12, this));
  }
  _adoptTileNullCounts(value: $.Orphan<$.List<$.List<bigint>>>): void {
    $.utils.adopt(value, $.utils.getPointer(13, this));
  }
  _disownTileNullCounts(): $.Orphan<$.List<$.List<bigint>>> {
    return $.utils.disown(this.tileNullCounts);
  }
  /**
* tile null count values
*
*/
  get tileNullCounts(): $.List<$.List<bigint>> {
    return $.utils.getList(13, FragmentMetadata._TileNullCounts, this);
  }
  _hasTileNullCounts(): boolean {
    return !$.utils.isNull($.utils.getPointer(13, this));
  }
  _initTileNullCounts(length: number): $.List<$.List<bigint>> {
    return $.utils.initList(13, FragmentMetadata._TileNullCounts, length, this);
  }
  set tileNullCounts(value: $.List<$.List<bigint>>) {
    $.utils.copyFrom(value, $.utils.getPointer(13, this));
  }
  _adoptFragmentMins(value: $.Orphan<$.List<$.List<number>>>): void {
    $.utils.adopt(value, $.utils.getPointer(14, this));
  }
  _disownFragmentMins(): $.Orphan<$.List<$.List<number>>> {
    return $.utils.disown(this.fragmentMins);
  }
  /**
* fragment min values
*
*/
  get fragmentMins(): $.List<$.List<number>> {
    return $.utils.getList(14, FragmentMetadata._FragmentMins, this);
  }
  _hasFragmentMins(): boolean {
    return !$.utils.isNull($.utils.getPointer(14, this));
  }
  _initFragmentMins(length: number): $.List<$.List<number>> {
    return $.utils.initList(14, FragmentMetadata._FragmentMins, length, this);
  }
  set fragmentMins(value: $.List<$.List<number>>) {
    $.utils.copyFrom(value, $.utils.getPointer(14, this));
  }
  _adoptFragmentMaxs(value: $.Orphan<$.List<$.List<number>>>): void {
    $.utils.adopt(value, $.utils.getPointer(15, this));
  }
  _disownFragmentMaxs(): $.Orphan<$.List<$.List<number>>> {
    return $.utils.disown(this.fragmentMaxs);
  }
  /**
* fragment max values
*
*/
  get fragmentMaxs(): $.List<$.List<number>> {
    return $.utils.getList(15, FragmentMetadata._FragmentMaxs, this);
  }
  _hasFragmentMaxs(): boolean {
    return !$.utils.isNull($.utils.getPointer(15, this));
  }
  _initFragmentMaxs(length: number): $.List<$.List<number>> {
    return $.utils.initList(15, FragmentMetadata._FragmentMaxs, length, this);
  }
  set fragmentMaxs(value: $.List<$.List<number>>) {
    $.utils.copyFrom(value, $.utils.getPointer(15, this));
  }
  _adoptFragmentSums(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(16, this));
  }
  _disownFragmentSums(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.fragmentSums);
  }
  /**
* fragment sum values
*
*/
  get fragmentSums(): $.List<bigint> {
    return $.utils.getList(16, $.Uint64List, this);
  }
  _hasFragmentSums(): boolean {
    return !$.utils.isNull($.utils.getPointer(16, this));
  }
  _initFragmentSums(length: number): $.List<bigint> {
    return $.utils.initList(16, $.Uint64List, length, this);
  }
  set fragmentSums(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(16, this));
  }
  _adoptFragmentNullCounts(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(17, this));
  }
  _disownFragmentNullCounts(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.fragmentNullCounts);
  }
  /**
* fragment null count values
*
*/
  get fragmentNullCounts(): $.List<bigint> {
    return $.utils.getList(17, $.Uint64List, this);
  }
  _hasFragmentNullCounts(): boolean {
    return !$.utils.isNull($.utils.getPointer(17, this));
  }
  _initFragmentNullCounts(length: number): $.List<bigint> {
    return $.utils.initList(17, $.Uint64List, length, this);
  }
  set fragmentNullCounts(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(17, this));
  }
  /**
* the format version of this metadata
*
*/
  get version(): number {
    return $.utils.getUint32(4, this);
  }
  set version(value: number) {
    $.utils.setUint32(4, value, this);
  }
  _adoptTimestampRange(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(18, this));
  }
  _disownTimestampRange(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.timestampRange);
  }
  /**
* A pair of timestamps for fragment
*
*/
  get timestampRange(): $.List<bigint> {
    return $.utils.getList(18, $.Uint64List, this);
  }
  _hasTimestampRange(): boolean {
    return !$.utils.isNull($.utils.getPointer(18, this));
  }
  _initTimestampRange(length: number): $.List<bigint> {
    return $.utils.initList(18, $.Uint64List, length, this);
  }
  set timestampRange(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(18, this));
  }
  /**
* The number of cells in the last tile
*
*/
  get lastTileCellNum(): bigint {
    return $.utils.getUint64(24, this);
  }
  set lastTileCellNum(value: bigint) {
    $.utils.setUint64(24, value, this);
  }
  _adoptNonEmptyDomain(value: $.Orphan<NonEmptyDomainList>): void {
    $.utils.adopt(value, $.utils.getPointer(19, this));
  }
  _disownNonEmptyDomain(): $.Orphan<NonEmptyDomainList> {
    return $.utils.disown(this.nonEmptyDomain);
  }
  /**
* The non empty domain of the fragment
*
*/
  get nonEmptyDomain(): NonEmptyDomainList {
    return $.utils.getStruct(19, NonEmptyDomainList, this);
  }
  _hasNonEmptyDomain(): boolean {
    return !$.utils.isNull($.utils.getPointer(19, this));
  }
  _initNonEmptyDomain(): NonEmptyDomainList {
    return $.utils.initStructAt(19, NonEmptyDomainList, this);
  }
  set nonEmptyDomain(value: NonEmptyDomainList) {
    $.utils.copyFrom(value, $.utils.getPointer(19, this));
  }
  _adoptRtree(value: $.Orphan<$.Data>): void {
    $.utils.adopt(value, $.utils.getPointer(20, this));
  }
  _disownRtree(): $.Orphan<$.Data> {
    return $.utils.disown(this.rtree);
  }
  /**
* The RTree for the MBRs serialized as a blob
*
*/
  get rtree(): $.Data {
    return $.utils.getData(20, this);
  }
  _hasRtree(): boolean {
    return !$.utils.isNull($.utils.getPointer(20, this));
  }
  _initRtree(length: number): $.Data {
    return $.utils.initData(20, length, this);
  }
  set rtree(value: $.Data) {
    $.utils.copyFrom(value, $.utils.getPointer(20, this));
  }
  /**
* if the fragment metadata footer appears in a consolidated file
*
*/
  get hasConsolidatedFooter(): boolean {
    return $.utils.getBit(2, this);
  }
  set hasConsolidatedFooter(value: boolean) {
    $.utils.setBit(2, value, this);
  }
  _adoptGtOffsets(value: $.Orphan<FragmentMetadata_GenericTileOffsets>): void {
    $.utils.adopt(value, $.utils.getPointer(21, this));
  }
  _disownGtOffsets(): $.Orphan<FragmentMetadata_GenericTileOffsets> {
    return $.utils.disown(this.gtOffsets);
  }
  /**
* the start offsets of the generic tiles stored in the metadata file
*
*/
  get gtOffsets(): FragmentMetadata_GenericTileOffsets {
    return $.utils.getStruct(21, FragmentMetadata_GenericTileOffsets, this);
  }
  _hasGtOffsets(): boolean {
    return !$.utils.isNull($.utils.getPointer(21, this));
  }
  _initGtOffsets(): FragmentMetadata_GenericTileOffsets {
    return $.utils.initStructAt(21, FragmentMetadata_GenericTileOffsets, this);
  }
  set gtOffsets(value: FragmentMetadata_GenericTileOffsets) {
    $.utils.copyFrom(value, $.utils.getPointer(21, this));
  }
  /**
* array schema name
*
*/
  get arraySchemaName(): string {
    return $.utils.getText(22, this);
  }
  set arraySchemaName(value: string) {
    $.utils.setText(22, value, this);
  }
  toString(): string { return "FragmentMetadata_" + super.toString(); }
}
export class MultiPartUploadState extends $.Struct {
  static readonly _capnp = {
    displayName: "MultiPartUploadState",
    id: "d492b6734d5e3bf5",
    size: new $.ObjectSize(8, 4),
  };
  static _CompletedParts: $.ListCtor<CompletedPart>;
  static _BufferedChunks: $.ListCtor<BufferedChunk>;
  /**
* The index of the next part in a multipart upload process
*
*/
  get partNumber(): bigint {
    return $.utils.getUint64(0, this);
  }
  set partNumber(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* S3 specific ID identifying a multipart upload process for a file
*
*/
  get uploadId(): string {
    return $.utils.getText(0, this);
  }
  set uploadId(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* Status field used to signal an error in a multipart upload process
*
*/
  get status(): string {
    return $.utils.getText(1, this);
  }
  set status(value: string) {
    $.utils.setText(1, value, this);
  }
  _adoptCompletedParts(value: $.Orphan<$.List<CompletedPart>>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownCompletedParts(): $.Orphan<$.List<CompletedPart>> {
    return $.utils.disown(this.completedParts);
  }
  /**
* A list of parts that are already uploaded
*
*/
  get completedParts(): $.List<CompletedPart> {
    return $.utils.getList(2, MultiPartUploadState._CompletedParts, this);
  }
  _hasCompletedParts(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initCompletedParts(length: number): $.List<CompletedPart> {
    return $.utils.initList(2, MultiPartUploadState._CompletedParts, length, this);
  }
  set completedParts(value: $.List<CompletedPart>) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptBufferedChunks(value: $.Orphan<$.List<BufferedChunk>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownBufferedChunks(): $.Orphan<$.List<BufferedChunk>> {
    return $.utils.disown(this.bufferedChunks);
  }
  /**
* S3 specific field. A partial remote global order write might not be
* result in a direct multipart part upload, s3 does not permit parts to be
* smaller than 5mb (except the last one). We buffer directly on S3 using
* intermediate files until we can deliver a big enough multipart part.
* This list helps us keep track of these intermediate buffering files.
*
*/
  get bufferedChunks(): $.List<BufferedChunk> {
    return $.utils.getList(3, MultiPartUploadState._BufferedChunks, this);
  }
  _hasBufferedChunks(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initBufferedChunks(length: number): $.List<BufferedChunk> {
    return $.utils.initList(3, MultiPartUploadState._BufferedChunks, length, this);
  }
  set bufferedChunks(value: $.List<BufferedChunk>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  toString(): string { return "MultiPartUploadState_" + super.toString(); }
}
export class CompletedPart extends $.Struct {
  static readonly _capnp = {
    displayName: "CompletedPart",
    id: "bde8ebd7b13d8625",
    size: new $.ObjectSize(8, 1),
  };
  /**
* S3 specific hash for the uploaded part
*
*/
  get eTag(): string {
    return $.utils.getText(0, this);
  }
  set eTag(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* The index of the uploaded part
*
*/
  get partNumber(): bigint {
    return $.utils.getUint64(0, this);
  }
  set partNumber(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  toString(): string { return "CompletedPart_" + super.toString(); }
}
export class WrittenFragmentInfo extends $.Struct {
  static readonly _capnp = {
    displayName: "WrittenFragmentInfo",
    id: "a736c51d292ca752",
    size: new $.ObjectSize(0, 2),
  };
  get uri(): string {
    return $.utils.getText(0, this);
  }
  set uri(value: string) {
    $.utils.setText(0, value, this);
  }
  _adoptTimestampRange(value: $.Orphan<$.List<bigint>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownTimestampRange(): $.Orphan<$.List<bigint>> {
    return $.utils.disown(this.timestampRange);
  }
  get timestampRange(): $.List<bigint> {
    return $.utils.getList(1, $.Uint64List, this);
  }
  _hasTimestampRange(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initTimestampRange(length: number): $.List<bigint> {
    return $.utils.initList(1, $.Uint64List, length, this);
  }
  set timestampRange(value: $.List<bigint>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "WrittenFragmentInfo_" + super.toString(); }
}
export class BufferedChunk extends $.Struct {
  static readonly _capnp = {
    displayName: "BufferedChunk",
    id: "cd8abc9dabc4b03f",
    size: new $.ObjectSize(8, 1),
  };
  /**
* path to intermediate chunk which buffers
* a <5mb remote global order write operation
*
*/
  get uri(): string {
    return $.utils.getText(0, this);
  }
  set uri(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* the size in bytes of the intermediate chunk
*
*/
  get size(): bigint {
    return $.utils.getUint64(0, this);
  }
  set size(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  toString(): string { return "BufferedChunk_" + super.toString(); }
}
export class ArrayDeleteFragmentsListRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "ArrayDeleteFragmentsListRequest",
    id: "cfea684b4bcd0721",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptEntries(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownEntries(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.entries);
  }
  /**
* Fragment list to delete
*
*/
  get entries(): $.List<string> {
    return $.utils.getList(1, $.TextList, this);
  }
  _hasEntries(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initEntries(length: number): $.List<string> {
    return $.utils.initList(1, $.TextList, length, this);
  }
  set entries(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "ArrayDeleteFragmentsListRequest_" + super.toString(); }
}
export class ArrayDeleteFragmentsTimestampsRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "ArrayDeleteFragmentsTimestampsRequest",
    id: "aaeeafe1e9f3ea1c",
    size: new $.ObjectSize(16, 1),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  /**
* Start timestamp for the delete
*
*/
  get startTimestamp(): bigint {
    return $.utils.getUint64(0, this);
  }
  set startTimestamp(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
* End timestamp for the delete
*
*/
  get endTimestamp(): bigint {
    return $.utils.getUint64(8, this);
  }
  set endTimestamp(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  toString(): string { return "ArrayDeleteFragmentsTimestampsRequest_" + super.toString(); }
}
export class ArrayConsolidationRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "ArrayConsolidationRequest",
    id: "f5a35661031194d2",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptFragments(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownFragments(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.fragments);
  }
  /**
* Fragment list to consolidate
*
*/
  get fragments(): $.List<string> {
    return $.utils.getList(1, $.TextList, this);
  }
  _hasFragments(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initFragments(length: number): $.List<string> {
    return $.utils.initList(1, $.TextList, length, this);
  }
  set fragments(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "ArrayConsolidationRequest_" + super.toString(); }
}
export class ArrayVacuumRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "ArrayVacuumRequest",
    id: "e68edfc0939e63df",
    size: new $.ObjectSize(0, 1),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "ArrayVacuumRequest_" + super.toString(); }
}
export class LoadEnumerationsRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "LoadEnumerationsRequest",
    id: "891a70a671f15cf6",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptEnumerations(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownEnumerations(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.enumerations);
  }
  /**
* Enumeration names to load
*
*/
  get enumerations(): $.List<string> {
    return $.utils.getList(1, $.TextList, this);
  }
  _hasEnumerations(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initEnumerations(length: number): $.List<string> {
    return $.utils.initList(1, $.TextList, length, this);
  }
  set enumerations(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "LoadEnumerationsRequest_" + super.toString(); }
}
export class LoadEnumerationsResponse extends $.Struct {
  static readonly _capnp = {
    displayName: "LoadEnumerationsResponse",
    id: "805c080c10c1e959",
    size: new $.ObjectSize(0, 2),
  };
  static _Enumerations: $.ListCtor<Enumeration>;
  _adoptEnumerations(value: $.Orphan<$.List<Enumeration>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownEnumerations(): $.Orphan<$.List<Enumeration>> {
    return $.utils.disown(this.enumerations);
  }
  /**
* The loaded enumerations for the latest array schema
* This field is only used if enumerations are requested for the latest schema
*
*/
  get enumerations(): $.List<Enumeration> {
    return $.utils.getList(0, LoadEnumerationsResponse._Enumerations, this);
  }
  _hasEnumerations(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initEnumerations(length: number): $.List<Enumeration> {
    return $.utils.initList(0, LoadEnumerationsResponse._Enumerations, length, this);
  }
  set enumerations(value: $.List<Enumeration>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptAllEnumerations(value: $.Orphan<MapEnumeration>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownAllEnumerations(): $.Orphan<MapEnumeration> {
    return $.utils.disown(this.allEnumerations);
  }
  /**
* The loaded enumerations for all array schemas
* This field is only used if enumerations are requested for all schemas
*
*/
  get allEnumerations(): MapEnumeration {
    return $.utils.getStruct(1, MapEnumeration, this);
  }
  _hasAllEnumerations(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initAllEnumerations(): MapEnumeration {
    return $.utils.initStructAt(1, MapEnumeration, this);
  }
  set allEnumerations(value: MapEnumeration) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "LoadEnumerationsResponse_" + super.toString(); }
}
export class LoadArraySchemaRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "LoadArraySchemaRequest",
    id: "83f094010132ff21",
    size: new $.ObjectSize(8, 1),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  /**
* When true, include all enumeration data in the returned ArraySchema
* This field is only serialized for backwards compatibility. Future options
* that modify array schema load behavior should be handled within the Config.
*
*/
  get includeEnumerations(): boolean {
    return $.utils.getBit(0, this);
  }
  set includeEnumerations(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  toString(): string { return "LoadArraySchemaRequest_" + super.toString(); }
}
export class LoadArraySchemaResponse extends $.Struct {
  static readonly _capnp = {
    displayName: "LoadArraySchemaResponse",
    id: "ebe17f59ac9a1df1",
    size: new $.ObjectSize(0, 2),
  };
  _adoptSchema(value: $.Orphan<ArraySchema>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownSchema(): $.Orphan<ArraySchema> {
    return $.utils.disown(this.schema);
  }
  /**
* The loaded ArraySchema
*
*/
  get schema(): ArraySchema {
    return $.utils.getStruct(0, ArraySchema, this);
  }
  _hasSchema(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initSchema(): ArraySchema {
    return $.utils.initStructAt(0, ArraySchema, this);
  }
  set schema(value: ArraySchema) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptArraySchemasAll(value: $.Orphan<Map>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownArraySchemasAll(): $.Orphan<Map> {
    return $.utils.disown(this.arraySchemasAll);
  }
  /**
* map of all Array Schemas
*
*/
  get arraySchemasAll(): Map {
    return $.utils.getStruct(1, Map, this);
  }
  _hasArraySchemasAll(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initArraySchemasAll(): Map {
    return $.utils.initStructAt(1, Map, this);
  }
  set arraySchemasAll(value: Map) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "LoadArraySchemaResponse_" + super.toString(); }
}
export class QueryPlanRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "QueryPlanRequest",
    id: "e06f571aa93eb314",
    size: new $.ObjectSize(0, 2),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptQuery(value: $.Orphan<Query>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownQuery(): $.Orphan<Query> {
    return $.utils.disown(this.query);
  }
  /**
* the query for which we request the plan
*
*/
  get query(): Query {
    return $.utils.getStruct(1, Query, this);
  }
  _hasQuery(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initQuery(): Query {
    return $.utils.initStructAt(1, Query, this);
  }
  set query(value: Query) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "QueryPlanRequest_" + super.toString(); }
}
export class QueryPlanResponse extends $.Struct {
  static readonly _capnp = {
    displayName: "QueryPlanResponse",
    id: "9fd8fc2f462b2d06",
    size: new $.ObjectSize(0, 5),
  };
  /**
* query layout
*
*/
  get queryLayout(): string {
    return $.utils.getText(0, this);
  }
  set queryLayout(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* name of strategy used by the query
*
*/
  get strategyName(): string {
    return $.utils.getText(1, this);
  }
  set strategyName(value: string) {
    $.utils.setText(1, value, this);
  }
  /**
* type of array
*
*/
  get arrayType(): string {
    return $.utils.getText(2, this);
  }
  set arrayType(value: string) {
    $.utils.setText(2, value, this);
  }
  _adoptAttributeNames(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownAttributeNames(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.attributeNames);
  }
  /**
* names of attributes in the query
*
*/
  get attributeNames(): $.List<string> {
    return $.utils.getList(3, $.TextList, this);
  }
  _hasAttributeNames(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initAttributeNames(length: number): $.List<string> {
    return $.utils.initList(3, $.TextList, length, this);
  }
  set attributeNames(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptDimensionNames(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownDimensionNames(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.dimensionNames);
  }
  /**
* names of dimensions in the query
*
*/
  get dimensionNames(): $.List<string> {
    return $.utils.getList(4, $.TextList, this);
  }
  _hasDimensionNames(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initDimensionNames(length: number): $.List<string> {
    return $.utils.initList(4, $.TextList, length, this);
  }
  set dimensionNames(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  toString(): string { return "QueryPlanResponse_" + super.toString(); }
}
export class ConsolidationPlanRequest extends $.Struct {
  static readonly _capnp = {
    displayName: "ConsolidationPlanRequest",
    id: "8965edf5597ce627",
    size: new $.ObjectSize(8, 1),
  };
  _adoptConfig(value: $.Orphan<Config>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownConfig(): $.Orphan<Config> {
    return $.utils.disown(this.config);
  }
  /**
* Config
*
*/
  get config(): Config {
    return $.utils.getStruct(0, Config, this);
  }
  _hasConfig(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initConfig(): Config {
    return $.utils.initStructAt(0, Config, this);
  }
  set config(value: Config) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  /**
* Maximum fragment size
*
*/
  get fragmentSize(): bigint {
    return $.utils.getUint64(0, this);
  }
  set fragmentSize(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  toString(): string { return "ConsolidationPlanRequest_" + super.toString(); }
}
export class ConsolidationPlanResponse extends $.Struct {
  static readonly _capnp = {
    displayName: "ConsolidationPlanResponse",
    id: "aac8bf9b5211388b",
    size: new $.ObjectSize(0, 1),
  };
  static _FragmentUrisPerNode: $.ListCtor<$.List<string>>;
  _adoptFragmentUrisPerNode(value: $.Orphan<$.List<$.List<string>>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownFragmentUrisPerNode(): $.Orphan<$.List<$.List<string>>> {
    return $.utils.disown(this.fragmentUrisPerNode);
  }
  /**
* The uris for each node of the consolidation plan
*
*/
  get fragmentUrisPerNode(): $.List<$.List<string>> {
    return $.utils.getList(0, ConsolidationPlanResponse._FragmentUrisPerNode, this);
  }
  _hasFragmentUrisPerNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initFragmentUrisPerNode(length: number): $.List<$.List<string>> {
    return $.utils.initList(0, ConsolidationPlanResponse._FragmentUrisPerNode, length, this);
  }
  set fragmentUrisPerNode(value: $.List<$.List<string>>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "ConsolidationPlanResponse_" + super.toString(); }
}
/**
* structure representing a query channel, that is a stream of data within
* a TileDB query. Such channels can be generated for the purpose of avoiding
* processing result items multiple times in more complex queries such as e.g.
* grouping queries.
*
*/
export class QueryChannel extends $.Struct {
  static readonly _capnp = {
    displayName: "QueryChannel",
    id: "ca2d4d0bfe4ae5d9",
    size: new $.ObjectSize(8, 1),
  };
  static _Aggregates: $.ListCtor<Aggregate>;
  /**
* True if a channel is the default query channel
*
*/
  get default(): boolean {
    return $.utils.getBit(0, this);
  }
  set default(value: boolean) {
    $.utils.setBit(0, value, this);
  }
  _adoptAggregates(value: $.Orphan<$.List<Aggregate>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownAggregates(): $.Orphan<$.List<Aggregate>> {
    return $.utils.disown(this.aggregates);
  }
  /**
* a list of the aggregate operations applied on this channel
*
*/
  get aggregates(): $.List<Aggregate> {
    return $.utils.getList(0, QueryChannel._Aggregates, this);
  }
  _hasAggregates(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initAggregates(length: number): $.List<Aggregate> {
    return $.utils.initList(0, QueryChannel._Aggregates, length, this);
  }
  set aggregates(value: $.List<Aggregate>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "QueryChannel_" + super.toString(); }
}
/**
* structure representing a query aggregate operation
*
*/
export class Aggregate extends $.Struct {
  static readonly _capnp = {
    displayName: "Aggregate",
    id: "e193f1f45a9f102e",
    size: new $.ObjectSize(0, 3),
  };
  /**
* name of the result query buffers
*
*/
  get outputFieldName(): string {
    return $.utils.getText(0, this);
  }
  set outputFieldName(value: string) {
    $.utils.setText(0, value, this);
  }
  /**
* name of the input field the aggregate is applied on
*
*/
  get inputFieldName(): string {
    return $.utils.getText(1, this);
  }
  set inputFieldName(value: string) {
    $.utils.setText(1, value, this);
  }
  /**
* the name of aggregate, e.g. COUNT, MEAN, SUM used for constructing the
* correct object during deserialization
*
*/
  get name(): string {
    return $.utils.getText(2, this);
  }
  set name(value: string) {
    $.utils.setText(2, value, this);
  }
  toString(): string { return "Aggregate_" + super.toString(); }
}
export const CurrentDomain_Which = {
  /**
* The format version of this feature
*
*/
  EMPTY_CURRENT_DOMAIN: 0,
  /**
* The type of CurrentDomain (e.g. NDRECTANGLE)
*
*/
  ND_RECTANGLE: 1
} as const;
export type CurrentDomain_Which = (typeof CurrentDomain_Which)[keyof typeof CurrentDomain_Which];
/**
* This struct represents the current domain of an array.
* It is set on the schema at array creation time and can be
* be evolved using ArraySchemaEvolution APIs by providing an expansion
* of the current domain that is already set on the array schema.
*
*/
export class CurrentDomain extends $.Struct {
  static readonly EMPTY_CURRENT_DOMAIN = CurrentDomain_Which.EMPTY_CURRENT_DOMAIN;
  static readonly ND_RECTANGLE = CurrentDomain_Which.ND_RECTANGLE;
  static readonly _capnp = {
    displayName: "CurrentDomain",
    id: "fafb9c94c6b54ec9",
    size: new $.ObjectSize(8, 2),
  };
  /**
* The format version of this feature
*
*/
  get version(): number {
    return $.utils.getUint32(0, this);
  }
  set version(value: number) {
    $.utils.setUint32(0, value, this);
  }
  /**
* The type of CurrentDomain (e.g. NDRECTANGLE)
*
*/
  get type(): string {
    return $.utils.getText(0, this);
  }
  set type(value: string) {
    $.utils.setText(0, value, this);
  }
  get _isEmptyCurrentDomain(): boolean {
    return $.utils.getUint16(4, this) === 0;
  }
  set emptyCurrentDomain(_: true) {
    $.utils.setUint16(4, 0, this);
  }
  _adoptNdRectangle(value: $.Orphan<NDRectangle>): void {
    $.utils.setUint16(4, 1, this);
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownNdRectangle(): $.Orphan<NDRectangle> {
    return $.utils.disown(this.ndRectangle);
  }
  /**
* This CurrentDomain is an n-dimensional rectangle
*
*/
  get ndRectangle(): NDRectangle {
    $.utils.testWhich("ndRectangle", $.utils.getUint16(4, this), 1, this);
    return $.utils.getStruct(1, NDRectangle, this);
  }
  _hasNdRectangle(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initNdRectangle(): NDRectangle {
    $.utils.setUint16(4, 1, this);
    return $.utils.initStructAt(1, NDRectangle, this);
  }
  get _isNdRectangle(): boolean {
    return $.utils.getUint16(4, this) === 1;
  }
  set ndRectangle(value: NDRectangle) {
    $.utils.setUint16(4, 1, this);
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "CurrentDomain_" + super.toString(); }
  which(): CurrentDomain_Which {
    return $.utils.getUint16(4, this) as CurrentDomain_Which;
  }
}
export class NDRectangle extends $.Struct {
  static readonly _capnp = {
    displayName: "NDRectangle",
    id: "ce64eabcdabb02b5",
    size: new $.ObjectSize(0, 1),
  };
  static _Ndranges: $.ListCtor<SubarrayRanges>;
  _adoptNdranges(value: $.Orphan<$.List<SubarrayRanges>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownNdranges(): $.Orphan<$.List<SubarrayRanges>> {
    return $.utils.disown(this.ndranges);
  }
  /**
* List of 1D ranges, one per dimension
* SubarrayRanges is designed to hold multiple ranges per dimension,
* For CurrentDomain's NDRectangle we only need one range per dimension.
*
*/
  get ndranges(): $.List<SubarrayRanges> {
    return $.utils.getList(0, NDRectangle._Ndranges, this);
  }
  _hasNdranges(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initNdranges(length: number): $.List<SubarrayRanges> {
    return $.utils.initList(0, NDRectangle._Ndranges, length, this);
  }
  set ndranges(value: $.List<SubarrayRanges>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string { return "NDRectangle_" + super.toString(); }
}
export const ObjectType = {
  ARRAY: 0,
  GROUP: 1
} as const;
export type ObjectType = (typeof ObjectType)[keyof typeof ObjectType];
/**
* Contains information about a TileDB object.
*
*/
export class ObjectInfoResponse extends $.Struct {
  static readonly _capnp = {
    displayName: "ObjectInfoResponse",
    id: "87f0466598bb29be",
    size: new $.ObjectSize(8, 0),
  };
  /**
* The object's type (array or group).
*
*/
  get objectType(): ObjectType {
    return $.utils.getUint16(0, this) as ObjectType;
  }
  set objectType(value: ObjectType) {
    $.utils.setUint16(0, value, this);
  }
  toString(): string { return "ObjectInfoResponse_" + super.toString(); }
}
export class TileDBVersion extends $.Struct {
  static readonly _capnp = {
    displayName: "TileDBVersion",
    id: "ff44627d34d063ab",
    size: new $.ObjectSize(8, 0),
  };
  get major(): number {
    return $.utils.getUint16(0, this);
  }
  set major(value: number) {
    $.utils.setUint16(0, value, this);
  }
  get minor(): number {
    return $.utils.getUint16(2, this);
  }
  set minor(value: number) {
    $.utils.setUint16(2, value, this);
  }
  get patch(): number {
    return $.utils.getUint16(4, this);
  }
  set patch(value: number) {
    $.utils.setUint16(4, value, this);
  }
  toString(): string { return "TileDBVersion_" + super.toString(); }
}
export class RestCapabilities extends $.Struct {
  static readonly _capnp = {
    displayName: "RestCapabilities",
    id: "8de04c65deeb1510",
    size: new $.ObjectSize(0, 2),
  };
  _adoptDeployedTileDBVersion(value: $.Orphan<TileDBVersion>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownDeployedTileDBVersion(): $.Orphan<TileDBVersion> {
    return $.utils.disown(this.deployedTileDBVersion);
  }
  get deployedTileDBVersion(): TileDBVersion {
    return $.utils.getStruct(0, TileDBVersion, this);
  }
  _hasDeployedTileDBVersion(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initDeployedTileDBVersion(): TileDBVersion {
    return $.utils.initStructAt(0, TileDBVersion, this);
  }
  set deployedTileDBVersion(value: TileDBVersion) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptMinimumSupportedTileDBClientVersion(value: $.Orphan<TileDBVersion>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownMinimumSupportedTileDBClientVersion(): $.Orphan<TileDBVersion> {
    return $.utils.disown(this.minimumSupportedTileDBClientVersion);
  }
  get minimumSupportedTileDBClientVersion(): TileDBVersion {
    return $.utils.getStruct(1, TileDBVersion, this);
  }
  _hasMinimumSupportedTileDBClientVersion(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initMinimumSupportedTileDBClientVersion(): TileDBVersion {
    return $.utils.initStructAt(1, TileDBVersion, this);
  }
  set minimumSupportedTileDBClientVersion(value: TileDBVersion) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string { return "RestCapabilities_" + super.toString(); }
}
Config._Entries = $.CompositeList(KV);
Array._FragmentMetadataAll = $.CompositeList(FragmentMetadata);
ArraySchema._Attributes = $.CompositeList(Attribute);
ArraySchema._DimensionLabels = $.CompositeList(DimensionLabel);
ArraySchema._Enumerations = $.CompositeList(Enumeration);
ArraySchema._EnumerationPathMap = $.CompositeList(KV);
ArraySchemaEvolution._AttributesToAdd = $.CompositeList(Attribute);
ArraySchemaEvolution._EnumerationsToAdd = $.CompositeList(Enumeration);
ArraySchemaEvolution._EnumerationsToExtend = $.CompositeList(Enumeration);
Domain._Dimensions = $.CompositeList(Dimension);
FilterPipeline._Filters = $.CompositeList(Filter);
Map._Entries = $.CompositeList(Map_Entry);
MapEnumeration_Entry._Value = $.CompositeList(Enumeration);
MapEnumeration._Entries = $.CompositeList(MapEnumeration_Entry);
MapUInt32._Entries = $.CompositeList(MapUInt32_Entry);
MapInt64._Entries = $.CompositeList(MapInt64_Entry);
MapUInt64._Entries = $.CompositeList(MapUInt64_Entry);
MapFloat64._Entries = $.CompositeList(MapFloat64_Entry);
Subarray._Ranges = $.CompositeList(SubarrayRanges);
Subarray._LabelRanges = $.CompositeList(LabelSubarrayRanges);
SubarrayPartitioner_State._SingleRange = $.CompositeList(Subarray);
SubarrayPartitioner_State._MultiRange = $.CompositeList(Subarray);
SubarrayPartitioner._Budget = $.CompositeList(AttributeBufferSize);
ASTNode._Children = $.CompositeList(ASTNode);
Condition._Clauses = $.CompositeList(ConditionClause);
ReadStateIndex._ResultCellSlab = $.CompositeList(ResultCellSlab);
ReadStateIndex._FragTileIdx = $.CompositeList(FragmentIndex);
Query._AttributeBufferHeaders = $.CompositeList(AttributeBufferHeader);
Query._WrittenFragmentInfo = $.CompositeList(WrittenFragmentInfo);
Query._Channels = $.CompositeList(QueryChannel);
NonEmptyDomainList._NonEmptyDomains = $.CompositeList(NonEmptyDomain);
ArrayMetadata._Entries = $.CompositeList(ArrayMetadata_MetadataEntry);
ArrayDirectory._ArrayMetaUris = $.CompositeList(ArrayDirectory_TimestampedURI);
ArrayDirectory._DeleteAndUpdateTileLocation = $.CompositeList(ArrayDirectory_DeleteAndUpdateTileLocation);
FragmentInfo._FragmentInfo = $.CompositeList(SingleFragmentInfo);
Group_GroupDetails._Members = $.CompositeList(GroupMember);
GroupUpdate_GroupUpdateDetails._MembersToAdd = $.CompositeList(GroupMember);
SingleCoord._Coords = $.PointerList($.Uint8List);
FragmentMetadata._TileOffsets = $.PointerList($.Uint64List);
FragmentMetadata._TileVarOffsets = $.PointerList($.Uint64List);
FragmentMetadata._TileVarSizes = $.PointerList($.Uint64List);
FragmentMetadata._TileValidityOffsets = $.PointerList($.Uint64List);
FragmentMetadata._TileMinBuffer = $.PointerList($.Uint8List);
FragmentMetadata._TileMinVarBuffer = $.PointerList($.Uint8List);
FragmentMetadata._TileMaxBuffer = $.PointerList($.Uint8List);
FragmentMetadata._TileMaxVarBuffer = $.PointerList($.Uint8List);
FragmentMetadata._TileSums = $.PointerList($.Uint8List);
FragmentMetadata._TileNullCounts = $.PointerList($.Uint64List);
FragmentMetadata._FragmentMins = $.PointerList($.Uint8List);
FragmentMetadata._FragmentMaxs = $.PointerList($.Uint8List);
MultiPartUploadState._CompletedParts = $.CompositeList(CompletedPart);
MultiPartUploadState._BufferedChunks = $.CompositeList(BufferedChunk);
LoadEnumerationsResponse._Enumerations = $.CompositeList(Enumeration);
ConsolidationPlanResponse._FragmentUrisPerNode = $.PointerList($.TextList);
QueryChannel._Aggregates = $.CompositeList(Aggregate);
NDRectangle._Ndranges = $.CompositeList(SubarrayRanges);
